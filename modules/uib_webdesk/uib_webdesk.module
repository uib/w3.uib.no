<?php
/**
 * @file
 * Code for the UiB webdesk feature.
 */

include_once 'uib_webdesk.features.inc';

/**
 * Implements hook_menu().
 */
function uib_webdesk_menu() {
  $items["webdesk/stats"] = array(
    'page callback' => 'uib_webdesk__stats_page',
    'file' => 'uib_webdesk.stats.inc',
    'access callback' => TRUE,
  );
  $items["webdesk/content-managers"] = array(
    'page callback' => 'uib_webdesk__content_managers_page',
    'file' => 'uib_webdesk.content_managers.inc',
    'access arguments' => array('administer users'),
  );
  $items["webdesk/release-notes"] = array(
    'page callback' => 'uib_webdesk__release_notes_page',
    'file' => 'uib_webdesk.release_notes.inc',
    'access callback' => TRUE,
  );
  $items["webdesk/userconn"] = array(
    'page callback' => 'uib_webdesk__connections',
    'access callback' => 'uib_user__allow_level_1',
    'page arguments' => array(2),
  );
  $items['webdesk/outdated'] = array(
    'title' => t('Outdated nodes'),
    'weight' => -50,
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'uib_webdesk__outdated',
    'access callback' => 'uib_user__allow_level_1',
    'page arguments' => array(2),
  );
  return $items;
}

/**
 * Implements hook_admin_menu_output_alter
 */
function uib_webdesk_admin_menu_output_alter(&$content) {
  global $user;
  if ( (in_array('innholdsprodusent', $user->roles, TRUE)) || (in_array('level 3', $user->roles, TRUE)) ) {
    // Do not let users at innholdsprodusent and level 3 see these admin menu items
    $content['menu']['admin/help']['#access'] = FALSE;
    $content['menu']['admin/index']['#access'] = FALSE;
  }
  if (!in_array('superbruker', $user->roles, TRUE)) {
    $content['menu']['webdesk']['webdesk/userconn']['#access'] = FALSE;
  }
  if (in_array('level 3', $user->roles, TRUE) && !in_array('innholdsprodusent', $user->roles) && !in_array('superbruker', $user->roles)) {
      $content['menu']['admin/structure']['#access'] = FALSE;
  }
  // prepopulate byline field
  if (!empty($content['menu']['admin/content']['node/add'])) {
    $content['menu']['admin/content']['node/add']['node/add/uib-article']['#options']['query'] = array('field_uib_byline' => $user->uid);
  }
  elseif (!empty($content['menu']['node/add'])) {
    // prepopulate byline field for innholdsprodusent and 3 users (admin menu structure is different)
    $content['menu']['node/add']['node/add/uib-article']['#options']['query'] = array('field_uib_byline' => $user->uid);
  }
  if (isset($content['menu']['webdesk/files'])) {
    $content['menu']['admin/content']['webdesk/files'] = $content['menu']['webdesk/files'];
    unset($content['menu']['webdesk/files']);
  }
}

/**
 * Implements hook_form_alter
 */
function uib_webdesk_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "views_exposed_form") {
    $form['created']['#size'] = 20;
    $form['changed']['#size'] = 20;
    //In combine__content_type__uib_article_type__value, value 1 corresponds to event
    $form['field_uib_event_type_value']['#states'] = array(
      'enabled' => array(
        ':input[name="combine__content_type__uib_article_type__value"]' => array('value' => '1'),
       ),
    );
  }
}

/**
 * Implements hook_preprocess_views_view
 */
function uib_webdesk_preprocess_views_view(&$variables) {
  $language_challenged_views = array('my_content', 'user_areas', 'scheduled_content');
  if (in_array($variables['view']->name, $language_challenged_views)) {
    $view = $variables['view'];
    if ($view->name == 'my_content' && $view->current_display == 'panel_pane_1') {
      $variables['rows'] = str_replace(array('(Norsk)', '(Norwegian)'), '(nb)', $variables['rows']);
      $variables['rows'] = str_replace(array('(Engelsk)', '(English)'), '(en)', $variables['rows']);
    }
    foreach ($view->result as $key => $item) {
      if ($item->node_language == 'nb') {
        $variables['rows'] = str_replace('en/node/' . $item->nid, 'nb/node/' . $item->nid, $variables['rows']);
      }
      if ($item->node_language == 'en') {
        $variables['rows'] = str_replace('nb/node/' . $item->nid, 'en/node/' . $item->nid, $variables['rows']);
      }
    }
  }
}

function uib_webdesk__outdated($area = FALSE) {
  $allowed_types = array(
    'area' => t('Area'),
    'uib_article' => t('Article'),
    'uib_testimonial' => t('Testimonial'),
    'uib_market' => t('Inner market'),
    'uib_content_list' => t('Content list'),
    'uib_views_page' => t('Views page'),
    'uib_external_content' => t('External content'),
  );
  if (!is_numeric($area)) $area = FALSE;
  if ($area) {
    unset($allowed_types['area']);
    unset($allowed_types['uib_market']);
    unset($allowed_types['uib_views_page']);
  }
  $default_type = $area ? 'uib_article' : 'area';
  $default_arg = $area ? 3 : 2;
  $type = arg($default_arg) !== NULL ? arg($default_arg) : $default_type;
  if (!key_exists($type, $allowed_types)) return;
  if ($type == 'uib_article') {
    $articletype = arg($default_arg+1) !== NULL ? arg($default_arg+1) : 'infopage';
  }
  $six_months_ago = strtotime('-6 months');
  $extra = array(':sixmonthsago' => $six_months_ago);
  $query = 'select nr.nid, nr.title, nr.uid, nr.timestamp, n.status as node_status, n.created, n.language, u.status as status, fn.field_uib_first_name_value as first_name, ln.field_uib_last_name_value as last_name ';
  $query .= 'from node_revision as nr, field_data_field_uib_first_name as fn, field_data_field_uib_last_name as ln, node as n, users as u ';
  $query .= 'where nr.uid > 1 and nr.nid in (';
  if ($type == 'uib_article') {
    $query .= '(select entity_id from field_data_field_uib_article_type where field_uib_article_type_value = :articletype)';
    $extra[':articletype'] = $articletype;
  }
  else {
    $query .= '(select nid from node where type = :type)';
    $extra[':type'] = $type;
  }
  if ($area) {
    $query .= ' intersect (select entity_id from field_data_field_uib_area where field_uib_area_target_id = :area)';
    $extra[':area'] = $area;
  }
  $query .= ') and nr.uid = fn.entity_id and nr.uid = ln.entity_id and n.nid = nr.nid and u.uid = nr.uid ';
  $query .= 'and n.nid in (select nid from node_revision group by nid having max(timestamp) < :sixmonthsago) ';
  $query .= 'order by timestamp desc';
  $result = db_query($query, $extra);
  $nodes = array();
  if ($result) {
    foreach($result as $key => $item) {
      if (!key_exists($item->nid, $nodes)) {
        $page_url = drupal_get_path_alias('node/' . $item->nid, $item->language);
        $node_status = '';
        if (!$item->node_status) $node_status = '<span style="color: #cf3c3a;">(' . t('UNPUBLISHED') . ')</span> ';
        $nodes[$item->nid]['title'] = l($node_status . $item->title, $page_url, array('html' => TRUE));
        if ($item->status) {
          $user_url = drupal_get_path_alias('user/' . $item->uid, 'nb');
          $nodes[$item->nid]['user'] = l($item->first_name . ' ' . $item->last_name, $user_url);
        }
        else {
          $nodes[$item->nid]['user'] = $item->first_name . ' ' . $item->last_name;
        }
        $nodes[$item->nid]['created'] = strftime('%d.%m.%Y', $item->created);
        $nodes[$item->nid]['last_updated'] = strftime('%d.%m.%Y', $item->timestamp);
      }
    }
    $rows = array();
    foreach (array_reverse($nodes) as $node) {
      $rows[]['data'] = array(
        $node['title'],
        $node['user'],
        $node['created'],
        $node['last_updated'],
      );
    }
  }
  $render['header'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'h1',
    '#value' => t('Not updated in six months (since @sixmonthsago)', array('@sixmonthsago' => strftime('%d.%m.%Y', $six_months_ago))),
  );
  $listitems = array();
  foreach($allowed_types as $allowed_type => $title) {
    $listitems[] = uib_webdesk__get_list_item($type, $allowed_type, $title, FALSE, $area);
  }
  $render['menu'] = array(
    '#theme' => 'item_list',
    '#items' => $listitems,
  );
  $render['content'] = array(
    '#theme' => 'table',
    '#caption' => $allowed_types[$type],
    '#header' => array(
      array('data' => t('Title'),),
      array('data' => t('Author'),),
      array('data' => t('Created'),),
      array('data' => t('Last updated'),),
    ),
    '#rows' => $rows,
  );
  return $render;
}

function uib_webdesk__get_list_item($type, $allowed_type, $title, $sub = FALSE, $area = FALSE) {
  if ($area) {
    $urls = array('main' => 'node/' . $area . '/outdated/', 'sub' => 'node/' . $area . '/outdated/uib_article/');
  }
  else {
    $urls = array('main' => 'webdesk/outdated/', 'sub' => 'webdesk/outdated/uib_article/');
  }
  if ($type == $allowed_type) {
    if ($type != 'uib_article') {
      $item = $title;
    }
    else {
      $children = array();
      $subtype = arg(3) !== NULL ? arg(3) : 'infopage';
      foreach (array('infopage', 'news', 'event') as $allowed_subtype) {
        $children[] = uib_webdesk__get_list_item($subtype, $allowed_subtype, ucfirst($allowed_subtype), TRUE, $area);
      }
      $item = array(
        'data' => $title,
        'children' => $children,
      );
    }
  }
  else {
    $url = $sub ? $urls['sub'] : $urls['main'];
    $item = l($title, $url . $allowed_type);
  }
  return $item;
}

function uib_webdesk__connections($user = '') {
  if (!$user) {
    $user = isset($_POST['user']) ? $_POST['user'] : '';
  }
  $render = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('area_connections'),
    ),
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'H2',
      '#value' => t('Check users connections to areas in W3'),
    ),
    'form' => array(
      '#type' => 'form',
      '#attributes' => array(
        'class' => array('area_connections'),
      ),
      '#action' => '/webdesk/userconn',
      '#method' => 'post',
      '#id' => 'uib-user-connections-form',
      'query' => array(
        '#type' => 'textfield',
        '#value' => $user,
        '#attributes' => array(
          'class' => array('query-field'),
          'name' => 'user',
          'autocomplete' => 'off',
          'placeholder' => t('Type username'),
        ),
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('List users connections'),
      ),
    ),
  );
  if ($user) {
    $conns = uib_user_get_user_connections($user);
    $content_manager = array();
    $tpl = array(
      'break' => array('#markup' => '<br/>'),
      '#type' => 'container',
      'title' => array(
        '#type' => 'html_tag',
        '#tag' => 'h3',
      ),
      'list' => array('#markup' => '<ul>'),
    );
    $t = FALSE;
    if (isset($conns['content_manager'])) {
      $t = $tpl;
      $t['title']['#value'] = t('User is content manager for');
      foreach ($conns['content_manager'] as $key => $value) {
        $link = l(check_plain($value->title) . " ({$key})", "node/$key");
        $t['list']['#markup'] .= "<li>$link</li>";
      }
      $t['list']['#markup'] .= '</ul>';
    }
    if ($t) {
      $render['content_manager'] = $t;
    }
    $t = FALSE;
    if (isset($conns['staff'])) {
      $t = $tpl;
      $t['title']['#value'] = t('User is staff on');
      foreach ($conns['staff'] as $key => $value) {
        $link = l(check_plain($value->title) . " ({$key})", "node/$key");
        $t['list']['#markup'] .= "<li>$link</li>";
      }
      $t['list']['#markup'] .= '</ul>';
    }
    if ($t) {
      $render['staff'] = $t;
    }

  }
  return $render;
}

function uib_webdesk_views_query_alter(&$view, &$query) {
  if ($view->name == 'uib_webdesk' && $view->current_display = 'page_1') {
    if (isset($view->exposed_input)) {
      $en = $view->exposed_input;
      $auto = count($en) > 1 ? FALSE : TRUE;
      $conditions = $query->where[1]['conditions'];
      foreach ($conditions as $key => $condition){
        if ($condition['field'] == 'node_field_data_field_uib_area.title' && !$auto) {
          $query->where[1]['conditions'][$key]['operator'] = '=';
          $query->where[1]['conditions'][$key]['value'] = str_replace('%', '', $condition['value']);
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_render
 */
function uib_webdesk_views_pre_render(&$view) {
  /**
   * Excluding identical nodes from result
   */
  if ($view->tag == 'webdesk' && $view->current_display == 'page_1') {
    $previousNID = 0;
    $currentNID = 0;
    $result = $view->result;
    $filteredResult = array();
    foreach ($result as $row) {
      $currentNID = $row->nid;
      if ($currentNID != $previousNID) {
        $filteredResult[] = $row;
        $previousNID = $currentNID;
      }
    }
    $view->result = $filteredResult;
  }
}
