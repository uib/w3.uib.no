<?php
/**
 * @file
 * Code for the UIB Message feature.
 */

include_once 'uib_message.features.inc';

/**
 * Implements hook_menu().
 */
function uib_message_menu() {
  $items["api/msg"] = array(
    'page callback' => 'uib_message__msg',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Return message objects as JSON based on parameters
 *
 * Input parameters could be
 * 1: NodeID
 * 2: Area
 * 3: Username
 * 4: Language
 * 5: Markup
 * 6: Limit
 * 7: Offset
 */
function uib_message__msg() {
  $msgid = null;
  $area = 0;
  $tag = 0;
  $username = "";
  $language = "nb";
  $markup = "JSON";
  $offset = 0;
  $limit = 10;
  $qp = drupal_get_query_parameters();

  $node = null;

  if (!empty($qp)) {
    if (isset($qp['msgid']) && $qp['msgid']) {
      $msgid = $qp['msgid'];
    }
    if (isset($qp['area']) && $qp['area']) {
      $area = $qp['area'];
    }
    if (isset($qp['username']) && $qp['username']) {
      $username = $qp['username'];
    }
    if (isset($qp['language']) && $qp['language']) {
      $language = $qp['language'];
    }
    if (isset($qp['markup']) && $qp['markup']) {
      $markup = $qp['markup'];
    }
    if (isset($qp['limit']) && $qp['limit']) {
      $limit = $qp['limit'];
    }
    if (isset($qp['offset']) && $qp['offset']) {
      $offset = $qp['offset'];
    }
    if (isset($qp['tag']) && $qp['tag']) {
      $tag = $qp['tag'];
    }
  }

  $data = array();
  if (isset($msgid)) {
    $data['msg'][] = uib_message__msg_node_to_array($msgid, $language, $area, $tag);
  } else if (isset($qp['area'])) {
    if (!is_numeric($qp['area'])) {
      $area = db_query('SELECT nid FROM node WHERE type LIKE :type AND LOWER(title) LIKE :title',
        array(':type'=>'area',':title' => strtolower($qp['area'])))->fetchField();
    }
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type','node');
    $query->entityCondition('bundle','uib_message');
    $query->fieldCondition('field_uib_message_area','target_id',$area);
    $query->propertyOrderBy('created', 'DESC');
    $query->range($offset, $limit);
    $result = $query->execute();
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $nid => $node) {
      $row = uib_message__msg_node_to_array($node->nid, $language, $qp['area'], $tag);
      if ($row) {
        $data['msg'][] = $row;
      }
    }
  }
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
  return drupal_json_output($data);
}

function uib_message__msg_node_to_array($nid, $language, $area, $tag) {
  $node = node_load($nid);
  $row = array('id' => (int)$node->nid);
  if ($language == 'en' && empty($node->field_uib_message_text_en['und'][0]['value'])) return;
  if ($language == 'nb' && empty($node->field_uib_message_text_nb['und'][0]['value'])) $language = 'en';

  if ($area) {
    if (is_numeric($area)) {
      $area_node = node_load($node->field_uib_message_area['und'][0]['target_id']);
      $row['area'] = $area_node->title;
    } else {
      $row['area'] = $area;
    }
  }
  if ($language == 'nb') {
    $row['link'] = $node->field_uib_message_link_nb['und'][0]['url'];
    $row['text'] = $node->field_uib_message_text_nb['und'][0]['value'];
  }
  if ($language == 'en') {
    $row['link'] = $node->field_uib_message_link_en['und'][0]['url'];
    $row['text'] = $node->field_uib_message_text_en['und'][0]['value'];
  }
  if ($tag) {
    $term = taxonomy_term_load($node->field_uib_message_tag['und'][0]['target_id']);
    $row['tag'] = $term->name;
  }
  return $row;
}

/**
 * Implements hook_node_access().
 */
function uib_message_node_access($node, $op, $account) {
  if (is_object($node) && $node->type == 'uib_message') {
    if ($op == 'update' || $op == 'delete') {
      if (in_array('level 2', $account->roles) || in_array('level 3', $account->roles)) {
        $area = node_load($node->field_uib_message_area['und'][0]['target_id']);
        if (!uib_area__is_content_manager($area, $account))
          return NODE_ACCESS_DENY;
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_validate().
 */
function uib_message_node_validate($node, $form, &$form_state) {
  if ($form["#form_id"] == "uib_message_node_form") {
    global $user;
    if (!in_array('level 1', $user->roles) && $user->uid != 1) {
      $area_id = $form_state['values']['field_uib_message_area']['und'][0]['target_id'];
      if ($area_id != "") {
        $area_node = node_load($area_id);
        if (!uib_area__is_content_manager($area_node, $user)) {
          $message = t('You must be content manager of ');
          $message .= t('the area'); // split because then we already have the translations from uib_article
          form_set_error('field_uib_message_area', $message . ': ' . $area_node->title);
        }
      }
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * Messages are too dynamic to set up using the regular display settings, so we
 * fill up the content here.
 */
function uib_message_node_view($node, $view_mode, $langcode) {
  if ($node->type != 'uib_message')
    return;

  drupal_add_css('//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css', 'external');
  $tag = taxonomy_term_load($node->field_uib_message_tag['und'][0]['target_id']);
  $icon = 'comment-o';
  if (stripos($tag->name, 'operations') !== false)
    $icon = 'gears';
  $node->content['message_icon'] = array(
    '#markup' => '<div class="message-icon" title="' . $tag->name . '"><i class="fa fa-' . $icon . '"></i></div>',
  );
  $node->content['message_age'] = array(
    '#markup' => '<div class="message-age">' . format_interval(time() - $node->created, 1) . ' ' . t('ago') . '</div>',
  );

  $lang_pref[] = $langcode;
  $lang_pref[] = $langcode == 'nb' ? 'en' : 'nb';

  $message = '';
  $link = null;
  foreach ($lang_pref as $lang) {
    $field = 'field_uib_message_text_' . $lang;
    $field = $node->$field;
    if (!empty($field)) {
      $message = $field['und'][0]['value'];
    }
    if ($message) {
      $field = 'field_uib_message_link_' . $lang;
      $field = $node->$field;
      if (!empty($field)) {
        $link = $field['und'][0]['url'];
      }
      break;
    }
  }
  $message = check_plain($message);

  $current_area = uib_area__get_current();
  if (!$current_area || $node->field_uib_message_area['und'][0]['target_id'] != $current_area->tnid) {
    $message_area = node_load($node->field_uib_message_area['und'][0]['target_id']);
    $message_area = uib_area__get_current_by_language($message_area);
    $message = '<span class="message-area-from">' . l(check_plain($message_area->title), "node/$message_area->nid") . ':</span> ' . $message;
  }
  if ($link) {
    $message .= ' <span class="message-link">' . l(t('Read more') . 'â€¦', $link) . '</span>';
  }
  $node->content['message_text'] = array(
    '#markup' => '<div class="message-text">' . $message . '</div>',
  );

  if (node_access('update', $node)) {
    $node->content['links']['node']['#links']['edit'] = array(
       'title' => t('edit'),
       'href' => 'node/' . $node->nid . '/edit',
    );
  }
  if (node_access('delete', $node)) {
    $node->content['links']['node']['#links']['delete'] = array(
       'title' => t('delete'),
       'href' => 'node/' . $node->nid . '/delete',
    );
  }
}

/**
 * Implements hook_node_presave().
 *
 * Changing nid of target to tnid
 */
function uib_message_node_presave($node) {
  if ($node->type != 'uib_message')
    return;

  $node->title =
    substr($node->field_uib_message_text_nb['und'][0]['value'],0,49) . " / " .
    substr($node->field_uib_message_text_en['und'][0]['value'],0,49);

  $area_nid = $node->field_uib_message_area['und'][0]['target_id'];
  $area_tnid = $area_nid; // default in case no translation is found

  global $language;
  $result = db_query("SELECT nid, tnid FROM {node} WHERE language = :lang AND tnid IN (SELECT tnid FROM {node} WHERE nid = :area)",
    array(':area' => $area_nid, ':lang' => $language->language))->fetchAll();
  if (!empty($result)) {
    $area_nid = $result[0]->nid;
    $area_tnid = $result[0]->tnid;
  }
  $node->field_uib_message_area['und'][0]['target_id'] = $area_tnid;
  $_GET['destination'] = drupal_get_path_alias("node/$area_nid/messages", $language->language); // cause redirection after the save
}

/**
 * Implements hook_form_alter().
 */
function uib_message_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uib_message_node_form') {
    $form['title']['#default_value'] = 'New UIB message';
    $form['title']['#access'] = FALSE;
  }
}

/**
 * Implements hook_block_info().
 */
function uib_message_block_info() {
  $block = array();
  $block['uib_message_block'] = array(
    'info' => t('Message block title'),
    'status' => TRUE,
  );
  return $block;
}

/**
 * Implements hook_block_view().
 */
function uib_message_block_view($delta = '') {
  $block = array();
  switch($delta) {
  case 'uib_message_block' :
    $block['subject'] = 'Messages';
    $block['content'] = uib_message__block_content();
    break;
  }
  return $block;
}

/**
 * Implements custom function to render message block
 */
function uib_message__block_content() {
  drupal_add_js(drupal_get_path('module','uib_message') . '/msg-block.js');
  $node = menu_get_object();
  $output = "<div id='messages-block-content'>".t('Loading...')
    ."</div><noscript>"
    .l(t('Link to alternative'),'node/'
    .$node->nid.'/messages')."</noscript>";
  return $output;
}
