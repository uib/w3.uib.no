<?php

/**
 * Implements hook_block_info()
 */
function uib_calendar3_block_info() {
  return array(
    'calendar3' => array(
      'info' => t('Block for displaying context aware calendar entries'),
      'status' => TRUE,
    ),
    'exhibitions3' => array(
      'info' => t('Displaying exhibition events'),
      'status' => TRUE,
    ),
  );
}


/**
 * Implements hook_block_view().
 */
function uib_calendar3_block_view($delta) {
  global $language;

  $block = array();
  // if area is not set, these blocks are not executed
  $area = uib_area__get_current_nid();
  if (!$area) {
    return;
  }

  $select = db_select('node', 'n');
  $select->fields('n', array('nid', 'title'));

  // only published articles of type events
  $select->condition('n.status', 1);
  $select->condition('n.type', 'uib_article');

  // Join article type
  $select->join('field_data_field_uib_article_type', 'at',
    'at.entity_id = n.nid');
  // Filter on event - type
  $select->condition('at.field_uib_article_type_value', 'event');

  // Join event type
  $select->join('field_data_field_uib_event_type', 'et',
    'et.entity_id = n.nid');
  $select->fields('et', array('field_uib_event_type_value'));

  // include the date fields
  $select->join('field_data_field_uib_date', 'd', 'd.entity_id = n.nid');
  $select->fields('d', array('field_uib_date_value', 'field_uib_date_value2'));


  // only current language
  $select->condition('n.language', $language->language);
  $select_exhibition = clone $select;

  switch ($delta) {
  case 'calendar3':

    // Cloning selected query to include promoted events in union-query
    $promoted = clone $select;
    // Join area
    $select->join('field_data_field_uib_area', 'a', 'a.entity_id = n.nid');
    $select->condition('a.field_uib_area_target_id', intval($area));

    $select->addExpression('1000', 'promoted');
    // specific for event list
    $select->where('date(d.field_uib_date_value) >= date(now())');
    $select->condition('et.field_uib_event_type_value', 'exhibition', '<>');

    $promoted->join('field_data_field_uib_promoted_events', 'pe',
      'pe.field_uib_promoted_events_target_id = n.nid');
    $promoted->condition('pe.entity_id', intval($area));
    $promoted->condition('pe.delta', 0);
    $promoted->addField('pe', 'delta', 'promoted');
    $promoted->orderBy('promoted', 'ASC');
    $promoted->orderBy('field_uib_date_value', 'ASC');
    $promoted->range(0, 6);
    $select->union($promoted);

    // fetch the events
    $result = $select->execute();

    $ra = array();

    $first = TRUE;
    $show = 5;
    $count = 1;
    $show_ids = array();
    foreach ($result as $key => $value):
      $nid = $value->nid;
      if(@$show_ids[$nid] || $count>$show) {
        continue;
      }
      else{
        $count++;
      }
      $show_ids[$nid] = true;

      $time = format_date(strtotime($value->field_uib_date_value . 'Z'),
        'custom', 'H:i' );
      $time2 = format_date(strtotime($value->field_uib_date_value2 . 'Z'),
        'custom', 'H:i' );
      $time_from_to=check_plain($time);
      if(strtotime($value->field_uib_date_value2 . 'Z')
        > strtotime($value->field_uib_date_value . 'Z')){
        $time_from_to .= 'â€“' . check_plain($time2);
      }
      $eventdate = format_date(strtotime($value->field_uib_date_value . 'Z'),
        'custom', 'd.m.Y' );
      $allowed_values = field_info_field('field_uib_event_type');
      $allowed_values = $allowed_values['settings']['allowed_values'];
      $type=$value->field_uib_event_type_value;
      if(isset($allowed_values[$type])){
        $type=t($allowed_values[$type]);
      }

      $title = $value->title;
      $node = node_load($nid);

      if($first):
        $ra['data'][$key]=array();
        $ra['data'][$key]['#type'] = 'container';
        $ra['data'][$key]['#attributes'] = array('class' => array('event'));
        // adding class "first" to this item
        array_push($ra['data'][$key]['#attributes']['class'], 'first');
       // if item has image add this, and a calendar-card
        if (!empty($node->field_uib_main_media)):
          foreach($node->field_uib_main_media['und'] as $key => $image) {
            if ($key > 0) {
              unset($node->field_uib_main_media['und'][$key]);
            }
          }
          // showing kicker
          $ra['data'][$key]['kicker_image'] = array(
              '#type' => 'container',
              '#attributes' => array('class' => array('kicker_image')),
          );
          $ra['data'][$key]['kicker_image']['kicker'] = field_view_field('node', $node,
            'field_uib_kicker', array('label' => 'hidden','weight'=>-400));
          $ra['data'][$key]['kicker_image']['kicker']['#prefix'] = '<a href="' .
            url('node/' . intval($nid)) . '">';
          $ra['data'][$key]['kicker_image']['kicker']['#suffix'] = '</a>';
          $ra['data'][$key]['kicker_image']['image'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('imagecontainer')),
            '#weight' => -200,
            'featuredimage' =>
            field_view_field('node', $node,
            'field_uib_main_media', array(
              'type' => 'file_rendered',
              'settings' => array('file_view_mode' =>
                'wide_thumbnail'),
              'label' => 'hidden',
              'weight' => -30,
              )),
            'date' => array('#markup'=>
              uib_calendar3__get_calendar_card_render_array(
                $value->field_uib_date_value . 'Z'),
              '#prefix' => '<a href="' . url('node/' . intval($nid)) . '">',
              '#suffix' => '</a>',
            ),
          );
        else:
          array_push($ra['data'][$key]['#attributes']['class'], 'noimage');
        endif;


        // Other info: - title
        $ra['data'][$key]['calinfo'] = array();
        $ra['data'][$key]['calinfo']['#prefix'] = '<a href="' .
          url('node/' . intval($nid)) . '">';
        $ra['data'][$key]['calinfo']['#suffix'] = '</a>';
        $ra['data'][$key]['calinfo']['#type'] = 'container';
        $ra['data'][$key]['calinfo']['#attributes'] =
          array('class' => array('calinfo'));
        $ra['data'][$key]['calinfo']['title'] = array(
          '#type' => 'html_tag',
          '#tag' => 'h2',
          '#weight' => -29,
          '#value' => check_plain($node->title),
          );
        // - date, time
        $ra['data'][$key]['calinfo']['place'] = field_view_field('node', $node,
          'field_uib_location', array('label' => 'hidden','weight'=>-28));

        $ra['data'][$key]['calinfo']['time'] = array(
          '#type' => 'container',
          '#weight' => -27,
          '#attributes' => array('class'=>'datetime'),
          'date' => array(
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#weight' => 0,
            '#attributes' => array('class' => array('cal-date')),
            '#value' => check_plain($eventdate),
          ),
          'time' => array(
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#weight' => 1,
            '#attributes' => array('class' => array('cal-time')),
            '#value' => $time_from_to,
          ),
        );
        $ra['data'][$key]['add_cal']['#markup'] =
          l(
            t('Add to calendar'),
            "node/{$node->nid}/event.ics",
            array('attributes' => array('class' => array('add_link')))
          );
      else:
        if(!@$ra['data']['column']){
          $ra['data']['column'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('calendar-list')),
          );
        }
        $ra['data']['column'][$key]=array();
        $ra['data']['column'][$key]['#type'] = 'container';
        $ra['data']['column'][$key]['#attributes'] = array('class' => array('event'));
        $r = array();
        $r['#prefix'] = '<div class="cal-text">';
        $r['#suffix'] = '</div>';
        $r['title'] = array( '#markup' => check_plain($title)
          . " <span class=\"event-type\">($type)</span>");
        $ra['data']['column'][$key]['#prefix'] = '<a href="' .
          url('node/' . intval($nid)) . '">';
        $ra['data']['column'][$key]['#suffix'] = '</a>';
        $ra['data']['column'][$key][] = $r;
        $ra['data']['column'][$key]['time'] = array(
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => array('class' => array('time')),
          '#value' => $time_from_to,
        );
        $ra['data']['column'][$key]['place'] = field_view_field('node', $node,
          'field_uib_location', array('label' => 'hidden','weight'=>-28));
        $ra['data']['column'][$key]['date'] =array('#markup'=>
          uib_calendar3__get_calendar_card_render_array(
            $value->field_uib_date_value . 'Z'));
      endif;

      $first = FALSE;
    endforeach;
    if (empty($ra)) return;
    $block['subject'] = t('Calendar');
    $block['content'] = $ra;
    break;
  case 'exhibitions3':
    $ra = array();
    // Join area
    $select_exhibition->join('field_data_field_uib_area', 'a', 'a.entity_id = n.nid');
    $select_exhibition->condition('a.field_uib_area_target_id', intval($area));

    $select_exhibition->range(0, 5);
    $select_exhibition->orderBy('d.field_uib_date_value', 'ASC');

    // specific for exhibition list
    $select_exhibition->fields('d', array('field_uib_date_value2'));
    $select_exhibition->condition('et.field_uib_event_type_value', 'exhibition');
    $select_exhibition->where('date(d.field_uib_date_value2) >= date(now())');
    // fetch the exhibitions
    $result = $select_exhibition->execute();
    $e = array();
    foreach ($result as $value) {
      $e[] = array(
        '#markup' => '<div><a href="' . url('node/' . $value->nid) . '">' . check_plain($value->title) .
          '<div class="date-range">' .
          format_date(strtotime($value->field_uib_date_value . 'Z'), 'short') .
          'â€“' .
          format_date(strtotime($value->field_uib_date_value2 . 'Z'), 'short') .
          '</div>' .
        '</a></div>'
      );
    }
    if (!empty($e)) {
      $ra['exhibition']['entries'] = $e;
    }

    $block['subject'] = t('Exhibitions');
    $block['content'] = $ra;
    break;
  }
  return $block;
}

/**
 * Implements hook_menu().
 */
function uib_calendar3_menu() {
  $items["calendar"] = array(
    'page callback' => 'uib_calendar3__index_page',
    'access callback' => TRUE,
  );
  $items["node/%/calendar"] = array(
    'page callback' => 'uib_calendar3__index_page',
    'access callback' => TRUE,
    'page arguments' => array(1),
  );
  $items["node/%/eventlist.ics"] = array(
    'page callback' => 'uib_calendar3__index_page',
    'access callback' => TRUE,
    'page arguments' => array(1, 'ics'),
  );
  $items["node/eventlist.ics"] = array(
    'page callback' => 'uib_calendar3__index_page',
    'access callback' => TRUE,
    'page arguments' => array(NULL, 'ics'),
  );
  $items["node/%/event.ics"] = array(
    'page callback' => 'uib_calendar3__get_event',
    'access callback' => TRUE,
    'page arguments' => array(1),
  );
  $items["calrss.xml"] = array(
    'page callback' => 'uib_calendar3__index_page',
    'access callback' => TRUE,
    'page arguments' => array(1, 'rss'),
  );
  $items["node/%/calrss.xml"] = array(
    'page callback' => 'uib_calendar3__index_page',
    'access callback' => TRUE,
    'page arguments' => array(1, 'rss'),
  );
  return $items;
}



/**
 * Generate main page
 */
function uib_calendar3__index_page($area_nid = NULL, $format = FALSE) {
  global $language, $base_url;
  $param = drupal_get_query_parameters();
  if (isset($param['d'])) {
    $from_date = $param['d'];
    while (strlen($from_date) < 10) {
      $from_date .= '-01';
    }
  }
  else {
    $from_date = date('Y-m-d'); // today
  }

  $area = NULL;
  if ($area_nid) {
    $area = node_load($area_nid);
    if (!$area || $area->type != 'area') {
      return MENU_NOT_FOUND;
    }
  }

  // Real event type names
  $event_types = array();
  $field_info = field_info_field('field_uib_event_type');
  $filter_event_types = array();
  $initial_params = array();
  if (isset($field_info['settings']['allowed_values'])) {
    foreach($field_info['settings']['allowed_values'] as $type_key => $type_value) {
      $event_types[$type_key] = t($type_value);
      if (@in_array($type_key, $param['event_types'])) {
        $filter_event_types[] = $type_key;
      }
      if (isset($_GET[$type_key])) {
        $initial_params[] = 'event_types[]=' . $type_key;
      }
    }
  }

  // Initial GET - parameters to be added to the calendar .ics download link
  if (count($initial_params)) {
    $initial_params = '?' . implode('&', $initial_params);
  }
  else {
    $initial_params = '';
  }

  asort($event_types);

  $select = uib_calendar3__get_index_page_query($area_nid, $from_date, $language->language, $filter_event_types);

  if ($format == 'rss') {
    uib_calendar3__rss_output($select, $area);
    return;
  }
  if ($format == 'ics') {
    uib_calendar3__webcal_page($select, $area);
    return;
  }
  // indexed by day
  $events_by_day = array();
  $ongoing_events = array();
  $node = array();
  $event_type_count = array();

  // helper functions
  $date = function ($isodatetime) {
    return substr($isodatetime, 0, 10);
  }; // XXX care about timezone?
  $formatted_date = function ($isodatetime) {
    return format_date(strtotime($isodatetime. 'Z'), 'medium');
  };
  $time = function ($isodatetime) {
    // convert from UTC time to local time
    return format_date(strtotime($isodatetime. 'Z'), 'custom', 'H:i');
  };


  foreach ($select->execute() as $row) {
    $node[$row->nid] = $row;
    $type = $row->field_uib_event_type_value;
    if (isset($event_type_count[$type])) {
      $event_type_count[$type]++;
    }
    else {
      $event_type_count[$type] = 1;
    }
    if ($date($row->field_uib_date_value) == $date($row->field_uib_date_value2)) {
      // single day event
      $events_by_day[$date($row->field_uib_date_value)][] = array(
        'time' => $time($row->field_uib_date_value),
        'end' => $time($row->field_uib_date_value2),
        'nid' => $row->nid,
      );
    }
    else {
      // multiday event
      $start_date = $date($row->field_uib_date_value);
      $end_date = $date($row->field_uib_date_value2);
      if ($start_date < $from_date) {
        if ($end_date != $from_date) {
          $ongoing_events[] = $row->nid;
        }
      }
      else {
        $events_by_day[$date($row->field_uib_date_value)][] = array(
          'suffix' => drupal_ucfirst(t('starts')) . ' - ' . t('Event ends at !date', array('!date' => $formatted_date($row->field_uib_date_value2))),
          'info' => array(),
          'time' => $time($row->field_uib_date_value),
          'nid' => $row->nid,
        );
      }
      $events_by_day[$date($row->field_uib_date_value2)][] = array(
        'suffix' => drupal_ucfirst(t('ends')),
        'time' => $time($row->field_uib_date_value2),
        'nid' => $row->nid,
      );
    }
    if (isset($row->field_uib_deadline_value) && $date(($row->field_uib_deadline_value)) >= $from_date) {
      $events_by_day[$date($row->field_uib_deadline_value)][] = array(
        'suffix' => drupal_ucfirst(t('deadline')) . ' ' . $formatted_date($row->field_uib_deadline_value) . '. ' . t('Time') . ': ' . $time($row->field_uib_deadline_value),
        'info' => array(t('Event starts at !date', array('!date' => $formatted_date($row->field_uib_date_value)))),
        'time' => '',
        'nid' => $row->nid,
      );
    }
  }

  if (empty($events_by_day)) {
    drupal_set_message(t('No events found starting from !date. Try to select an earlier start date.', array('!date' => $formatted_date($from_date))), 'warning');
  }

  if (!isset($events_by_day[$from_date])) {
    $events_by_day[$from_date] = array();
  }

  ksort($events_by_day);

  // generate the render array for the page
  $page = array();

  $day_aka = array(
    date('Y-m-d') => t('today'),
    date('Y-m-d', time() + 24 * 3600) => t('tomorrow'),
    date('Y-m-d', time() - 24 * 3600) => t('yesterday'),
  );

  for ($i = 2; $i < 7; $i++) {
    $t = time() + $i * 24 * 3600;
    $day_aka[date('Y-m-d', $t)] = strtolower(format_date($t, 'custom', 'l'));
  }

  // Calendar header
  $page['calendar_header'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('calendar-header'),
    ),
  );
  $page['calendar_header']['header'] = array(
    '#type' => 'html_tag',
    '#tag' => 'h1',
    '#value' => t('Upcoming events at the university'),
  );

  if ($area) {
    $page['calendar_header']['header']['#value'] = t('Upcoming events for !area', array('!area' => $area->title));
  }

  $type_list_block = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('calendar-types'),
    ),
    'close' => array(
      '#markup' => '<button id="close-filter">' . t('Close') . '</button>',
    ),
  );

  // datepicker
  drupal_add_library('system', 'ui.datepicker');
  $type_list_block['datepicker'] = array(
    '#markup' => '<div id="datepicker"></div>',
  );

  if (count($event_type_count) > 1) {
    $type_list_block['event-types-filter'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('event-types-filter'),
      ),
    );
    $type_list_block['event-types-filter']['lead'] = array(
      '#markup' => '<p>' . t('Filter by event type') . '</p>',
    );
    foreach ($event_types as $type_key => $type_value) {
      if (!empty($event_type_count[$type_key])) {
        $type_list_block['event-types-filter'][$type_key] = array(
          '#markup' => "<div><input id='check-$type_key' type='checkbox' data-type='$type_key'> <label for='check-$type_key' class=option>$type_value ($event_type_count[$type_key])</label></div>",
        );
      }
    }

    $type_list_block['event-types-filter']['show-all'] = array(
      '#markup' => '<button id="show-events">' .  t('Show all events') . '</button>',
    );
  }

  $page['types'] = $type_list_block;

  // Add link to download .ics file
  if ($area_nid) {
    $url = url('node/' . $area_nid . '/eventlist.ics', array('absolute' => TRUE));
  }
  else {
    $url = url('node/eventlist.ics', array('absolute' => TRUE));
  }

  //Use webcal - protocol:
  $url = preg_replace('/https?:\/\//', 'webcal://', $url);
  $page['types']['add_this_calendar'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('ical-link'),
    ),
    'link' => array(
      '#markup' => l(
        t('Subscribe to calendar'),
        $url . $initial_params,
        array('attributes' => array('data-link' => $url))
      ),
    ),
  );

  $page['calendar'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('calendar-content'),
    ),
  );

  $page['calendar']['filter button'] = array(
    '#markup' => '<button id="show-filter">' . t('Filter or change date') . '</button>',
  );

  $this_year = NULL;
  $this_week = NULL;
  $day_limit = 0; // set to 0 for no limit
  foreach ($events_by_day as $day => $events) {
    // insert entry for ongoing events (just after the initial date)
    if ($ongoing_events && $day > $from_date) {
      $ongoing = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('calendar-date ongoing')),
      );
      $ongoing['0000 header'] = array(
        '#type' => 'html_tag',
        '#tag' => 'h3',
        '#value' => t('Still ongoing events') . ' (' . count($ongoing_events) . ')',
      );
      foreach ($ongoing_events as $nid) {
        $event = $node[$nid];
        $type = $event->field_uib_event_type_value;

        $days_left = round((strtotime($date($event->field_uib_date_value2)) - strtotime($from_date)) / (24*60*60));
        if ($days_left == 1) {
          $info = t('One more day');
        }
        elseif ($days_left < 14) {
          $info = t('!days more days', array('!days' => $days_left));
        }
        elseif ($days_left < 7*10) {
          $info = t('!weeks more weeks', array('!weeks' => round($days_left/7)));
        }
        else {
          $info = t('Ends at !date', array('!date' => $formatted_date($event->field_uib_date_value2)));
        }
        $info = "<div class=event-entry-info>$info</div>";

        $ends = $date($event->field_uib_date_value2);
        $ongoing["$ends $nid"] = array(
          '#markup' => "<div class='event-entry event-entry-$type'>" . l($event->title, "node/$nid") . " ($event_types[$type])" . $info . '</div>',
        );
      }
      ksort($ongoing);

      $this_week['ongoing'] = $ongoing;
      $ongoing_events = FALSE; // don't output this section again
    }

    $year = substr($day, 0, 4);
    if (!isset($page['calendar']["year-$year"])) {
      unset($this_year); //break previous reference
      $this_year = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('calendar-year')),
        'header' => array(
          '#type' => 'html_tag',
          '#tag' => 'h2',
          '#value' => $year,
        ),
      );
      $page['calendar']["year-$year"] = &$this_year;
    }

    $week = date('W', strtotime($day));
    if (!isset($this_year["week-$week"])) {
      unset($this_week); // break previous reference
      $this_week = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('calendar-week')),
        'header' => array(
          '#type' => 'html_tag',
          '#tag' => 'h2',
          '#value' => t('Week !week', array('!week' => $week)),
        ),
      );
      $this_year["week-$week"] = &$this_week;
    }

    // generate entry for this day
    $this_day = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('calendar-date')),
    );

    $nice_day = format_date(strtotime($day), 'day_and_month');
    if (isset($day_aka[$day])) {
      $nice_day .= " â€” " . $day_aka[$day];
    }

    $nice_day .= ' (' . count($events) . ')';

    $this_day['header'] = array(
      '#type' => 'html_tag',
      '#tag' => 'h3',
      '#value' => $nice_day,
    );

    usort($events, function($a, $b) {
      if ($a['time'] == $b['time']) {
        return 0;
      }
      return $a['time'] < $b['time'] ? -1 : 1;
    });
    foreach ($events as $event) {
      $nid = $event['nid'];
      $time = $event['time'];
      $type = $node[$nid]->field_uib_event_type_value;
      if (isset($event['end'])) {
        $time .= 'â€“' . $event['end'];
      }
      if (isset($event['info'][0])) {
        $tmp = $event['info'][0];
        $event['info'][0] = '<div class="event-entry-info--time" aria-label="'.t('time').'">' . $tmp . '</div>';
      }

      $suffix = isset($event['suffix']) ? ' ' . $event['suffix'] : '';
      $info = isset($event['info']) ? $event['info'] : array();
      if (!empty($time)) {
        array_unshift($info,   '<div class="event-entry-info--time" aria-label="'.t('Time').'">' . $time . '</div>');
      }
      $location = $node[$nid]->field_uib_location_value;
      if ($location) {
        if (strlen($location) > 75) {
          $location = substr($location, 0, 73) . '...';
        }
        $info[] = '<div class="event-entry-info--place" aria-label="'.t('Location').'">' . $location . '</div>';
      }
      $info[] = '<div class="event-entry-info--ical" aria-label="'.t('Add to calendar').'">' . l(t('Add to calendar'), "node/$nid/event.ics") . '</div>';
      $info = "<div class='event-entry-info'>" . implode('', $info) . "</div>";
      $nodeKmdCheck = node_load($nid);
      $titlehref = "node/$nid";
      if (!empty($nodeKmdCheck->field_uib_kmd_data)){
        $kmdData = json_decode($nodeKmdCheck->field_uib_kmd_data['und'][0]['value']);
        $titlehref = $kmdData->href;
      }
      $markup = "<div class='event-entry event-entry-$type'>" . l($node[$nid]->title, $titlehref) . " ($event_types[$type])";
      if (!empty($suffix)) {
        $markup .= '<br>' . $suffix;
      }
      $markup .= '<br>' . $info . '</div>';
      $this_day[$nid] = array(
        '#markup' => $markup,
      );
    }
    if (empty($events)) {
      $this_day['no events'] = array(
        '#markup' => "<p>" . t("There are no events on this day") . "</p>",
      );
    }

    $this_week[$day] = $this_day;

    if ($day_limit && --$day_limit == 0)
      break;
  }

  drupal_add_js(drupal_get_path('module', 'uib_calendar3') . '/cal3.js');

  return $page;
}

function uib_calendar3__get_calendar_card_render_array($utc_datestring){
  $day = format_date(strtotime($utc_datestring),
    'custom','d' );
  $month = format_date(strtotime($utc_datestring),
    'custom','M' );
  $markup='<svg  class="cal-card" preserveAspectRatio="xMinYMin" viewBox="0 0 71 71" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" >
        <g  transform="translate(-78.000000, -1736.000000)">
            <g  transform="translate(78.000000, 1736.000000)">
                <rect fill="#0DA6A3"  x="0" y="0" width="71" height="71"></rect>
                <rect fill="#00777B"  x="0" y="46" width="71" height="25"></rect>
                <text class="m"
                font-family="Myriad Pro" font-size="12" font-weight="500"
                letter-spacing="2.95540404" fill="#FFFFFF"
                style="text-anchor: middle;">
                    <tspan x="36" y="60">' . $month . '</tspan>
                </text>
                <text class="d"
                font-family="Adobe Garamond Pro" font-size="37"
                font-weight="normal"  fill="#F8F8F8"
                style="text-anchor: middle">
                    <tspan x="36" y="35">' . $day . '</tspan>
                </text>
            </g>
        </g>
    </g>
</svg>
';
return $markup;
}

function uib_calendar3__rss_output($select, $area) {
  global $base_url;
  $select->orderBy('field_uib_date_value');

  $feed = <<<RSS
<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xml:base="{$base_url}" xmlns:dc = "http://purl.org/dc/elements/1.1/" >

RSS;
  $feed_end = "</rss>";
  $channel_title = t('Upcoming events at the university');
  if ($area) {
    $channel_title = t('Upcoming events for !area', array('!area' => $area->title));
  }
  $channel_url = $base_url;

  $items = "";
  foreach ($select->execute() as $row) {
    $type = $row->field_uib_event_type_value;
    $url = url("node/$row->nid", array('absolute' => TRUE));
    $unixtime = strtotime($row->field_uib_date_value. 'Z');
    $unixtime2 = strtotime($row->field_uib_date_value2. 'Z');
    $pubdate = date("D, d M Y H:i:s T", $row->created);

    // Formatted timestamps
    $y = format_date($unixtime, 'custom', 'Y');
    $y = $y == date('Y') ? ' ' : " $y ";
    $t = format_date($unixtime, 'custom', 'k\l H:i');
    $d = format_date($unixtime, 'custom', 'j. M');
    $d = date('Y-m-d', $unixtime) == date('Y-m-d') ? t('today') : $d;
    $d = date('Y-m-d', $unixtime) == date('Y-m-d', time() + 86400 ) ? t('tomorrow') : $d;
    $d = date('Y-m-d', $unixtime) == date('Y-m-d', time() - 86400 ) ? t('yesterday') : $d;

    $y2 = format_date($unixtime2, 'custom', 'Y');
    $y2 = $y2 == date('Y') ? ' ' : " $y2 ";
    $t2 = format_date($unixtime2, 'custom', 'k\l H:i');
    $d2 = format_date($unixtime2, 'custom', 'j. M');
    $d2 = date('Y-m-d', $unixtime2) == date('Y-m-d') ? t('today') : $d2;
    $d2 = date('Y-m-d', $unixtime2) == date('Y-m-d', time() + 86400 ) ? t('tomorrow') : $d2;
    $d2 = date('Y-m-d', $unixtime2) == date('Y-m-d', time() - 86400 ) ? t('yesterday') : $d2;

    // Title including start time
    $title = ucfirst($d) . $y . $t . ' - ' . $row->title;

    // Teaser, adding timespan at end of teaser.
    $teaser = $row->field_uib_lead_value . "\n<br/><br/>";
    $teaser .= t('From') . " {$d}{$y}{$t} " . t('to') . " {$d2}{$y2}{$t2} ";
    $item = format_rss_item($title, $url, $teaser,
      array('pubDate'=>$pubdate));
    $items .= $item;
  }
  $feed .= format_rss_channel($channel_title, $channel_url, "", $items);
  $feed .= $feed_end;

  drupal_add_http_header('Accept','application/rss+xml, application/xhtml+xml'
    . ', text/html');
  drupal_add_http_header('Content-Type', 'application/rss+xml; charset=utf-8');
  echo $feed;
}

function uib_calendar3__webcal_page($select, $area) {
  drupal_add_http_header('Content-Type', 'text/calendar; charset="utf-8"');
  $result = $select->execute();
  $area = entity_metadata_wrapper('node', $area);
  $url = url("node/" . $area->getIdentifier() . "/calendar", array('absolute' => TRUE));
  $name =  t('Calendar for @area', array('@area'=>lcfirst($area->label())));
  $ical = new uib_calendar3__ical(
    "uib.no-w3-{$area->getIdentifier()}",
    $url,
    $name
  );

  foreach ($result as $row) {
    $url = url("node/$row->nid", array('absolute' => TRUE));
    $unixtime = strtotime($row->field_uib_date_value. 'Z');
    $unixtime2 = strtotime($row->field_uib_date_value2. 'Z');
    $ical->add_event(
      $row->nid,
      $row->created,
      $unixtime,
      $unixtime2,
      $row->title,
      $row->field_uib_lead_value,
      $row->field_uib_location_value,
      $url
    );
  }
  echo $ical;
}

function uib_calendar3__get_event($nid) {
  drupal_add_http_header('Content-Type', 'text/calendar; charset="utf-8"');
  $node = entity_metadata_wrapper('node', node_load($nid));
  $url = url("node/$nid", array('absolute'=>TRUE));
  $ical = new uib_calendar3__ical("uib.no-" . $nid, $url, $node->label());
  $dates = $node->field_uib_date->value();
  $start = strtotime($dates['value'] . 'Z');
  $end = strtotime($dates['value2'] . 'Z');
  $ical->add_event(
    $nid,
    $node->created->value(),
    $start,
    $end,
    $node->label(),
    $node->field_uib_lead->value(),
    $node->field_uib_location->value(),
    $url
  );
  echo $ical;
}

class uib_calendar3__ical {
  private $headers = array();
  private $events = array();

  function __construct($unique_ident, $url = 'uib.no', $name = '') {
    $this->headers['BEGIN'] = 'VCALENDAR';
    $this->headers['VERSION'] = '2.0';
    $this->headers['TIMEZONE'] = 'Europe/Oslo';
    $this->headers['PRODID'] = $unique_ident;
    $this->headers['URL'] = $url;
    if ($name) {
      $this->headers['NAME'] = $name;
    }
  }

  function add_event($nid, $created, $start, $end, $title, $desc, $location, $url) {
    $e = array();
    $e["BEGIN"] = "VEVENT";
    $e["UID"] = "w3-{$nid}@uib.no";
    $e["DTSTAMP"] = gmdate('Ymd\THis\Z', $created);
    $e["DTSTART"] = gmdate('Ymd\THis\Z', $start);
    $e["DTEND"] = gmdate('Ymd\THis\Z', $end);
    if (isset($title)) {
      $e["SUMMARY"] = $title;
    }
    if (isset($desc)) {
      $e["DESCRIPTION"] = $desc;
    }
    if (isset($location)) {
      $e["LOCATION"] = $location;
    }
    $e["URL"] = $url;

    $e["CLASS"] = "PUBLIC";
    $e["TRANSP"] = "TRANSPARENT"; // this event dont show owner as busy
    $e["END"] = "VEVENT";
    $this->events[] = $e;
  }

  function __toString() {
    $s = '';
    foreach ($this->headers as $key => $value) {
      $s .= "$key:$value\n";
    }
    foreach ($this->events as $value) {
      foreach ($value as $k => $v) {
        $s .= "$k:$v\n";
      }
    }
    $s .= "END:VCALENDAR\n";
    return $s;
  }
}

/**
* Helper function generating an sql query to get all events for an area
*/
function uib_calendar3__get_index_page_query(
  $area_nid = FALSE,
  $from_date,
  $langcode = FALSE,
  $filter_event_types = array()
) {
  $select = db_select('node', 'n');
  $select->fields('n', array('nid', 'title', 'created'));

  // only published articles of type events
  $select->where('n.status = 1');
  $select->where('n.type = :type', array(':type' => 'uib_article'));
  $select->join('field_data_field_uib_article_type', 'at', 'at.entity_id = n.nid AND at.field_uib_article_type_value = \'event\'');

  if ($langcode) {
    $select->where('n.language = :language', array(':language' => $langcode));
  }

  if ($area_nid) {
    $select->join('field_data_field_uib_area', 'area', 'area.entity_id = n.nid AND area.field_uib_area_target_id = :area',
      array(':area' => $area_nid));
    if (!$langcode) {
      $select->join(
        'node',
        'an',
        'area.field_uib_area_target_id = an.nid and an.language = n.language'
      );
    }
  }
  else {
    $select->join('field_data_field_uib_show_global_calendar', 'show', 'show.entity_id = n.nid AND show.field_uib_show_global_calendar_value = 1');
  }

  // include the event type
  $select->leftJoin('field_data_field_uib_event_type', 'et', 'et.entity_id = n.nid');
  $select->fields('et', array('field_uib_event_type_value'));

  // Filter on event type
  if (count($filter_event_types)) {
    $in = "'" .implode("','", $filter_event_types). "'";
    $select->where("et.field_uib_event_type_value IN ({$in})");
  }

  // include the date fields
  $select->join('field_data_field_uib_date', 'd', 'd.entity_id = n.nid');
  $select->fields('d', array('field_uib_date_value', 'field_uib_date_value2'));

  // include deadlines
  $select->leftJoin('field_data_field_uib_deadline', 'dead', 'dead.entity_id = n.nid');
  $select->fields('dead', array('field_uib_deadline_value'));
  //$select->where('field_uib_deadline_value is not null'); // XXX while debugging

  // include location
  $select->leftJoin('field_data_field_uib_location', 'loc', 'loc.entity_id = n.nid');
  $select->fields('loc', array('field_uib_location_value'));

  // include teaser
  $select->leftJoin('field_data_field_uib_lead', 'lead', 'lead.entity_id = n.nid');
  $select->fields('lead', array('field_uib_lead_value'));

  // filter and order by date
  $select->where('d.field_uib_date_value2 >= :date', array(':date' => $from_date));
  return $select;
}

/**
* Check how many calendar events an area has.
*/
function uib_calendar3__area_count_events(
  $area_nid,
  $from_date = '1970-01-01'
) {
  $select = uib_calendar3__get_index_page_query($area_nid, $from_date);
  return $select->countQuery()->execute()->fetchField();
}
