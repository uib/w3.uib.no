<?php

/**
* Implements hook_block_info()
**/
function uib_calendar3_block_info() {
  return array(
    'calendar3' => array(
      'info' => t('Block for displaying context aware calendar entries'),
      'status' => TRUE,
    ),
    'exhibitions3' => array(
      'info' => t('Displaying exhibition events'),
      'status' => TRUE,
    ),
  );
}


/**
 * Implements hook_block_view().
 */
function uib_calendar3_block_view($delta) {
  global $language;

  $block = array();
  // if area is not set, these blocks are not executed
  $area = uib_area__get_current_nid();
  if (!$area) {
    return;
  }

  $select = db_select('node', 'n');
  $select->fields('n', array('nid', 'title'));

  // only published articles of type events
  $select->condition('n.status', 1);
  $select->condition('n.type', 'uib_article');

  // Join article type
  $select->join('field_data_field_uib_article_type', 'at',
    'at.entity_id = n.nid');
  // Filter on event - type
  $select->condition('at.field_uib_article_type_value', 'event');

  // Join event type
  $select->join('field_data_field_uib_event_type', 'et',
    'et.entity_id = n.nid');
  $select->fields('et', array('field_uib_event_type_value'));

  // include the date fields
  $select->join('field_data_field_uib_date', 'd', 'd.entity_id = n.nid');
  $select->fields('d', array('field_uib_date_value'));
  $select->orderBy('d.field_uib_date_value', 'ASC');

  // Join area
  $select->join('field_data_field_uib_area', 'a', 'a.entity_id = n.nid');
  $select->condition('a.field_uib_area_target_id', intval($area));

  // only current language
  $select->condition('n.language', $language->language);
  $select->range(0, 5);
  $select_exhibition = clone $select;

  switch ($delta) {
  case 'calendar3':

    // specific for event list
    $select->where('date(d.field_uib_date_value) >= date(now())');
    $select->condition('et.field_uib_event_type_value', 'exhibition', '<>');


    // fetch the events
    $result = $select->execute();

    $current = NULL;
    $ra = array();

    foreach ($result as $value) {
      $nid = $value->nid;
      $date = format_date(strtotime($value->field_uib_date_value . 'Z'),
        'custom','d. F' );
      $time = format_date(strtotime($value->field_uib_date_value . 'Z'),
        'custom', 'H:i' );
      $allowed_values = field_info_field('field_uib_event_type');
      $allowed_values = $allowed_values['settings']['allowed_values'];
      $type=$value->field_uib_event_type_value;
      if(isset($allowed_values[$type])){
        $type=t($allowed_values[$type]);
      }

      $title = $value->title;
      if($current != $date){
        $current = $date;
        $ra['data'][$date]=array();
        $ra['data'][$date]['date']['#type'] = 'html_tag';
        $ra['data'][$date]['date']['#tag'] = 'h3';
        $ra['data'][$date]['date']['#value'] = check_plain($date);
      }
      $r = array();
      $r['#prefix'] = '<div><a href="' . url('node/' . intval($nid)) . '">';
      $r['#suffix'] = '</a></div>';
      $r['time'] = array(
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#value' => check_plain($time),
      );
      $r['title'] = array( '#markup' => ' - ' . check_plain($title) . " ($type)");
      $ra['data'][$date][] = $r;
    }
    if(!$current) return;
    $ra['full calendar'] = array(
      '#markup' => l(t('View full calendar'),
        'node/' . intval($area) . '/calendar', array('attributes'=>array('class' => array('more-link')))
      ),
    );
    $block['subject'] = t('Calendar');
    $block['content'] = $ra;
    break;
  case 'exhibitions3':
    $ra = array();
    // specific for exhibition list
    $select_exhibition->fields('d', array('field_uib_date_value2'));
    $select_exhibition->condition('et.field_uib_event_type_value', 'exhibition');
    $select_exhibition->where('date(d.field_uib_date_value2) >= date(now())');
    // fetch the exhibitions
    $result = $select_exhibition->execute();
    $e = array();
    foreach ($result as $value) {
      $e[] = array(
        '#markup' => '<div><a href="' . url('node/' . $value->nid) . '">' . check_plain($value->title) .
          '<div class="date-range">' .
          format_date(strtotime($value->field_uib_date_value . 'Z'), 'short') .
          'â€“' .
          format_date(strtotime($value->field_uib_date_value2 . 'Z'), 'short') .
          '</div>' .
        '</a></div>'
      );
    }
    if (!empty($e)) {
      $ra['exhibition']['entries'] = $e;
    }

    $block['subject'] = t('Exhibitions');
    $block['content'] = $ra;
    break;
  }
  return $block;
}

/**
 * Implements hook_menu().
 */
function uib_calendar3_menu() {
  $items["calendar"] = array(
    'page callback' => 'uib_calendar3__index_page',
    'access callback' => TRUE,
  );
  $items["node/%/calendar"] = array(
    'page callback' => 'uib_calendar3__index_page',
    'access callback' => TRUE,
    'page arguments' => array(1),
  );
  return $items;
}



/**
 * Generate main page
 */
function uib_calendar3__index_page($area_nid=NULL) {
  global $language;
  $param = drupal_get_query_parameters();
  if (isset($param['d'])) {
    $from_date = $param['d'];
    while (strlen($from_date) < 10) {
      $from_date .= '-01';
    }
  }
  else {
    $from_date = date('Y-m-d'); // today
  }

  $area = NULL;
  if ($area_nid) {
    $area = node_load($area_nid);
    if (!$area || $area->type != 'area') {
      return MENU_NOT_FOUND;
    }
  }

  $select = db_select('node', 'n');
  $select->fields('n', array('nid', 'title'));

  // only published articles of type events
  $select->where('n.status = 1');
  $select->where('n.type = :type', array(':type' => 'uib_article'));
  $select->join('field_data_field_uib_article_type', 'at', 'at.entity_id = n.nid AND at.field_uib_article_type_value = \'event\'');

  // only current language
  $select->where('n.language = :language', array(':language' => $language->language));

  if ($area_nid) {
    $select->join('field_data_field_uib_area', 'area', 'area.entity_id = n.nid AND area.field_uib_area_target_id = :area',
      array(':area' => $area_nid));
  }
  else {
    $select->join('field_data_field_uib_show_global_calendar', 'show', 'show.entity_id = n.nid AND show.field_uib_show_global_calendar_value = 1');
  }

  // include the event type
  $select->leftJoin('field_data_field_uib_event_type', 'et', 'et.entity_id = n.nid');
  $select->fields('et', array('field_uib_event_type_value'));

  // include the date fields
  $select->join('field_data_field_uib_date', 'd', 'd.entity_id = n.nid');
  $select->fields('d', array('field_uib_date_value', 'field_uib_date_value2'));

  // include deadlines
  $select->leftJoin('field_data_field_uib_deadline', 'dead', 'dead.entity_id = n.nid');
  $select->fields('dead', array('field_uib_deadline_value'));
  //$select->where('field_uib_deadline_value is not null'); // XXX while debugging

  // include location
  $select->leftJoin('field_data_field_uib_location', 'loc', 'loc.entity_id = n.nid');
  $select->fields('loc', array('field_uib_location_value'));

  // filter and order by date
  $select->where('d.field_uib_date_value2 >= :date', array(':date' => $from_date));
  //$select->orderBy('field_uib_date_value');

  //$select->range(0, 5); // XXX while debugging

  // indexed by day
  $events_by_day = array();
  $ongoing_events = array();
  $node = array();
  $event_type_count = array();

  // helper functions
  $date = function ($isodatetime) {
    return substr($isodatetime, 0, 10);
  }; // XXX care about timezone?
  $formatted_date = function ($isodatetime) {
    return format_date(strtotime($isodatetime. 'Z'), 'medium');
  };
  $time = function ($isodatetime) {
    // convert from UTC time to local time
    return format_date(strtotime($isodatetime. 'Z'), 'custom', 'H:i');
  };

  // Real event type names
  $event_types = array();
  $field_info = field_info_field('field_uib_event_type');
  if (isset($field_info['settings']['allowed_values'])) {
    foreach($field_info['settings']['allowed_values'] as $type_key => $type_value) {
      $event_types[$type_key] = t($type_value);
    }
  }
  asort($event_types);

  foreach ($select->execute() as $row) {
    $node[$row->nid] = $row;
    $type = $row->field_uib_event_type_value;
    if (isset($event_type_count[$type])) {
      $event_type_count[$type]++;
    }
    else {
      $event_type_count[$type] = 1;
    }
    if ($date($row->field_uib_date_value) == $date($row->field_uib_date_value2)) {
      // single day event
      $events_by_day[$date($row->field_uib_date_value)][] = array(
        'time' => $time($row->field_uib_date_value),
        'end' => $time($row->field_uib_date_value2),
        'nid' => $row->nid,
      );
    }
    else {
      // multiday event
      $start_date = $date($row->field_uib_date_value);
      $end_date = $date($row->field_uib_date_value2);
      if ($start_date < $from_date) {
        if ($end_date != $from_date) {
          $ongoing_events[] = $row->nid;
        }
      }
      else {
        $events_by_day[$date($row->field_uib_date_value)][] = array(
          'suffix' => drupal_ucfirst(t('starts')) . ' - ' . t('Event ends at !date', array('!date' => $formatted_date($row->field_uib_date_value2))),
          'info' => array(),
          'time' => $time($row->field_uib_date_value),
          'nid' => $row->nid,
        );
      }
      $events_by_day[$date($row->field_uib_date_value2)][] = array(
        'suffix' => drupal_ucfirst(t('ends')),
        'time' => $time($row->field_uib_date_value2),
        'nid' => $row->nid,
      );
    }
    if (isset($row->field_uib_deadline_value) && $date(($row->field_uib_deadline_value)) >= $from_date) {
      $events_by_day[$date($row->field_uib_deadline_value)][] = array(
        'suffix' => drupal_ucfirst(t('deadline')) . ' ' . $formatted_date($row->field_uib_deadline_value) . '. ' . t('Time') . ': ' . $time($row->field_uib_deadline_value),
        'info' => array(t('Event starts at !date', array('!date' => $formatted_date($row->field_uib_date_value)))),
        'time' => '',
        'nid' => $row->nid,
      );
    }
  }

  if (empty($events_by_day)) {
    drupal_set_message(t('No events found starting from !date. Try to select an earlier start date.', array('!date' => $formatted_date($from_date))), 'warning');
  }

  if (!isset($events_by_day[$from_date])) {
    $events_by_day[$from_date] = array();
  }

  ksort($events_by_day);

  // generate the render array for the page
  $page = array();

  $day_aka = array(
    date('Y-m-d') => t('today'),
    date('Y-m-d', time() + 24 * 3600) => t('tomorrow'),
    date('Y-m-d', time() - 24 * 3600) => t('yesterday'),
  );

  for ($i = 2; $i < 7; $i++) {
    $t = time() + $i * 24 * 3600;
    $day_aka[date('Y-m-d', $t)] = strtolower(format_date($t, 'custom', 'l'));
  }

  // Calendar header
  $page['calendar_header'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('calendar-header'),
    ),
  );
  $page['calendar_header']['header'] = array(
    '#type' => 'html_tag',
    '#tag' => 'h1',
    '#value' => t('Upcoming events at the university'),
  );
  if ($area) {
    $page['calendar_header']['header']['#value'] = t('Upcoming events for !area', array('!area' => $area->title));
  }

  $type_list_block = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('calendar-types'),
    ),
    'close' => array(
      '#markup' => '<button id="close-filter">' . t('Close') . '</button>',
    ),
  );

  // datepicker
  drupal_add_library('system', 'ui.datepicker');
  $type_list_block['datepicker'] = array(
    '#markup' => '<div id="datepicker"></div>',
  );

  if (count($event_type_count) > 1) {
    $type_list_block['event-types-filter'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('event-types-filter'),
      ),
    );
    $type_list_block['event-types-filter']['lead'] = array(
      '#markup' => '<p>' . t('Filter by event type') . '</p>',
    );
    foreach ($event_types as $type_key => $type_value) {
      if (!empty($event_type_count[$type_key])) {
        $type_list_block['event-types-filter'][$type_key] = array(
          '#markup' => "<div><input id='check-$type_key' type='checkbox' data-type='$type_key'> <label for='check-$type_key' class=option>$type_value ($event_type_count[$type_key])</label></div>",
        );
      }
    }

    $type_list_block['event-types-filter']['show-all'] = array(
      '#markup' => '<button id="show-events">' .  t('Show all events') . '</button>',
    );
  }

  $page['types'] = $type_list_block;

  $page['calendar'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('calendar-content'),
    ),
  );

  $page['calendar']['filter button'] = array(
    '#markup' => '<button id="show-filter">' . t('Filter or change date') . '</button>',
  );

  $this_year = NULL;
  $this_week = NULL;
  $day_limit = 0; // set to 0 for no limit
  foreach ($events_by_day as $day => $events) {
    // insert entry for ongoing events (just after the initial date)
    if ($ongoing_events && $day > $from_date) {
      $ongoing = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('calendar-date ongoing')),
      );
      $ongoing['0000 header'] = array(
        '#type' => 'html_tag',
        '#tag' => 'h3',
        '#value' => t('Still ongoing events') . ' (' . count($ongoing_events) . ')',
      );
      foreach ($ongoing_events as $nid) {
        $event = $node[$nid];
        $type = $event->field_uib_event_type_value;

        $days_left = round((strtotime($date($event->field_uib_date_value2)) - strtotime($from_date)) / (24*60*60));
        if ($days_left == 1) {
          $info = t('One more day');
        }
        elseif ($days_left < 14) {
          $info = t('!days more days', array('!days' => $days_left));
        }
        elseif ($days_left < 7*10) {
          $info = t('!weeks more weeks', array('!weeks' => round($days_left/7)));
        }
        else {
          $info = t('Ends at !date', array('!date' => $formatted_date($event->field_uib_date_value2)));
        }
        $info = "<div class=event-entry-info>$info</div>";

        $ends = $date($event->field_uib_date_value2);
        $ongoing["$ends $nid"] = array(
          '#markup' => "<div class='event-entry event-entry-$type'>" . l($event->title, "node/$nid") . " ($event_types[$type])" . $info . '</div>',
        );
      }
      ksort($ongoing);

      $this_week['ongoing'] = $ongoing;
      $ongoing_events = FALSE; // don't output this section again
    }

    $year = substr($day, 0, 4);
    if (!isset($page['calendar']["year-$year"])) {
      unset($this_year); //break previous reference
      $this_year = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('calendar-year')),
        'header' => array(
          '#type' => 'html_tag',
          '#tag' => 'h2',
          '#value' => $year,
        ),
      );
      $page['calendar']["year-$year"] = &$this_year;
    }

    $week = date('W', strtotime($day));
    if (!isset($this_year["week-$week"])) {
      unset($this_week); // break previous reference
      $this_week = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('calendar-week')),
        'header' => array(
          '#type' => 'html_tag',
          '#tag' => 'h2',
          '#value' => t('Week !week', array('!week' => $week)),
        ),
      );
      $this_year["week-$week"] = &$this_week;
    }

    // generate entry for this day
    $this_day = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('calendar-date')),
    );

    $nice_day = format_date(strtotime($day), 'day_and_month');
    if (isset($day_aka[$day])) {
      $nice_day .= " â€” " . $day_aka[$day];
    }

    $nice_day .= ' (' . count($events) . ')';

    $this_day['header'] = array(
      '#type' => 'html_tag',
      '#tag' => 'h3',
      '#value' => $nice_day,
    );

    usort($events, function($a, $b) {
      if ($a['time'] == $b['time']) {
        return 0;
      }
      return $a['time'] < $b['time'] ? -1 : 1;
    });
    foreach ($events as $event) {
      $nid = $event['nid'];
      $time = $event['time'];
      $type = $node[$nid]->field_uib_event_type_value;
      if (isset($event['end'])) {
        $time .= 'â€“' . $event['end'];
      }

      $suffix = isset($event['suffix']) ? ' ' . $event['suffix'] : '';
      $info = isset($event['info']) ? $event['info'] : array();
      if (!empty($time)) {
        array_unshift($info, t('Time') . ': ' . $time);
      }
      $location = $node[$nid]->field_uib_location_value;
      if ($location) {
        if (strlen($location) > 75) {
          $location = substr($location, 0, 73) . '...';
        }
        $info[] = t('Location: !location', array('!location' => $location));
      }
      $info = "<div class='event-entry-info'>" . implode('<br>', $info) . "</div>";
      $markup = "<div class='event-entry event-entry-$type'>" . l($node[$nid]->title, "node/$nid") . " ($event_types[$type])";
      if (!empty($suffix)) {
        $markup .= '<br>' . $suffix;
      }
      $markup .= '<br>' . $info . '</div>';
      $this_day[$nid] = array(
        '#markup' => $markup,
      );
    }
    if (empty($events)) {
      $this_day['no events'] = array(
        '#markup' => "<p>" . t("There are no events on this day") . "</p>",
      );
    }

    $this_week[$day] = $this_day;

    if ($day_limit && --$day_limit == 0)
      break;
  }

  drupal_add_js(drupal_get_path('module', 'uib_calendar3') . '/cal3.js');

  return $page;
}
