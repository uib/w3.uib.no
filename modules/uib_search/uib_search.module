<?php

/**
 * Implements hook_menu().
 */
function uib_search_menu() {
  $items["search"] = array(
    'page callback' => 'uib_search__page',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Returns the search page
 */
function uib_search__page() {
  $q = isset($_GET['qq']) ? $_GET['qq'] : 'uib';
  drupal_add_js("//www.google.com/jsapi", array('type' => 'external'));
  $script = <<<JS
    google.load('search', '1', {language : 'no', style : google.loader.themes.V2_DEFAULT});
    google.setOnLoadCallback(function() {
      var customSearchOptions = {};
      var orderByOptions = {};
      orderByOptions['keys'] = [{label: 'Relevans', key: ''},{label: 'Dato', key: 'date'}];
      customSearchOptions['enableOrderBy'] = true;
      customSearchOptions['orderByOptions'] = orderByOptions;
      customSearchOptions['adoptions'] = {'layout': 'noTop'};
      var customSearchControl = new google.search.CustomSearchControl('000077022656589805190:s7hjxymr2ey', customSearchOptions);
      customSearchControl.setResultSetSize(google.search.Search.FILTERED_CSE_RESULTSET);
      customSearchControl.setLinkTarget (google.search.Search.LINK_TARGET_SELF);
      var options = new google.search.DrawOptions();
      //options.setAutoComplete(true);
      options.enableSearchResultsOnly();
      customSearchControl.draw('cse', options);
      function parseParamsFromUrl() {
        var params = {};
        var parts = window.location.search.substr(1).split('\x26');
        for (var i = 0; i < parts.length; i++) {
          var keyValuePair = parts[i].split('=');
          var key = decodeURIComponent(keyValuePair[0]);
          params[key] = keyValuePair[1] ?
          decodeURIComponent(keyValuePair[1].replace(/\+/g, ' ')) :
          keyValuePair[1];
        }
        return params;
      }
      var urlParams = parseParamsFromUrl();
      customSearchControl.execute(urlParams["qq"] || "uib");
    }, true);
JS;
  drupal_add_js($script, array('type' => 'inline'));

  $q = check_plain($q);
  return <<<"HTML"
<div id=cse>SÃ¸ker etter $q...</div>
<noscript>
  <p>Our search depends on Javascript, please enable Javascript or use Google to search our site</p>
  <form action="http://www.google.com/search" method="get">
    <input size="50" type="hidden" name="q" id="searchField2" value="$q">
    <input style="margin:20px 0px; font-size: 14px;" type="submit" value="Search on Google">
    <input type="hidden" name="sitesearch" value="www.uib.no"/>
  </form>
</noscript>
HTML;
}


/**
 * Implements hook_block_info()
 */
function uib_search_block_info() {
  return array(
    'global-searchform' => array(
      'info' => t('Search form'),
      'status' => TRUE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function uib_search_block_view($delta) {
  global $language;
  $retval=array();
  $retval['subject']=t('Search');
  switch ($delta) {
  case 'global-searchform':
    drupal_add_js(drupal_get_path('module', 'uib_search') . '/js/uib_search.js');
    $action=$GLOBALS['base_path'] . $language->language . "/search";
    $retval['content']=array(
      '#type' => 'container',
      '#weight' => -45,
      '#attributes' => array(
        'class' => array('global-search'),
      ),
      'form' => array(
        '#type' => 'form',
        '#name' => 'noscriptform',
        '#action' => $action,
        '#method' => "get",
        '#attributes' => array(
          'name' => 'noscriptform',
        ),
        'link' => array(
          "#markup" => '<input class="search-button" type="submit" value="'
          . t("Search") . '" />',
        ),
        'noscript' => array(
          '#prefix' => '<noscript>',
          '#suffix' => '</noscript>',
          'qq' => array(
            '#type' => 'textfield',
            '#attributes' => array(
              'class' => array('search-field'),
              'value' => check_plain(@$_GET['qq']),
                  'name' => 'qq',
            ),
          ),
        ),
      ),
      'lightbox-form' => array(
        '#type' => 'form',
        '#name' => 'lbform',
        '#action' => $action,
        '#method' => "get",
        '#attributes' => array(
          'name' => 'lbform',
        ),
        'lightbox' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('lightbox'),
          ),
          'top' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('topbar-wrapper'),
            ),
            'top' => array(
              '#type' => 'container',
              '#attributes' => array(
                'class' => array('topbar'),
              ),
              'typeswitcher' => array(
                '#type' => 'checkbox',
                '#value' => 'user',
                '#title' => t('Search for person'),
                '#default_value' => 'user',
                '#id' => 'switch_type_button',
                '#attributes' => array(
                  'name' => 'searchtype',
                  'data-toggle-title' => t('Back to search'),
                  'data-title' => t('Search for person'),
                ),
              ),
              'right' => array(
                '#type' => 'container',
                '#attributes' => array(
                  'class' => array('top-right'),
                ),
                'close' => array(
                  '#type' => 'container',
                  'link' => array(
                    '#type' => 'link',
                    '#href' => '',
                    '#attributes' => array(
                      'class' => 'closeme',
                    ),
                    '#title' => t('Close'),
                  ),
                  '#attributes' => array(
                    'class' => array('close-lightbox'),
                  ),
                ),
                'menu' => array(
                  '#type' => 'container',
                  'link' => array(
                    '#type' => 'link',
                    '#href' => '#',
                    '#attributes' => array(
                      'class' => 'searchmenu',
                    ),
                    '#title' => t('Menu'),
                  ),
                  '#attributes' => array(
                    'class' => array('menu-lightbox'),
                  ),
                ),
              ),
            ),
          ),
          'search' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('search-wrapper'),
            ),
            'searchtext' => array(
              '#type' => 'textfield',
              '#value' => check_plain(@$_GET['qq']),
              '#attributes' => array(
                'class' => array('search-field'),
                'name' => 'qq',
                'autocomplete' => 'off',
                'placeholder' => t('Search uib.no'),
                'data-placeholder' => t('Search for person'),
              ),
            ),
            'submit' => array(
              '#type' => 'submit',
              '#value' => t('Search'),
            ),
            'user' => array(
              '#type' => 'hidden',
              '#value' => variable_get(uib_search__parameter_prefix() . 'user'),
              '#attributes' => array(
                'name' => 'user',
              ),
            ),
            'password' => array(
              '#type' => 'hidden',
              '#value' =>
                variable_get(uib_search__parameter_prefix() . 'password'),
              '#attributes' => array(
                'name' => 'password',
              ),
            ),
            'url' => array(
              '#type' => 'hidden',
              '#value' => variable_get(uib_search__parameter_prefix() . 'url'),
              '#attributes' => array(
                'name' => 'url',
              ),
            ),
            'index' => array(
              '#type' => 'hidden',
              '#value' =>
                variable_get(uib_search__parameter_prefix() . 'index'),
              '#attributes' => array(
                'name' => 'index',
              ),
            ),
          ),
          'results' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => 'results',
            ),
          ),
        ),
      ),
    );
    break;
  }
  return $retval;
}

/**
 * Implements hook_user_update().
 *
 * hook_user_update is executed after user info is inserted in the database.
 *
 */
function uib_search_user_update(&$edit, $account, $category) {
  uib_search__index_user($account);
}
/**
 * Implements hook_user_insert().
 *
 * hook_user_insert is executed after user is created
 */
function uib_search_user_insert(&$edit, $account, $category) {
  uib_search__index_user($account);
}
/*
 * Implements hook_user_delete().
 *
 * hook_user_delete executed before user is deleted
 */
function uib_search_user_delete($account) {
  $account->status = 0;  // treat it as if was blocked
  uib_search__index_user($account);
}

/**
 * Index a user in the database. This implementation updates the search index
 * in elasticsearch.
 */

function uib_search__index_user(&$account) {
  if (!uib_search__check_elastic_settings(true)) {
    uibx_log('Administrator settings for elasticsearch is not setup', 'notice');
    return;
  }
  $prefix = uib_search__parameter_prefix(1);
  $index = variable_get($prefix . 'index');
  $url = rtrim(variable_get($prefix . 'url'), '/');
  $type = 'user';
  if ($account->status == 0) {
    // Delete doc from users in search index, and return
    $stat = uib_search__run_elastic_request(
      "{$url}/{$index}/{$type}/{$account->uid}",
      null,
      'DELETE',
      true
    );
    if ($stat->code == 404) {
      uibx_log(
        'User uid #' . $account->uid . ' was not found in the elastic index',
        'notice'
      );
    }
    else if ($stat->code != 200) {
      uibx_log(
        'User uid #' . $account->uid . ' could not be deleted from elastic'
          . ' index. Status code ' . $stat->code ,
        'error'
      );
    }
    else {
      uibx_log(
        'User uid #' . $account->uid . ' was deleted from elastic index.',
        'notice'
      );
    }

    return;
  }

  $url = "{$url}/{$index}/{$type}/$account->uid";
  $output = uib_search__get_elastic_user_array($account);
  $status = uib_search__run_elastic_request(
    $url,
    json_encode($output),
    'PUT',
    true
  );

  if (in_array($status->code, array(200))) {
    uibx_log('Successful update of elastic user '.$output['uid'], 'notice');
  }
  else if (in_array($status->code, array(201))) {
    uibx_log('Successful creation of elastic user '.$output['uid'], 'notice');
  }
  else {
    uibx_log(
      "Updating elastic user {$output['uid']} failed: {$status->code} - "
        . "{$status->status_message}",
      'error'
    );
  }
}

/**
 * Helper function to retrieve raw value / commaseparated string of values
 * from a drupal array. The array typically has the form
 * [
 *   0 => [
 *          'value' => 'whatevervalue',
 *        ],
 *   1 => [
 *          'value' => 'someothervalue',
 *        ],
 *   ...
 * ]
 *
 * Parameters
 * $array - The array to process
 * $field - optional parameter where the actual value is contained in another
 * index than 'value'
 * $asString - optional parameter. If set to false, values are returned as a
 * flat array instead of an imploded string
 * $delimiter - optional parameter used as glue for imploding the results.
 */
function uib_search__field_array_as_string(
  $array,
  $field = 'value',
  $asString = TRUE,
  $delimiter = ', '
)
{
  if (!$array) return null;
  $retval = array();
  foreach ($array as $key => $value) {
    $retval[] = $value[$field];
  }
  if ($asString) return implode($delimiter, $retval);
  return $retval;
}

/**
 * Execute a drupal http request against the currently set elastic search
 * engine, providing authentication. Returns the same object returned by
 * drupal_http_request().
 */
function uib_search__run_elastic_request(
  $url = '',
  $data,
  $method = 'POST',
  $run_as_administrator = false,
  $timeout = 1
)
{
  $prefix = uib_search__parameter_prefix($run_as_administrator);
  $user = variable_get($prefix . 'user');
  $password = variable_get($prefix . 'password');
  $token = "{$user}:{$password}";
  $token = base64_encode($token);

  return drupal_http_request($url,
    array(
      'headers' => array(
        'Authorization' => "Basic {$token}"
      ),
      'method' => $method,
      'data' => $data,
      'timeout' => $timeout,
    )
  );
}

/**
 * Get the parameter prefix used for elasticsearch parameters
 *
 * @param boolean Set to true to get the admin prefix
 */
function uib_search__parameter_prefix($admin = false) {
  $admin = $admin ? 'admin_' : '';
  return 'uib_elasticsearch_' . $admin;
}

/**
 * Get object to store in the elastic index for the given user
 */
function uib_search__get_elastic_user_array($account) {
  $mVal = 'uib_search__field_array_as_string';

  //General fields
  $output = @array(
    'name' => $account->name,
    'mail' => $account->mail,
    'uid' => $account->uid,
    'first_name' => $account->field_uib_first_name['und'][0]['value'] ?:
      $account->field_uib_user_alt_firstname['und'][0]['value'],
    'last_name' => $account->field_uib_last_name['und'][0]['value'] ?:
      $account->field_uib_user_alt_lastname['und'][0]['value'],
    'phone' => $mVal($account->field_uib_phone['und']),
    'social_media' => $mVal($account->field_uib_user_social_media['und']),
    'slug' => $mVal(field_get_items('user', $account, 'field_uib_slug')),
  );
  // User picture TODO takes too long in stage_file_proxy setups
  if (0 && @$account->picture->uri) {
    $output['picture'] = image_style_url(
      'user_thumbnail',
      $account->picture->uri
    );
  }

  $output['generic'] = array();
  /*
   * Language dependent fields
   */
  $languages = language_list();
  foreach ($languages as $language) {
    $lang = "_{$language->language}";
    // Resolving area from OU
    $ou = @$account->field_uib_user_ou['und'][0]['target_id'];
    $area = uib_user__ou_area($ou, $output['uid'], $language->language);
    if ($area) {
      $area = node_load($area);
      $output['ou' . $lang] = $area->title;
    }
    else {
      $area = node_load($ou);
      if ($area) {
        $output['ou' . $lang] = $mVal(
          field_get_items(
            'node',
            $area,
            'field_uib_ou_title',
            $language->language
          )
        );
      }
    }

    //position
    $output['position' . $lang] = $mVal(
      field_get_items(
        'user',
        $account,
        'field_uib_position',
        $language->language
      )
    );

    // Resolving competence from taxonomi
    $competence = $mVal(
      field_get_items(
        'user',
        $account,
        'field_uib_user_competence',
        $language->language
      ),
      'tid',
      FALSE
    );
    if (is_array($competence)) {
      foreach ($competence as &$v) {
        $v = taxonomy_term_load($v)->name;
      }
    }
    $output['competence' . $lang] = implode((array)$competence, ', ');
    $url = preg_replace('/https?:\/\/w3\.uib\.no\/?/', 'http://www.uib.no/', url('user/' . $output['uid'],
      array(
        'absolute' => TRUE,
        'language' => $language,
      )
    ));
    $output['link' . $lang] = $url;

    // Some generic fields
    $output['generic']['title' . $lang] = $output['first_name'] . ' ' . $output['last_name'];
    $output['generic']['link' . $lang] = $output['link' . $lang];
    $output['generic']['excerpt' . $lang] = array();
    if (@$output['ou' . $lang]) {
      $output['generic']['excerpt' . $lang][] =
        t('Organisation') . ': ' . $output['ou' . $lang];
    }
    if (@$output['position' . $lang]) {
      $output['generic']['excerpt' . $lang][] =
        t('Position') . ': ' . $output['position' . $lang];
    }
    if (@$output['phone']) {
      $output['generic']['excerpt' . $lang][] =
        t('Phone nr') . ': ' . $output['phone'];
    }
    if (@$output['mail']) {
      $output['generic']['excerpt' . $lang][] =
        t('Email') . ': ' . $output['mail'];
    }
    $output['generic']['excerpt' . $lang] =
      implode(', ', $output['generic']['excerpt' . $lang]);
  }

  $output['generic']['image'] = @$output['picture'] ;
  return $output;
}

/**
 * Check if elasticsearch settings are setup
 *
 * @param boolean $admin Set to true to check if admin settings are set.
 * @return boolean Returns true if everything is set up, otherwise false.
 *
 */
function uib_search__check_elastic_settings($admin = false) {
  $px = uib_search__parameter_prefix($admin);
  if (
    variable_get($px . 'url') &&
    variable_get($px . 'index') &&
    variable_get($px . 'user') &&
    variable_get($px . 'password')
  ) {
    return true;
  }
  return false;
}
