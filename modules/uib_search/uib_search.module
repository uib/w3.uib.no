<?php

// Administration features is included in a separate file
require_once __DIR__ . '/php/admin.php';

/**
 * Implements hook_menu().
 */
function uib_search_menu() {
  $items["search"] = array(
    'page callback' => 'uib_search__page',
    'access callback' => TRUE,
  );
  $items["compare_search"] = array(
    'page callback' => 'uib_search__compare_all_pages',
    'access callback' => TRUE,
  );
  $items["searchboost/up/%/%"] = array(
    'page callback' => 'uib_search__boost_item_search',
    'page arguments' => array(1,2,3),
    'access callback' => TRUE,
  );
  $items["searchboost/down/%/%"] = array(
    'page callback' => 'uib_search__boost_item_search',
    'page arguments' => array(1,2,3),
    'access callback' => TRUE,
  );
  $items["admin/config/uib_search/boosting"] = array(
    'title' => t('Search boosting Administration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uib_search__boosting_admin_form'),
    'access callback' => 'uib_search__admin_access',
  );
  return $items;
}
function uib_search__admin_access() {
  global $user;
  return $user->uid == 1
    || user_has_role(176168899)
    || in_array('superbruker', $user->roles);
}
/**
 * Returns the search page.
 */
function uib_search__page() {
  $q = isset($_GET['qq']) ? $_GET['qq'] : 'uib';
  drupal_add_js("//www.google.com/jsapi", array('type' => 'external'));
  $script = <<<JS
    google.load('search', '1', {language : 'no', style : google.loader.themes.V2_DEFAULT});
    google.setOnLoadCallback(function() {
      var customSearchOptions = {};
      var orderByOptions = {};
      orderByOptions['keys'] = [{label: 'Relevans', key: ''},{label: 'Dato', key: 'date'}];
      customSearchOptions['enableOrderBy'] = true;
      customSearchOptions['orderByOptions'] = orderByOptions;
      customSearchOptions['adoptions'] = {'layout': 'noTop'};
      var customSearchControl = new google.search.CustomSearchControl('000077022656589805190:s7hjxymr2ey', customSearchOptions);
      customSearchControl.setResultSetSize(google.search.Search.FILTERED_CSE_RESULTSET);
      customSearchControl.setLinkTarget (google.search.Search.LINK_TARGET_SELF);
      var options = new google.search.DrawOptions();
      //options.setAutoComplete(true);
      options.enableSearchResultsOnly();
      customSearchControl.draw('cse', options);
      function parseParamsFromUrl() {
        var params = {};
        var parts = window.location.search.substr(1).split('\x26');
        for (var i = 0; i < parts.length; i++) {
          var keyValuePair = parts[i].split('=');
          var key = decodeURIComponent(keyValuePair[0]);
          params[key] = keyValuePair[1] ?
          decodeURIComponent(keyValuePair[1].replace(/\+/g, ' ')) :
          keyValuePair[1];
        }
        return params;
      }
      var urlParams = parseParamsFromUrl();
      customSearchControl.execute(urlParams["qq"] || "uib");
    }, true);
JS;
  drupal_add_js($script, array('type' => 'inline'));

  $q = check_plain($q);
  return <<<"HTML"
<div id=cse>SÃ¸ker etter $q...</div>
<noscript>
  <p>Our search depends on Javascript, please enable Javascript or use Google to search our site</p>
  <form action="http://www.google.com/search" method="get">
    <input size="50" type="hidden" name="q" id="searchField2" value="$q">
    <input style="margin:20px 0px; font-size: 14px;" type="submit" value="Search on Google">
    <input type="hidden" name="sitesearch" value="www.uib.no"/>
  </form>
</noscript>
HTML;
}

/**
 * Implements hook_block_info().
 */
function uib_search_block_info() {
  return array(
    'global-searchform' => array(
      'info' => t('Search form'),
      'status' => TRUE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function uib_search_block_view($delta) {
  $retval=array();
  switch ($delta) {
  case 'global-searchform':
    $retval['subject']=t('Search');

    // Setup for elasticsearch
    drupal_add_js(
      array('uib_search' =>
        array(
          'url' => variable_get('uib_elasticsearch_url'),
          'index' => uib_search__get_index(),
        )
      ),
      'setting'
    );

    drupal_add_js(drupal_get_path('module', 'uib_search') . '/js/uib_search.js');
    drupal_add_js(
      array('uib_search' => array(
        'uib_search_boost_max' => 10,
        'uib_search_boost_min' => pow(.5,10),
        )
      ),
      'setting'
    );
    $retval['content']['noscript'] = drupal_get_form('uib_search__noscript_form');
    $retval['content']['normal'] = drupal_get_form('uib_search__form');

    break;
  }
  return $retval;
}

/**
 * Get the search form
 * @return The form render-array
 */
function uib_search__form(){
  global $language, $user;
  $action=$GLOBALS['base_path'] . $language->language . "/search";
  $form= array(
    '#weight' => -45,
    '#action' => $action,
    '#method' => 'get',
    '#id' => 'uib-search-form',
    '#type' => 'form',
    '#attributes' => array(
      'class' => array('global-search'),
    ),
    'lightbox' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('lightbox'),
      ),
      'top' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('topbar-wrapper'),
        ),
        'top' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('topbar'),
          ),
          'spacer' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('spacer'),
            ),
          ),
          'right' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('top-right'),
            ),
            'close' => array(
              '#type' => 'container',
              'link' => array(
                '#type' => 'link',
                '#href' => '',
                '#attributes' => array(
                  'class' => array('closeme'),
                ),
                '#title' => t('Close'),
              ),
              '#attributes' => array(
                'class' => array('close-lightbox'),
              ),
            ),
          ),
        ),
      ),
      'search' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('search-wrapper'),
        ),
        'searchfield' => array(
          '#type' => 'html_tag',
          '#tag' => 'label',
          '#value' => t('Search field'),
          '#attributes' => array(
            'for' => 'searchfield',
            'class' => array('element-invisible'),
          ),
        ),
        'searchtext' => array(
          '#type' => 'textfield',
          '#value' => check_plain(@$_GET['qq']) ? check_plain(@$_GET['qq']) : ' ',
          '#attributes' => array(
            'class' => array('search-field'),
            'name' => 'qq',
            'autocomplete' => 'off',
            'placeholder' => t('Search uib.no'),
            'data-placeholder' => t('Search for person'),
            'id' => 'searchfield',
          ),
        ),
        'submit' => array(
          '#type' => 'submit',
          '#value' => t('Search'),
        ),
      ),
      'results-wrapper' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('results-wrapper'),
        ),
        'results' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('results'),
          ),
          'results-bottom-anchor' => array(
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#value' => '',
            '#attributes' => array(
              'class' => array('results-bottom-anchor'),
            ),
          ),
        ),
        'right' => array(
          '#type' => 'fieldset',
          '#title' => t('Filter on content'),
          '#attributes' => array(
            'class' => array('right-selector'),
          ),
          'filters' => array(
            '#type' => 'checkboxes',
            '#id' => 'search-filter-checkboxes',
            '#description' => t('Choose what results to return'),
            '#options' => array(
              'everything' => t('Everything'),
              'news' => t('News'),
              'study' => t('Study information'),
              'event' => t('Events'),
              'user' => t('Persons'),
            ),
            '#default_value' => array(
              'everything'
            ),
            '#attributes' => array(
              'name' => 'uib_search_filters[]',
            ),
          ),
        ),
      ),
    ),
  );
  if (
      in_array('superbruker', $user->roles)
      || in_array('admin', $user->roles)
      || $user->uid == 1
  ) {
    $form['lightbox']['search']['boost'] = array(
      '#type' => 'hidden',
      '#value' => 1,
      '#attributes' => array(
        'name' => 'boost',
      ),
    );
  }

  return $form;
}

function uib_search__noscript_form(){
  global $language;
  $action = 'https://www.google.com/search';
  $form=array(
    '#type' => 'form',
    '#name' => 'noscriptform',
    '#action' => $action,
    '#method' => 'get',
    '#id' => 'uib-search-noscript-form',
    '#attributes' => array(
      'name' => 'noscriptform',
    ),
    'link' => array(
      "#markup" => '<input class="search-button" type="submit" value="'
      . t("Search") . '" />',
    ),
    'noscript' => array(
      'site' => array(
        '#type' => 'hidden',
        '#attributes' => array(
          'name' => 'as_sitesearch',
          'value' => 'uib.no',
        ),
      ),
    ),
  );
  return $form;
}


/**
 * Implements hook_user_update().
 *
 * hook_user_update is executed after user info is inserted in the database.
 *
 */
function uib_search_user_update(&$edit, $account, $category) {
  uib_search__index_entity(entity_metadata_wrapper('user', $account));
}

/**
 * Implements hook_user_insert().
 *
 * hook_user_insert is executed after user is created
 */
function uib_search_user_insert(&$edit, $account, $category) {
  uib_search__index_entity(entity_metadata_wrapper('user', $account));
}

/**
 * Implements hook_user_delete().
 *
 * hook_user_delete executed before user is deleted
 */
function uib_search_user_delete($account) {
  uib_search__index_entity(entity_metadata_wrapper('user', $account), TRUE);
}

/**
 * Implements hook_node_update().
 *
 */
function uib_search_node_update($node) {
  uib_search__index_entity(entity_metadata_wrapper('node', $node));
}

/**
 * Implements hook_node_insert().
 *
 */
function uib_search_node_insert($node) {
  uib_search__index_entity(entity_metadata_wrapper('node', $node));
}

/**
 * Implements hook_node_delete().
 *
 */
function uib_search_node_delete($node) {
  uib_search__index_entity(entity_metadata_wrapper('node', $node), TRUE);
}

/**
 * Execute a drupal http request against the currently set elastic search
 * engine, providing authentication. Returns the same object returned by
 * drupal_http_request().
 */
function uib_search__run_elastic_request(
  $url = '',
  $data,
  $method = 'POST',
  $run_as_administrator = FALSE,
  $timeout = 5,
  $preference = FALSE
)
{
  if ($preference !== FALSE) {
    $sep = strstr($url, '?') === FALSE ? '?' : '&';
    $url .= "{$sep}preference=" . md5(session_id());
  }
  $a = $run_as_administrator ? '_admin' : '';

  $options = array(
    'headers' => array(
      'x-api-id' => variable_get('uib_elasticsearch_api-id'),
      'x-api-key' => variable_get('uib_elasticsearch_key' . $a),
      'Content-type' => 'application/json',
      'Accept' => 'application/json',
    ),
    'method' => $method,
    'data' => $data,
    'timeout' => $timeout,
  );
  $result = drupal_http_request($url, $options);

  return $result;
}

function uib_search__get_index($admin = FALSE) {
  $method = $admin ? 'put' : 'get';
  $index_num = variable_get('uib_elasticsearch_index_' . $method, 1);
  return variable_get('uib_elasticsearch_index_' . $index_num);
}

/**
 * Get object to store in the elastic index for the given user
 */
function uib_search__get_elastic_user_array($wrapped_entity) {

  //General fields
  $output = @array(
    'name' => $wrapped_entity->name->value(),
    'mail' => $wrapped_entity->mail->value(),
    'uid' => $wrapped_entity->uid->value(),
    'first_name' => $wrapped_entity->field_uib_first_name->value() ?:
      $wrapped_entity->field_uib_user_alt_firstname->value(),
    'last_name' => $wrapped_entity->field_uib_last_name->value() ?:
      $wrapped_entity->field_uib_user_alt_lastname->value(),
    'phone' => implode(', ', $wrapped_entity->field_uib_phone->value()),
    'social_media' => implode(', ', $wrapped_entity->field_uib_user_social_media->value()),
    'slug' => $wrapped_entity->field_uib_slug->value(),
  );
  // User picture TODO takes too long in stage_file_proxy setups
  if (0 && @$wrapped_entity->picture->uri) {
    $output['picture'] = image_style_url(
      'user_thumbnail',
      $wrapped_entity->picture->uri
    );
  }

  $output['generic'] = array();
  /*
   * Language dependent fields
   */
  $languages = language_list();
  foreach ($languages as $language) {
    $lang = "_{$language->language}";
    $wrapped_entity->language($language->language);
    // Resolving area from OU
    $ou = $wrapped_entity->field_uib_user_ou->getIdentifier();
    $area = uib_user__ou_area($ou, $output['uid'], $language->language);
    if ($area) {
      $area = entity_metadata_wrapper(
        'node',
        $area,
        array('langcode', $language->language)
      );
      $output['ou' . $lang] = $area->title->value();
    }
    else if ($ou) {
      $area = entity_metadata_wrapper(
        'node',
        $ou,
        array('langcode', $language->language)
      );
      if ($area) {
        $output['ou' . $lang] = uib_search__null_if_empty(implode(
          ', ',
          (array)$area->field_uib_ou_title->value()
        ));
      }
    }
    //position
    $output['position' . $lang] =
      uib_search__null_if_empty($wrapped_entity->field_uib_position->value());
    //alt position
    $output['alt_position' . $lang] = uib_search__null_if_empty(implode(
      ', ',
      (array)$wrapped_entity->field_uib_user_alt_position->value()
    ));
    //search manual boost
    $output['search_manual_boost'] = uib_search__null_if_empty(
      $wrapped_entity->field_uib_search_manual_boost->value()
    );
    if (!$output['search_manual_boost']) {
      $output['search_manual_boost'] = 1;
    }

    $competence = $wrapped_entity->field_uib_user_competence->value();
    if (is_array($competence)) {
      foreach ($competence as &$v) {
        $v = $v->name;
      }
    }
    $output['competence' . $lang] = implode((array)$competence, ', ');

    $url = preg_replace(
      '/http(s?):\/\/w3\.uib\.no\/?/',
      'http\1://www.uib.no/',
      url('user/' . $output['uid'],
      array(
        'absolute' => TRUE,
        'language' => $language,
      )
    ));
    $output['link' . $lang] = $url;

    // Some generic fields
    $output['generic']['title' . $lang] = $output['first_name']
      . ' ' . $output['last_name'];
    $output['generic']['link' . $lang] = $output['link' . $lang];
    $output['generic']['excerpt' . $lang] = array();
    if (@$output['ou' . $lang]) {
      $output['generic']['excerpt' . $lang][] =
        t('Organisation') . ': ' . $output['ou' . $lang];
    }
    if (@$output['position' . $lang]) {
      $output['generic']['excerpt' . $lang][] =
        t('Position') . ': ' . $output['position' . $lang];
    }
    if (@$output['phone']) {
      $output['generic']['excerpt' . $lang][] =
        t('Phone nr') . ': ' . $output['phone'];
    }
    if (@$output['mail']) {
      $output['generic']['excerpt' . $lang][] =
        t('Email') . ': ' . $output['mail'];
    }
    $output['generic']['excerpt' . $lang] =
      implode(', ', $output['generic']['excerpt' . $lang]);

    if ($lang == '_nb') {
      $output['generic']['title'] = $output['generic']['title_nb'];
      $output['generic']['link'] = $output['generic']['link_nb'];
      $output['generic']['excerpt'] = $output['generic']['excerpt_nb'];
    }
  }

  $output['generic']['image'] = @$output['picture'] ;
  return $output;
}

/**
 * Check if elasticsearch settings are setup
 *
 * @param boolean $admin Set to true to check if admin settings are set.
 * @return boolean Returns true if everything is set up, otherwise false.
 *
 */
function uib_search__check_elastic_settings($admin = false) {
  if (variable_get('uib_elasticsearch_key_admin', FALSE)) {
    return true;
  }
  return false;
}

/**
 * Index a content item in the database. This implementation updates the search
 * index in elasticsearch. Node of a type listed in the drupal variable
 * uib_search_nodetype_noindex will not be indexed.
 *
 * @param $wrapped_entity entity object
 * @param $delete Set to TRUE to delete the entity in question. Defaults to
 * FALSE
 */
function uib_search__index_entity($wrapped_entity, $delete = FALSE) {
  $ignore = variable_get('uib_search_nodetype_noindex', array());
  if (in_array(trim($wrapped_entity->getBundle()), $ignore)) {
    uibx_log(
      'Entity ignored (rules fetched from variable uib_search_nodetype_noindex)',
      'notice'
    );
    return;
  }

  $id = $wrapped_entity->getIdentifier();
  $entity_type = $wrapped_entity->info();
  $entity_type = $entity_type['type'];
  if($entity_type == 'node' && $wrapped_entity->getBundle() == 'uib_article') {
    $sql = "select 1
    from field_data_field_uib_step_content
    where field_uib_step_content_target_id=:nid";
    $res = db_query($sql, array(':nid' => $id));
    if($res->fetchField() == 1) {
      return; // this entity is part of a content list
    }
  }
  $index = uib_search__get_index(TRUE);
  $url = variable_get('uib_elasticsearch_url');
  if ($wrapped_entity->status->value() == 0) {
    $delete = TRUE;
  }
  if ( isset($wrapped_entity->field_uib_search_manual_boost)
    && intval($wrapped_entity->field_uib_search_manual_boost->value()) == 0
    && isset($wrapped_entity->type)
    && $wrapped_entity->type->value() == 'uib_external_content') {
    $delete = TRUE;
  }
  if ($wrapped_entity->getBundle() == 'uib_study') {
    $type = 'study';
  }
  else {
    $type = $entity_type;
  }
  if ($delete) {
    // Delete doc from users in search index, and return
    $stat = uib_search__run_elastic_request(
      "{$url}/{$index}/{$type}/{$id}",
      NULL,
      'DELETE',
      TRUE
    );
    uib_search__report_status($stat, $entity_type, $id, 'delete');
    return;
  }

  $url = "{$url}/{$index}/{$type}/$id";
  $output = uib_search__get_elastic_entity_array($wrapped_entity);

  // Load fs-data for study nodes
  if ($type == 'study') {
    $output = array_merge($output,
      uib_search__get_elastic_study_array($wrapped_entity));
  }

  uib_search__clean_utf8_string_array($output);

  $status = uib_search__run_elastic_request(
    $url,
    json_encode($output),
    'PUT',
    TRUE
  );
  uib_search__report_status($status, $entity_type, $id);
  return $output;
}

function uib_search__get_elastic_entity_array($wrapped_entity) {
  $type = $wrapped_entity->info();
  $type = $type['type'];
  if ($wrapped_entity->status->value() != 1) {
    return NULL;
  }
  if (isset($wrapped_entity->field_uib_search_manual_boost)
    && intval($wrapped_entity->field_uib_search_manual_boost->value()) == 0
    && isset($wrapped_entity->type)
    && $wrapped_entity->type->value() == 'uib_external_content') {
    return NULL;
  }

  // Hits - field exists for both users and nodes
  if ($hits = $wrapped_entity->field_uib_search_hits->value()) {
    $hits = array(
      'hits' => json_decode($hits, TRUE)
    );
  }
  else {
    $hits = array(
      'hits' => array(
        'hits' => 0,
        'max_hits' => 0,
        'last_hit' => 0,
      )
    );
  }

  // Handling users
  if ($type == 'user') {
    return uib_search__get_elastic_user_array($wrapped_entity) + $hits;
  }
  else if ($type != 'node') {
    uibx_log("Handler for entity of type {$type} not implemented", 'warning');
    return NULL;
  }

  // Only some fields are indexed
  $fields = array(
    'title',
    'lead',
    'teaser',
    'text',
    'text2',
    'primary_text',
    'secondary_text',
    'market_text',
    'article_type',
    'promote',
    'url',
    'type',
    'language',
    'study_code',
    'study_title',
    'search_description',
    'search_manual_boost',
    'published_timestamp',
    'changed',
    'date',
    'location',
    'search_keywords',
    'links',
    'step',
  );
  $usefields = variable_get('uib_search_nodefields', $fields);
  $search_manual_boost = 1;

  $field_prefix = 'field_uib';
  $output = array();
  $output['published_timestamp'] = $wrapped_entity->created->value();
  $replace_url = '';

  foreach ($wrapped_entity as $k => $v){
    $key = str_replace($field_prefix . '_', '', $k);
    if (!in_array($key, $usefields)) {
      // Fields not in $usefields are ignored
      continue;
    }

    switch ($key) {
      case 'search_manual_boost':
        $search_manual_boost = uib_search__null_if_empty($v->value());
        $max = variable_get('uib_search_boost_max', 10);
        $min = variable_get('uib_search_boost_min', pow(.5,10));
        if ($search_manual_boost == NULL) {
          $search_manual_boost = 1;
        }
        else if ($search_manual_boost>$max) {
          $search_manual_boost = $max;
        }
        else if ($search_manual_boost<$min) {
          $search_manual_boost = $min;
        }
        break;
      case 'links':
        if ($wrapped_entity->type->value() == 'uib_external_content') {
          $replace_url = uib_search__null_if_empty(current((array)$v->value()));
        }
        break;
      case 'date':
        $output[$key] = uib_search__null_if_empty($v->value());
        unset($output[$key]['timezone']);
        unset($output[$key]['timezone_db']);
        unset($output[$key]['date_type']);
        if (!isset($output[$key]['value']) || !$output[$key]['value']) {
          unset($output[$key]);
        }
        else {
          $output[$key]['value'] = format_date(
            $v->value->value(),
            'custom',
            'c');
          if (isset($output[$key]['value2']) && $output[$key]['value2']) {
            $output[$key]['value2'] = format_date(
              $v->value2->value(),
              'custom',
              'c');
          }
        }
        break;
      case 'step':
        $titles = array();
        $output[$key] = array();
        foreach ($v as $step) {
          try {
            if (isset($step->field_uib_step_content->field_uib_text)) {
              $tmp = $step->field_uib_step_content->field_uib_text->value();
              if (array_key_exists('safe_value', (array)$tmp)) {
                $tmp = $tmp['safe_value'];
              }
              else if (array_key_exists('value', (array)$tmp)) {
                $tmp = $tmp['value'];
              }
              $tmp = uib_search__strip_html($tmp);
              $output[$key][] = uib_search__null_if_empty($tmp);
            }
            if (isset($step->field_uib_step_content->title)) {
              $titles[] = $step->field_uib_step_content->title->value();
            }
          } catch (Exception $e) {
            // No action. See https://www.drupal.org/node/1596594 for info
          }
        }
        $output[$key . '_texts'] = implode(' ', $output[$key]);
        $output[$key . '_titles'] = implode(', ', $titles);
        $output[$key . '_titles_array'] = $titles;
        unset($output[$key]);
        break;
      case 'text':
      case 'text2':
      case 'primary_text':
      case 'secondary_text':
      case 'market_text':
        $tmp = $v->value();
        if (array_key_exists('safe_value', (array)$tmp)) {
          $tmp = $tmp['safe_value'];
        }
        else if (array_key_exists('value', (array)$tmp)) {
          $tmp = $tmp['value'];
        }
        $tmp = uib_search__null_if_empty($tmp);
        $tmp = uib_search__strip_html($tmp);
        $output[$key] = uib_search__null_if_empty($tmp);
        break;
      case 'url':
        $ll = language_list();
        $options =  array('absolute' => TRUE);
        if (array_key_exists($wrapped_entity->language->value(), $ll)) {
          $lang = $ll[$wrapped_entity->language->value()];
          $options['language'] = $lang;
        }
        if ($wrapped_entity->type->value() == 'uib_article') {
          if ($wrapped_entity->field_uib_kmd_data->value()) {
            $kmd_data = drupal_json_decode($wrapped_entity->field_uib_kmd_data->value());
            $output[$key] = $kmd_data['href'];
          }
          else {
            $output[$key] = url(
              "{$type}/{$wrapped_entity->getIdentifier()}",
              $options
            );
          }
        }
        else {
          $output[$key] = url(
            "{$type}/{$wrapped_entity->getIdentifier()}",
            $options
          );
        }
        break;
      case 'published_timestamp':
        if (uib_search__null_if_empty($v->value())) {
          $output[$key] = uib_search__null_if_empty($v->value());
        }
        break;
      case 'search_keywords':
        $arr = array();
        foreach ($v->value() as $item) {
          $arr[] = $item->name;
        }
        $output[$key] = $arr;
        break;
      default:
        $output[$key] = uib_search__null_if_empty($v->value());
        break;
    }
  }
  if ($replace_url) {
    $output['url'] = $replace_url['url'];
  }
  // URL - string for search
  // Remove query string if exists
  $output['url_string'] = preg_replace('/\?.*/', '', $output['url']);
  // Extract last part of url
  $output['url_string'] =  strtolower(basename($output['url_string']));

  if ($wrapped_entity->getBundle() == 'uib_study') {
    $output['title'] = uib_search__null_if_empty($wrapped_entity->field_uib_study_title->value());
  }
  unset($wrapped_entity);

  if (@$output['article_type']) {
    $type .= " - " . $output['article_type'];
  }
  $output = array('w3' => $output);
  $output['search_manual_boost'] = $search_manual_boost;
  $output['generic'] = array(
    'title' => $output['w3']['title'],
    'link' => $output['w3']['url'],
    'excerpt' =>
      @$output['w3']['search_description']
      ?: @$output['w3']['teaser']
      ?: @$output['w3']['lead']
      ?: strip_tags(@$output['w3']['text'])
      ?: strip_tags(@$output['w3']['primary_text'])
      ?: strip_tags(@$output['w3']['text2'])
      ?: strip_tags(@$output['w3']['secondary_text'])
      ?: NULL,
    '_searchable_text' => uib_search__concat_text(
      $output['w3'],
      array(
        'search_description',
        'title',
        'lead',
        'teaser',
        'text',
        'text2',
        'primary_text',
        'secondary_text',
        'market_text',
        'step_texts',
        'step_titles',
      )
    ),
  );
  return $output + $hits;
}

/**
 * Returns NULL for empty values (strings, empty arrays etc.)
 *
 * @param mixed $val
 */
function uib_search__null_if_empty($val) {
  if (is_array($val) || is_object($val)) {
    $val = (array)$val;
    if (count($val) == 0) {
      $val = NULL;
    }
    else {
      foreach ($val as $k => &$v) {
        $v = uib_search__null_if_empty($v);
        if (is_null($v)) {
          unset($val[$k]);
        }
      }
    }
  }
  else {
    if (!trim($val)) {
      $val = NULL;
    }
  }
  return $val;
}

function uib_search__strip_html($val) {
  if (!trim($val, "\t\n\r\0\x0B\xC2\xA0")) {
    return NULL;
  }

  // Strip html tags including content in script tags, style tags etc.
  // Replacing block elements with newlines.
  // Replacing multiple newlines with max 2 repeting newlines
  $retval = preg_replace(
    array(
      // Remove invisible content
      '/<head[^>]*?>.*?<\/head>/siu',
      '/<style[^>]*?>.*?<\/style>/siu',
      '/<script[^>]*?.*?<\/script>/siu',
      '/<object[^>]*?.*?<\/object>/siu',
      '/<embed[^>]*?.*?<\/embed>/siu',
      '/<applet[^>]*?.*?<\/applet>/siu',
      '/<noframes[^>]*?.*?<\/noframes>/siu',
      '/<noscript[^>]*?.*?<\/noscript>/siu',
      '/<noembed[^>]*?.*?<\/noembed>/siu',
      // Add line breaks before and after blocks
      '/<\/?((address)|(blockquote)|(center)|(del))/iu',
      '/<\/?((div)|(h[1-9])|(ins)|(isindex)|(p)|(pre))/iu',
      '/<\/?((dir)|(dl)|(dt)|(dd)|(li)|(menu)|(ol)|(ul))/iu',
      '/<\/?((table)|(th)|(td)|(caption))/iu',
      '/<\/?((form)|(button)|(fieldset)|(legend)|(input))/iu',
      '/<\/?((label)|(select)|(optgroup)|(option)|(textarea))/iu',
      '/<\/?((frameset)|(frame)|(iframe)|(br))/iu',
      '/[\n\r]{2,}/siu'
    ),
    array(
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        "\n\$0", "\n\$0", "\n\$0", "\n\$0", "\n\$0", "\n\$0",
        "\n\$0", "\n\$0", "\n\n"
    ),
    $val
  );
  $retval = strip_tags($retval);

  // Trimming, also removing trailing non breaking spaces etc.
  $retval = trim( $retval, "\t\n\r\0\x0B\xC2\xA0" );
  return $retval;
}

/**
 * Reports status  of http request to elasticsearch using uibx_lox - function.
 *
 * @param unknown $status HTTP Status object returned by
 * uib_search__run_elastic_request(...)
 * @param unknown $type Type of update (node, study, user or batch which can
 * include the others)
 * @param number $id The id beeing updated.
 * @param string $action The update action (create, update, delete)
 * @return boolean true on success, false if errors are reported.
 */
function uib_search__report_status($status, $type, $id = 0, $action = 'update') {
  $data = json_decode($status->data);
  if (!$status) {
    uibx_log('HTTP-call failed');
    return FALSE;
  }
  else if (in_array($status->code, array(200))) {
    if (isset($data->errors) && $data->errors) {
      uibx_log(
        "There where {$data->errors} error(s) during {$action} of elastic {$type}:",
        'error'
      );
      foreach ($data->items as $item) {
        if (isset($item->index->error)) {
          uibx_log(
            'ID: #' . $item->index->_id . ', Type: '
            . $item->index->_type . ', '
            . ucfirst(str_replace('_', ' ', $item->index->error->type)) . ': '
            . $item->index->error->reason,
            'error'
          );
        }
      }
      return FALSE;
    }
    else {
      $idtext = $id ? "id #$id" : "";
      uibx_log("Successful $action of elastic $type $idtext", 'notice');
      return TRUE;
    }
  }
  else if (in_array($status->code, array(201))) {
    $action = $action == 'update' ? 'creation' : $action;
    uibx_log("Successful $action of elastic $type id #$id", 'notice');
    return TRUE;
  }
  else if ($status->code == 404) {
    uibx_log(
      ucwords($type) . " id #" . $id . ' was not found in the elastic index',
      'warning'
    );
    return FALSE;
  }
  else {
    uibx_log(
      ucfirst($action) . " elastic $type id {$id} failed: {$status->code} - "
        . "{$status->status_message}",
      'error'
    );
    return FALSE;
  }
}

function uib_search__remove_tag($tag, $dom) {
    $list = $dom->getElementsByTagName($tag);
    while ( $node = $list->item(0) ) {
        $node->parentNode->removeChild($node);
    }
}

/**
 * Concatenate (possibly empty) arguments in an array to a comma separated
 * string.
 * @param array $array The array to handle number of string arguments
 * @param array $keys Array of keys
 * @return string The concatenated string.
 */
function uib_search__concat_text($array, $keys) {
  $output = '';
  foreach ($keys as $key) {
    if (array_key_exists($key, $array)) {
      $output .= "{$array[$key]}, ";
    }
  }
  return trim($output, ', ');
}

/**
 * Get an array with data from FS for the given nid, suitable for inserting
 * into elasticsearch.
 *
 * @param int $nid Node ID for the node to return data from.
 * @return an array with structured data from FS. Returns an empty array
 * if no data is found.
 *
 */
function uib_search__get_elastic_study_array($wrapped_entity) {
  if (!isset($wrapped_entity->field_uib_study_type)) {
    return NULL;
  }
  $study_type = $wrapped_entity->field_uib_study_type->value();
  $render = uib_search__get_render_json($wrapped_entity);
  $render['study_type'] = $study_type;
  $languages = language_list();
  $output = array(
    'generic' => array(
      'excerpt_en' => @$render['excerpt_en'] ?
        $render['excerpt_en'] :
        @$render['excerpt_nb'],
      'excerpt_nb' => @$render['excerpt_nb'] ?
        $render['excerpt_nb'] :
        @$render['excerpt_en'],
      'excerpt' => @$render['excerpt_nb'] ?
        $render['excerpt_nb'] :
        @$render['excerpt_en'],
      '_searchable_text' =>  @$render['_searchable_text'],
      'title_nb' => @$render['title_nb'] ?
        $render['title_nb'] :
        @$render['title_en'],
      'title_en' => @$render['title_en'] ?
        $render['title_en'] :
        @$render['title_nb'],
      'title' => @$render['title_nb'] ?
        $render['title_nb'] :
        @$render['title_en'],
      'link_en' => url(
        'node/' . $wrapped_entity->getIdentifier(),
        array(
          'language' => $languages['en'],
          'absolute' => TRUE
        )
      ),
      'link_nb' => url(
        'node/' . $wrapped_entity->getIdentifier(),
        array(
          'language' => $languages['nb'],
          'absolute' => TRUE
        )
      ),
    )
  );
  $output['generic']['link'] =
    $output['generic']['link_nb'] ?
    $output['generic']['link_nb'] :
    $output['generic']['link_en'];
  unset($render['_searchable_text']);
  $output['fs'] = $render;

  return $output;
}

function uib_search__index_study($wrapped_entity) {
  $index = uib_search__get_index(TRUE);
  $url = variable_get('uib_elasticsearch_url');
  $type = 'study';
  // Loading data from FS
  $fsdata = uib_search__get_elastic_study_array($wrapped_entity);
  // Loading data from w3 as well
  $entitydata = uib_search__get_elastic_entity_array($wrapped_entity);
  //Merge arrays. Generic is overwritten by fsdata
  $data = array_merge($entitydata, $fsdata);
  $url = "{$url}/{$index}/{$type}/" . $wrapped_entity->getIdentifier();
  $status = uib_search__run_elastic_request(
    $url,
    json_encode($data),
    'PUT',
    true
  );
  uib_search__report_status(
    $status,
    "node (study {$data['study_type']})",
    $wrapped_entity->getIdentifier()
  );
  return $data;
}

function uib_search__split_key($key) {
  $ke = explode(':', $key);
  $key = strtolower($ke[0]);
  $lang = '';
  $sem = '';
  if (count($ke) > 1) {
    $lang = ':' . $ke[1];
  }
  if (count($ke) > 2) {
    $sem = $ke[2];
  }
  return array($key, $lang, $sem);
}

function uib_search__get_render_json($entity) {
  $nid = $entity->nid->value();

  $info = uib_study__fspres_get_node_json($nid, 'info.json', FALSE);

  // Include some info-types
  $include_info = array(
    // Some language independent fields
    'emneid' => 'study_code', // emnekode is fetched from this object
    'studiepoeng' => 'credits',
    // Utvekslingsavtaler
    'avtalenavn' => 'title_nb',
    'avtalenavn:en' => 'title_en',
    'avtaleid' => 'study_code',
      // Language specific fields
    'emnenavn' => 'title_nb',
    'emnenavn_en' => 'title_en',
    'studieprogramnavn' => 'title_nb',
    'studieprogramnavn_en' => 'title_en',
    'fagnavn' => 'dicipline_nb',
    'fagnavn:en' => 'dicipline_en',
  );

  // get installed languages
  $langs = language_list();

  // make a decent array
  $output = array();
  foreach ($include_info as  $readkey => $writekey) {
    if(!isset($info[$readkey])) continue;
    switch ($readkey) {
      case 'emneid':
        $output[$writekey] = $info[$readkey]['emnekode'];
        break;
      default:
        $output[$writekey] = $info[$readkey];
        break;
    }
  }

  foreach ($langs as $l) {
    $render = uib_study__fspres_get_node_json($nid, 'render.json', $l->language);
    if ($render) {
      $courses[$l->language] = $render;
    }
  }

  // Ignore some types
  $ignore_types = array(
    'B_RE_SPRAK',
    'M_RE_SPRAK',
  );
  $use_as_excerpt = array(
    'EB_INNHOLD', // Course
    'EB_STUDRET', //   ''
    'FKU_INNHLD', //   ''
    'SP_INNHOLD', // Study-plan programme
    'SPMALINNHA', //        ''
    'B_RE_INTRO', //        ''
    'RE_UTGAAT',  // Retired programme
    'EVU_BESKRI', // EVU-course
    'AVT_HVEM',   // Exchange agreement
    'FAVT_HIST',  // Agreement - MOU
    'FAVT_TYPE',  //       ''
    'STE_STED',   // Exchange agreement
  );

  $output['_searchable_text'] = '';
  if (!empty($courses)) {
    foreach ($courses as $lang => $cl) {
      $output['text_' . $lang] = '';
      foreach ($cl  as $course) {
        if (array_key_exists('#title', $course)) {
          $output['_searchable_text'] .= "{$course['#title']}\n\n";
        }
        foreach ($course['#items'] as $item) {
          if (in_array($item['#type'], $ignore_types)) {
            continue;
          }
          if (array_key_exists('#title', $item)) {
            $output['_searchable_text'] .= $item['#title'] . "\n\n";
            $output['text_' . $lang] .= $item['#title'] . "\n\n";
          }
          if (array_key_exists('#text', $item)) {
            $output['_searchable_text'] .= $item['#text'] . "\n\n";
            $output['text_' . $lang] .= $item['#text'] . "\n\n";
            if (in_array($item['#type'], $use_as_excerpt)
              && !isset($output['excerpt_' . $lang])) {
              $output['excerpt_' . $lang] =
                uib_search__strip_html($item['#text']);
            }
          }
        }
      }
    }
    // strip HTML
    $output['_searchable_text'] = uib_search__strip_html($output['_searchable_text']);
  }
  foreach ($langs as $l) {
    if (!array_key_exists('excerpt_' . $l->language, $output)) {
      $output['excerpt_' . $l->language] = '';
    }
    $output['text_' . $l->language] =
      uib_search__strip_html(@$output['text_' . $l->language]);
  }
  return $output;
}

/**
 * Increase the search boost for an item manually. This function sets the boost
 * value for individual entities in the database. How this value is used is up
 * to the search implementation to decide.
 *
 * @param string $dir Direction of boost. Can be up or down.
 * @param string $type Entity type, either node or user.
 * @param int $id Entity id to boost
 * @return void The function exits drupal, echoing the current boost value.
 */
function uib_search__boost_item_search($dir, $type, $id) {
  global $user;
  if (
    !(
      in_array('superbruker', $user->roles)
      || in_array('admin', $user->roles)
      || $user->uid == 1
      )
    ) {
    // User does not have role admin or superbruker
    return;
  }
  if (!$id) {
    // no id is set
    return;
  }
  $o = null;
  switch ($type) {
    case 'node':
      $o = node_load($id);
      break;
    case 'user':
      $o = user_load($id);
      break;
  }
  if (!$o) {
    // entity not found
    return;
  }
  $old  = isset($o->field_uib_search_manual_boost['und'][0]['value'])
    ? $o->field_uib_search_manual_boost['und'][0]['value']
    : 1;
  $max = variable_get('uib_search_boost_max', 10);
  $min = variable_get('uib_search_boost_min', pow(.5,10));
  switch ($dir) {
    case 'up':
      $new = $old < 1 ? 1 : $old + 1;
      break;
    case 'down':
      $new = $old > 1 ? $old - 1: $old / 2;
      break;
  }
  $new = $new > $max ? $max : $new;
  $new = $new < $min ? $min : $new;
  $o->field_uib_search_manual_boost['und'][0]['value'] = $new;
  call_user_func($type . '_save', $o);
  drupal_json_output($new);
  drupal_exit();
}


/**
 * Takes an array of strings and tests for bed character encodings. Bad strings
 * will be set to NULL. The function modifies the input array directly.
 *
 * @param array $array
 */
function uib_search__clean_utf8_string_array(&$array) {
  array_walk_recursive($array,
    function(&$item, $key) {
      if (is_string($item)) {
        $item = iconv('UTF-8', 'UTF-8//IGNORE', $item);
        if ($item === FALSE) {
          $item = NULL;
        }
      }
    }
  );
}

function uib_search__create_query($use_post_boosting = FALSE) {
  $boosting = array_map(
    function($v) {return $v->value;},
    uib_search__get_boosting()
  );
  if ($use_post_boosting) {
    $boosting = array_merge(
      $boosting,
      array_map(function($v) {return floatval($v);}, $_POST)
    );
  }
  $px = 'uib_search_boosting__';
  $query = $_REQUEST['query'];
  $filter = (array)$_REQUEST['filters'];
  $size = isset($_REQUEST['size']) ? $_REQUEST['size'] : '10';
  $from = isset($_REQUEST['from']) ? $_REQUEST['from'] : '0';
  $lang = isset($_REQUEST['lang']) ? $_REQUEST['lang'] : 'nb';
  $querynum = $_REQUEST['querynum'];
  $all = FALSE;
  $should = array();
  $tmp = array();
  $shortquery = mb_substr($query, 0, 15);
  $excerpt_length = 350;
  $data = array(
    'query' => array(
      'bool' => array(
        'should' => array(),
        'must' => array(),
        'filter' => array(
          'bool' => array(
            'should' => array(),
          ),
        ),
      ),
    ),
    'highlight' => array(
      'fields' => array(),
    ),
    'size' => $size,
    'from' => $from,
    '_source' => array(
      'generic.title*',
      'generic.excerpt*',
      'generic.link*',
      'search_manual_boost',
      'w3.date.*',
      'w3.type',
      'w3.changed',
      'w3.article_type',
      'w3.location',
      'w3.study_code',
      'mail',
      'first_name',
      'last_name',
      'phone',
      'ou_*',
      '*position*',
      'competence*',
      'link*',
      'w3.published_timestamp',
      'w3.step_titles_array',
    ),
  );
  $boostquery = array(
    'bool' => array(
      'should'=> array(),
      '_name'=> 'Boost',
    ),
  );
  $searchquery = array(
    'bool' => array(
      'should' => array(),
      '_name' => 'Search',
      'minimum_should_match' => 1,
    ),
  );

  /**************************************
   * Query matching
   *************************************/

  // Match NGrams in title. Ngrams are made up of word triplets
  // This matches for user and node
  $tmp = array(
    'bool' => array(
      'filter' => array(
        'terms' => array(
          '_type' => array(
            'user',
            'node',
          ),
        ),
      ),
      'must' => array(
        'match' => array(
          'generic.title.ngrams' => array(
            'query' => $shortquery,
            'minimum_should_match' => '40%',
          ),
        ),
      ),
      '_name' => 'NGram-search',
    ),
  );
  $searchquery['bool']['should'][] = $tmp;

  $tmp = array(
    'bool' => array(
      'filter' => array(
        'terms' => array(
          '_type' =>  array("study"),
        ),
      ),
      'should' =>  array(
        array(
          'match' => array(
            "generic.title_nb.ngrams" => array(
              'query' => $shortquery,
              'minimum_should_match' => "40%",
            ),
          ),
        ),
        array(
          'match' => array(
            "generic.title_en.ngrams" => array(
              'query' => $shortquery,
              'minimum_should_match' => "40%",
            ),
          ),
        ),
      ),
      'minimum_should_match' => 1,
      '_name' => "NGram-study",
    ),
  );
  $searchquery['bool']['should'][] = $tmp;

  // Match full words in title
  $tmp = array(
      'bool' => array(
        'filter' => array(
          'terms' => array(
            '_type' => array(
              "node",
            ),
          ),
        ),
        'must' => array(
          'match' => array(
            "generic.title.{$lang}" => array(
              'query' => $query,
            ),
          ),
        ),
        'boost' => $boosting[$px . 'match-title'],
        '_name' => "Match-title",
      ),
    );
  $searchquery['bool']['should'][] = $tmp;

  // Match full words in name
  $tmp = array(
    'bool' => array(
      'filter' => array(
        'terms' => array(
          '_type' => array(
            "user",
          ),
        ),
      ),
      'must' => array(
        'multi_match' => array(
          'query' => $query,
          'fields' => array(
            'first_name',
            'last_name',
          ),
        ),
      ),
      'boost' => $boosting[$px . 'match-name-user'],
      '_name' => "Match-name-user",
    ),
  );
  $searchquery['bool']['should'][] = $tmp;

  $tmp = array(
    'bool' => array(
      'filter' => array(
        'terms' => array(
          '_type' => array("study"),
        ),
      ),
      'must' => array(
        'match' => array(
          "generic.title_{$lang}" => array(
            'query' => $query,
          ),
        ),
      ),
      '_name' => "Match-title-study({$lang})",
    ),
  );
  $searchquery['bool']['should'][] = $tmp;

  // Match words in excerpt
  $tmp = array(
    'bool' =>  array(
      'filter' =>  array(
        'terms' =>  array(
          '_type' =>  array('node'),
        ),
      ),
      'must' =>  array(
        'match' =>  array(
          "generic.excerpt.{$lang}" => array(
            'query' => $query,
          ),
        ),
      ),
      '_name' =>  'Match-excerpt',
    )
  );
  $searchquery['bool']['should'][] = $tmp;

  $tmp = array(
    'bool' =>  array(
      'filter' =>  array(
        'terms' =>  array(
          '_type' =>  array('study'),
        ),
      ),
      'must' =>  array(
        'match' =>  array(
          "generic.excerpt_{$lang}" => array(
            'query' =>  $query,
          )
        ),
      ),
      '_name' =>  "Match-excerpt-study({$lang})",
    )
  );
  $searchquery['bool']['should'][] = $tmp;

  // Match keywords
  $tmp = array(
    'match' =>  array(
      'w3.search_keywords' => array(
        'query' =>  $shortquery,
        'boost' =>  $boosting[$px . 'match-keywords'],
        'fuzziness' =>  1,
        'prefix_length' => 4,
        '_name' =>  'Fuzzy-match-keywords',
      ),
    ),
  );
  $searchquery['bool']['should'][] = $tmp;

  //Match search description
  $tmp = array(
    'match' =>  array(
      'w3.search_description' => array(
        'query' =>  $shortquery,
        'boost' =>  $boosting[$px . 'match-search-description'],
        'fuzziness' =>  'auto',
        '_name' =>  'Fuzzy-match-description',
      ),
    ),
  );
  $searchquery['bool']['should'][] = $tmp;

  //Match in _searchable text
  $tmp = array(
    'match' =>  array(
      "generic._searchable_text.{$lang}" => array(
        'query' => $query,
        '_name' =>  'Match-searchable-text',
      ),
    ),
  );
  $searchquery['bool']['should'][] = $tmp;

  // Phrase-matching on title
  $tmp = array(
    'bool' =>  array(
      'filter' =>  array(
        'terms' =>  array(
          '_type' =>  array(
            'user',
            'node'
          ),
        ),
      ),
      'must' =>  array(
        'match_phrase_prefix' =>  array(
          "generic.title.{$lang}" => array(
            'query' => $query,
          ),
        ),
      ),
      '_name' =>  "Phrase-search({$lang})",
    )
  );
  $searchquery['bool']['should'][] = $tmp;

  $tmp = array(
    'bool' =>  array(
      'filter' =>  array( 'terms' =>  array( '_type' =>  array('study'))),
      'must' =>  array(
        'match_phrase_prefix' =>  array(
          "generic.title_{$lang}" => array(
            'query' => $query,
          ),
        ),
      ),
      '_name' =>  "Phrase-search-study({$lang})",
    )
  );
  $searchquery['bool']['should'][] = $tmp;

  // Prefix - matching on disipline
  $tmp = array(
    'prefix' =>  array(
      'fs.dicipline_nb' => $query,
      '_name' =>  'Dicipline(nb)',
    ),
  );
  $searchquery['bool']['should'][] = $tmp;

  $tmp = array(
    'prefix' =>  array(
      'fs.dicipline_en' => $query,
      '_name' =>  'Dicipline(en)',
    ),
  );
  $searchquery['bool']['should'][] = $tmp;

  // Exact match url elements on nodes
  $tmp = array(
    'term' =>  array(
      'w3.url_string' => array(
        'value' => strtolower($query),
        'boost' => $boosting[$px . 'match-url'],
        '_name' =>  'Match-url',
      ),
    ),
  );
  $searchquery['bool']['should'][] = $tmp;

  // Match on custom fields for persons
  $tmp = array(
    'bool' =>  array(
      'should' => array(
        array(
          'match_phrase_prefix' => array(
            'first_name' => array(
              'query' => $query,
            ),
          ),
        ),
        array(
          'match' => array(
            'first_name' =>  array(
              'query' =>  $shortquery,
              'fuzziness' =>  1,
              'prefix_length' =>  3,
              'max_expansions' =>  50,
            ),
          ),
        ),
        array(
          'match_phrase_prefix' => array(
            'last_name' => array(
              'query' => $query,
            ),
          ),
        ),
        array(
          'match' =>  array(
            'last_name' =>  array(
              'query' =>  $shortquery,
              'fuzziness' =>  1,
              'prefix_length' => 3,
              'max_expansions' =>  50,
            ),
          ),
        ),
        array(
          'match_phrase_prefix' =>  array(
            'mail' =>  array(
              'query' => $query,
            ),
          ),
        ),
        array(
          'match_phrase_prefix' =>  array(
            'ou_nb' =>  array(
              'query' => $query,
            ),
          ),
        ),
        array(
          'match_phrase_prefix' =>  array(
            'ou_en' =>  array(
              'query' => $query,
            ),
          ),
        ),
        array(
          'match_phrase_prefix' =>  array(
            'position_nb' =>  array(
              'query' => $query,
            ),
          ),
        ),
        array(
          'match_phrase_prefix' =>  array(
            'position_en' =>  array(
              'query' => $query,
            ),
          ),
        ),
        array(
          'match_phrase_prefix' =>  array(
            'alt_position_nb' =>  array(
              'query' => $query,
            ),
          ),
        ),
        array(
          'match_phrase_prefix' =>  array(
            'alt_position_en' =>  array(
              'query' => $query,
            ),
          ),
        ),
        array(
          'match_phrase_prefix' =>  array(
            'competence_nb' =>  array(
              'query' => $query,
            ),
          ),
        ),
        array(
          'match_phrase_prefix' =>  array(
            'competence_en' =>  array(
              'query' => $query,
            ),
          ),
        ),
        array(
          'multi_match' =>  array(
            'query' => $query,
            'fields' =>  array(
              'ou_nb',
              'ou_en',
              'position_nb',
              'position_en',
              'alt_position_nb',
              'alt_position_en',
              'competence_nb',
              'competence_en',
            ),
          ),
        ),
      ),
    '_name' =>  'Person-search',
    )
  );

  $searchquery['bool']['should'][] = $tmp;

  // Match direct hit on study code
  $tmp = array(
    'bool' =>  array(
      'filter' =>  array(
        'terms' =>  array(
          '_type' =>  array('study'),
        ),
      ),
      'must' =>  array(
        'match_phrase_prefix' => array(
          'w3.study_code' => array(
            'query' => strtolower($query),
          ),
        ),
      ),
      '_name' =>  'Match-study-code',
      'boost' =>  $boosting[$px . 'match-study-code'],
    )
  );
  $searchquery['bool']['should'][] = $tmp;

  // Testing if search is a phone number search. If search is an 8-digit search
  // (after clearing spaces and +47), then only the phone nr match is returned.
  // Other searches are cleared from the query.
  $patterns = array('/[^0-9]/', '/47([0-9]{8})/');
  $phonequery = preg_replace($patterns, array('', '\1'), $query);
  if (strlen($phonequery) == 8) {
    $tmp = array(
      'match' =>  array(
        'phone.nospace' => array(
          'query' =>  $phonequery,
          'boost' =>  $boosting[$px . 'match-phone'],
          '_name' =>  'Phone-query',
        ),
      ),
    );
    $searchquery['bool']['should'] = $tmp;
  }

  // Add the searchquery to the must clause, as something here must match
  $data['query']['bool']['must'] = $searchquery;




  /**************************************
   * Highlighted fields
   *************************************/
  $data['highlight']['fields']['w3.study_code'] = array(
    'number_of_fragments' => 0,
  );
  $data['highlight']['fields']['generic.title.' . $lang] = array(
    'number_of_fragments' => 0,
  );
  $data['highlight']['fields']['generic.title_' . $lang] = array(
    'number_of_fragments' => 0,
  );
  $data['highlight']['fields']['generic.excerpt.' . $lang] = array(
    'number_of_fragments' => 1,
    'fragment_size' => $excerpt_length,
  );
  $data['highlight']['fields']['generic.excerpt_' . $lang] = array(
    'number_of_fragments' => 1,
    'fragment_size' => $excerpt_length,
  );
  $data['highlight']['fields']['first_name'] = array(
    'number_of_fragments' => 0,
  );
  $data['highlight']['fields']['last_name'] = array(
    'number_of_fragments' => 0,
  );
  $data['highlight']['fields']['ou_' . $lang] = array(
    'number_of_fragments' => 0,
  );
  $data['highlight']['fields']['position_' . $lang] = array(
    'number_of_fragments' => 0,
  );
  $data['highlight']['fields']['mail'] = array(
    'number_of_fragments' => 0,
  );
  $data['highlight']['fields']['alt_position_' . $lang] = array(
    'number_of_fragments' => 0,
  );
  $data['highlight']['fields']['phone.nospace'] = array(
    'number_of_fragments' => 0,
  );


  /**************************************
   * Boosting relevance
   *************************************/

  // Boost study programs
  $tmp = array(
    'constant_score' => array(
      'filter' => array(
        'term' => array(
          'fs.study_type' => array(
            'value' => 'program',
          ),
        ),
      ),
      'boost' => $boosting[$px . 'study-type-programme'],
    ),
  );
  $boostquery['bool']['should'][] = $tmp;


  // Boost study courses
  $tmp = array(
    'constant_score' =>  array(
      'filter' =>  array(
        'term' =>  array(
          'fs.study_type' => array(
            'value' =>  'course',
          ),
        ),
      ),
      'boost' =>  $boosting[$px . 'study-type-course'],
    ),
  );
  $boostquery['bool']['should'][] = $tmp;

  // Boost exchange agreements
  $tmp = array(
    'constant_score' =>  array(
      'filter' =>  array(
        'term' =>  array(
          'fs.study_type' => array(
            'value' =>  'exchange',
          ),
        ),
      ),
      'boost' =>  $boosting[$px . 'study-type-exchange'],
    ),
  );
  $boostquery['bool']['should'][] = $tmp;

  // Boost all hits in the study index
  // not boosted otherwise
  $tmp = array(
    'constant_score' =>  array(
      'filter' =>  array(
        'bool' =>  array(
          'must' =>  array(
            'term' =>  array(
              '_type' => array(
                'value' =>  'study',
              ),
            ),
          ),
          'must_not' =>  array(
            array(
              'term' =>  array(
                'fs.study_type' => array(
                  'value' =>  'course',
                ),
              ),
            ),
            array(
              'term' =>  array(
                'fs.study_type' => array(
                  'value' =>  'program',
                ),
              ),
            ),
            array(
              'term' =>  array(
                'fs.study_type' => array(
                  'value' =>  'exchange',
                ),
              ),
            ),
          ),
        ),
      ),
      'boost' =>  $boosting[$px . 'study-whatever-study'],
    ),
  );
  $boostquery['bool']['should'][] = $tmp;

  // Boost hits on content type area
  $tmp = array(
    'constant_score' =>  array(
      'filter' =>  array(
        'term' =>  array(
          'w3.type' => array(
            'value' =>  'area'
          ),
        ),
      ),
      'boost' =>  $boosting[$px . 'node-area'],
    ),
  );
  $boostquery['bool']['should'][] = $tmp;

  // Boost hits on content type uib_content_list
  $tmp = array(
    'constant_score' =>  array(
      'filter' =>  array(
        'term' =>  array(
          'w3.type' => array(
            'value' =>  'uib_content_list'
          ),
        ),
      ),
      'boost' =>  $boosting[$px . 'node-content-list'],
    ),
  );
  $boostquery['bool']['should'][] = $tmp;

  // Boost external content
  $tmp = array(
    'constant_score' =>  array(
      'filter' =>  array(
        'term' =>  array(
          'w3.type' => array(
            'value' =>  'uib_external_content'
          ),
        ),
      ),
      'boost' =>  $boosting[$px . 'node-external-content'],
    ),
  );
  $boostquery['bool']['should'][] = $tmp;

  // Boost recent content
  $tmp = array(
    'constant_score' =>  array(
      'filter' =>  array(
        'bool' =>  array(
          'must' =>  array(
            array(
              'range' =>  array(
                'w3.changed' => array(
                  'gte' =>  'now-1M',
                ),
              ),
            ),
            array(
              'term' =>  array(
                'w3.article_type' => array(
                  'value' =>  'news',
                ),
              ),
            ),
          ),
        ),
      ),
      'boost' =>  $boosting[$px . 'recent-content'],
    ),
  );
  $boostquery['bool']['should'][] = $tmp;

  // Boost upcoming events
  $tmp = array(
    'constant_score' =>  array(
      'filter' =>  array(
        'bool' =>  array(
          'should' =>  array(
            array(
              'range' =>  array(
                'w3.date.value' => array(
                  'gte' =>  'now/d',
                ),
              ),
            ),
            array(
              'range' =>  array(
                'w3.date.value2' => array(
                  'gte' =>  'now/d',
                ),
              ),
            ),
          ),
          'must' =>  array(
            array(
              'term' =>  array(
                'w3.article_type' => array(
                  'value' =>  'event',
                ),
              ),
            ),
          ),
          'minimum_should_match' =>  1,
        ),
      ),
      'boost' =>  $boosting[$px . 'upcoming-events'],
    ),
  );
  $boostquery['bool']['should'][] = $tmp;



  // Boost relevanskriteriene i forhold til sÃ¸kekriteriene
  // for Ã¥ fÃ¥ rett effekt av relevanskriteriene
  $tmp = array(
    'bool' => array(
      'should' => $boostquery,
      'boost' => $boosting[$px . 'relevance-vs-criteria-boosting'],
    ),
  );

  // Adding relevance boost to should - clause. Some or none of these can
  // match.
  $data['query']['bool']['should'][] = $tmp;

  /**************************************
   * Negative boosting
   *
   * Unboostqueries are added to the
   * main query at the very end.
   **************************************/
  $unboost_past_events = array(
    'bool' =>  array(
      'should' =>  array(),
      '_name' =>  'Unboost',
    ),
  );

  // Events where date.value2 is at least 1 month old
  $tmp = array(
    'bool' =>  array(
      'must' =>  array(
        array(
          'term' =>  array(
            'w3.article_type' => array(
              'value' =>  'event',
            ),
          ),
        ),
        array(
          'range' =>  array(
            'w3.date.value2' => array(
              'lt' =>  'now-1M/d',
            ),
          ),
        ),
      ),
    ),
  );
  $unboost_past_events['bool']['should'][] = $tmp;

  // Events where date.value2 does not exists and date.value is at least
  // 1 month old
  $tmp = array(
    'bool' =>  array(
      'must' =>  array(
        array(
          'term' =>  array(
            'w3.article_type' => array(
              'value' =>  'event'
            ),
          ),
        ),
        array(
          'range' =>  array(
            'w3.date.value' => array(
              'lt' =>  'now-1M/d',
            ),
          ),
        ),
      ),
      'must_not' =>  array(
        array(
          'exists' =>  array(
            'field' =>  'w3.date.value2',
          )
        ),
      ),
    )
  );
  $unboost_past_events['bool']['should'][] = $tmp;

  /**************************************
   * Filtering
   * The filtering will not affect
   * relevance scores.
   *************************************/
  // All content
  if (in_array('everything', $filter)) {
    $all = TRUE;
    // Study
    $data['query']['bool']['filter']['bool']['should'][] =
      array('type' => array('value' => 'study'));
    // User
    $data['query']['bool']['filter']['bool']['should'][] =
      array('type' => array('value' => 'user'));
    // Node
    $data['query']['bool']['filter']['bool']['should'][] =
      array('type' => array('value' => 'node'));
  }

  // Users
  if ( $all || in_array('user', $filter)) {

    if (!$all) {
      // Document type must be user
      $data['query']['bool']['filter']['bool']['should'][] = array(
        'type' => array(
          'value' => 'user',
        ),
      );
    }
  }

  // News, study, events
  if ($all ||
    in_array('news', $filter) ||
    in_array('study', $filter) ||
    in_array('event', $filter)
  ) {
    // News
    if (!$all && in_array('news', $filter)) {
      // Document type: node, and w3 article-type: news
      $data['query']['bool']['filter']['bool']['should'][] = array(
        'bool' => array(
          'should' => array(
            array(
              'type' => array(
                'value' => 'node',
              ),
            ),
            array(
              'term' => array(
                'w3.article_type' => array(
                  'value' => 'news',
                ),
              ),
            ),
          ),
          'minimum_should_match' => 2,
        ),
      );
    }

    // Events
    if (!$all && in_array('event', $filter)) {
      // Document type: node, and w3 article-type: event
      $data['query']['bool']['filter']['bool']['should'][] = array(
        'bool' => array(
          'should' => array(
            array(
              'type' => array(
                'value' => 'node',
              ),
            ),
            array(
              'term' => array(
                'w3.article_type' => array(
                  'value' => 'event',
                ),
              ),
            ),
          ),
          'minimum_should_match' => 2,
        ),
      );
    }

    // Study
    if (!$all && in_array('study', $filter)) {
      // Document type: study
      $data['query']['bool']['filter']['bool']['should'][] = array(
        'type' => array(
          'value' => 'study',
        ),
      );
    }
  }
  // Affects only the search part of the query (not other boosts)
  $data['query']['bool']['must'] = array(
    'function_score' =>  array(
      'query' =>  $data['query']['bool']['must'],
      'field_value_factor' =>  array(
        'field' =>  'search_manual_boost',
        'modifier' =>  'square',
        // Determine how much manual boost affect results:
        'factor' =>  $boosting[$px . 'manual-boost-factor'],
      ),
    ),
  );

  // Negative boost for past events
  $data['query']['bool']['must'] = array(
    'boosting' =>  array(
      'positive' =>  $data['query']['bool']['must'],
      'negative' =>  $unboost_past_events,
      'negative_boost' =>  $boosting[$px . 'unboost-past-events'],
    ),
  );
  return $data;
}
