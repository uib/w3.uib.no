<?php

/**
 * Implements hook_menu().
 */
function uib_search_menu() {
  $items["search"] = array(
    'page callback' => 'uib_search__page',
    'access callback' => TRUE,
  );
  $items["searchboost/up/%/%"] = array(
    'page callback' => 'uib_search__boost_item_search',
    'page arguments' => array(1,2,3),
    'access callback' => TRUE,
  );
  $items["searchboost/down/%/%"] = array(
    'page callback' => 'uib_search__boost_item_search',
    'page arguments' => array(1,2,3),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Returns the search page.
 */
function uib_search__page() {
  $q = isset($_GET['qq']) ? $_GET['qq'] : 'uib';
  drupal_add_js("//www.google.com/jsapi", array('type' => 'external'));
  $script = <<<JS
    google.load('search', '1', {language : 'no', style : google.loader.themes.V2_DEFAULT});
    google.setOnLoadCallback(function() {
      var customSearchOptions = {};
      var orderByOptions = {};
      orderByOptions['keys'] = [{label: 'Relevans', key: ''},{label: 'Dato', key: 'date'}];
      customSearchOptions['enableOrderBy'] = true;
      customSearchOptions['orderByOptions'] = orderByOptions;
      customSearchOptions['adoptions'] = {'layout': 'noTop'};
      var customSearchControl = new google.search.CustomSearchControl('000077022656589805190:s7hjxymr2ey', customSearchOptions);
      customSearchControl.setResultSetSize(google.search.Search.FILTERED_CSE_RESULTSET);
      customSearchControl.setLinkTarget (google.search.Search.LINK_TARGET_SELF);
      var options = new google.search.DrawOptions();
      //options.setAutoComplete(true);
      options.enableSearchResultsOnly();
      customSearchControl.draw('cse', options);
      function parseParamsFromUrl() {
        var params = {};
        var parts = window.location.search.substr(1).split('\x26');
        for (var i = 0; i < parts.length; i++) {
          var keyValuePair = parts[i].split('=');
          var key = decodeURIComponent(keyValuePair[0]);
          params[key] = keyValuePair[1] ?
          decodeURIComponent(keyValuePair[1].replace(/\+/g, ' ')) :
          keyValuePair[1];
        }
        return params;
      }
      var urlParams = parseParamsFromUrl();
      customSearchControl.execute(urlParams["qq"] || "uib");
    }, true);
JS;
  drupal_add_js($script, array('type' => 'inline'));

  $q = check_plain($q);
  return <<<"HTML"
<div id=cse>SÃ¸ker etter $q...</div>
<noscript>
  <p>Our search depends on Javascript, please enable Javascript or use Google to search our site</p>
  <form action="http://www.google.com/search" method="get">
    <input size="50" type="hidden" name="q" id="searchField2" value="$q">
    <input style="margin:20px 0px; font-size: 14px;" type="submit" value="Search on Google">
    <input type="hidden" name="sitesearch" value="www.uib.no"/>
  </form>
</noscript>
HTML;
}

/**
 * Implements hook_block_info().
 */
function uib_search_block_info() {
  return array(
    'global-searchform' => array(
      'info' => t('Search form'),
      'status' => TRUE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function uib_search_block_view($delta) {
  $retval=array();
  switch ($delta) {
  case 'global-searchform':
    $retval['subject']=t('Search');

    // Setup for elasticsearch
    drupal_add_js(
      array('uib_search' =>
        array(
          'user' => uib_search__get_setup('user'),
          'password' => uib_search__get_setup('password'),
          'url' => uib_search__get_setup('url'),
          'index' => uib_search__get_setup('index'),
        )
      ),
      'setting'
    );

    // TODO: This if-block should be removed when the switch to elasticsearch
    // has been completed, keeping the if - part, and removing the else-part.
    if (variable_get('uib_search_switch_to_elastic', FALSE)) {
      drupal_add_js(drupal_get_path('module', 'uib_search') . '/js/uib_search.js');
      drupal_add_js(
        array('uib_search' => array(
          'uib_search_boost_max' => 10,
          'uib_search_boost_min' => pow(.5,10),
          )
        ),
        'setting'
      );
      $retval['content']['noscript'] = drupal_get_form('uib_search__noscript_form');
      $retval['content']['normal'] = drupal_get_form('uib_search__form');

    }
    else {
      $retval = uib_search__form_old();
    }

    break;
  }
  return $retval;
}

/**
 * Get the search form
 * @return The form render-array
 */
function uib_search__form(){
  global $language, $user;
  $action=$GLOBALS['base_path'] . $language->language . "/search";
  $form= array(
    '#weight' => -45,
    '#action' => $action,
    '#method' => 'get',
    '#id' => 'uib-search-form',
    '#type' => 'form',
    '#attributes' => array(
      'class' => array('global-search'),
    ),
    'lightbox' => array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('lightbox'),
      ),
      'top' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('topbar-wrapper'),
        ),
        'top' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('topbar'),
          ),
          'spacer' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('spacer'),
            ),
          ),
          'right' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('top-right'),
            ),
            'close' => array(
              '#type' => 'container',
              'link' => array(
                '#type' => 'link',
                '#href' => '',
                '#attributes' => array(
                  'class' => array('closeme'),
                ),
                '#title' => t('Close'),
              ),
              '#attributes' => array(
                'class' => array('close-lightbox'),
              ),
            ),
          ),
        ),
      ),
      'search' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('search-wrapper'),
        ),
        'searchfield' => array(
          '#type' => 'html_tag',
          '#tag' => 'label',
          '#value' => t('Search field'),
          '#attributes' => array(
            'for' => 'searchfield',
            'class' => array('element-invisible'),
          ),
        ),
        'searchtext' => array(
          '#type' => 'textfield',
          '#value' => check_plain(@$_GET['qq']),
          '#attributes' => array(
            'class' => array('search-field'),
            'name' => 'qq',
            'autocomplete' => 'off',
            'placeholder' => t('Search uib.no'),
            'data-placeholder' => t('Search for person'),
            'id' => 'searchfield',
          ),
        ),
        'submit' => array(
          '#type' => 'submit',
          '#value' => t('Search'),
        ),
      ),
      'results-wrapper' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('results-wrapper'),
        ),
        'results' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('results'),
          ),
          'results-bottom-anchor' => array(
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#value' => '',
            '#attributes' => array(
              'class' => array('results-bottom-anchor'),
            ),
          ),
        ),
        'right' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('right-selector'),
          ),
          'filters' => array(
            '#type' => 'checkboxes',
            '#id' => 'search-filter-checkboxes',
            '#title' => t('Filter on content'),
            '#description' => t('Choose what results to return'),
            '#options' => array(
              'everything' => t('Everything'),
              'news' => t('News'),
              'study' => t('Study-information'),
              'event' => t('Event'),
              'user' => t('Person'),
            ),
            '#default_value' => array(
              'everything'
            ),
            '#attributes' => array(
              'name' => 'uib_search_filters[]',
            ),
          ),
        ),
      ),
    ),
  );
  if (
      in_array('level 1', $user->roles)
      || in_array('admin', $user->roles)
      || $user->uid == 1
  ) {
    $form['lightbox']['search']['boost'] = array(
      '#type' => 'hidden',
      '#value' => 1,
      '#attributes' => array(
        'name' => 'boost',
      ),
    );
  }

  return $form;
}

function uib_search__noscript_form(){
  global $language;
  $action = 'https://www.google.com/search';
  $form=array(
    '#type' => 'form',
    '#name' => 'noscriptform',
    '#action' => $action,
    '#method' => 'get',
    '#id' => 'uib-search-noscript-form',
    '#attributes' => array(
      'name' => 'noscriptform',
    ),
    'link' => array(
      "#markup" => '<input class="search-button" type="submit" value="'
      . t("Search") . '" />',
    ),
    'noscript' => array(
      'site' => array(
        '#type' => 'hidden',
        '#attributes' => array(
          'name' => 'as_sitesearch',
          'value' => 'uib.no',
        ),
      ),
    ),
  );
  return $form;
}

// TODO: This function should be removed when the switch to elasticsearch
// is completed.
function uib_search__form_old($delta = 'global-searchform'){
  global $language;
  $retval=array();
  $retval['subject']=t('Search');
  switch ($delta) {
  case 'global-searchform':
    drupal_add_js(drupal_get_path('module', 'uib_search') . '/js/uib_search.js');
    $action=$GLOBALS['base_path'] . $language->language . "/search";
    $retval['content']=array(
      '#type' => 'container',
      '#weight' => -45,
      '#attributes' => array(
        'class' => array('global-search'),
      ),
      'form' => array(
        '#type' => 'form',
        '#name' => 'noscriptform',
        '#id' => 'uib-search-noscript-form',
        '#action' => 'https://www.google.com/search',
        '#method' => "get",
        '#attributes' => array(
          'name' => 'noscriptform',
        ),
        'link' => array(
          "#markup" => '<input class="search-button" type="submit" value="'
          . t("Search") . '" />',
        ),
        'noscript' => array(
          'site' => array(
            '#type' => 'hidden',
            '#attributes' => array(
              'name' => 'as_sitesearch',
              'value' => 'uib.no',
            ),
          ),
        ),
      ),
      'lightbox-form' => array(
        '#type' => 'form',
        '#name' => 'lbform',
        '#id' => 'uib-search-form',
        '#action' => $action,
        '#method' => "get",
        '#attributes' => array(
          'name' => 'lbform',
        ),
        'lightbox' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('lightbox'),
          ),
          'top' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('topbar-wrapper'),
            ),
            'top' => array(
              '#type' => 'container',
              '#attributes' => array(
                'class' => array('topbar'),
              ),
              'typeswitcher' => array(
                '#type' => 'checkbox',
                '#value' => 'user',
                '#title' => t('Search for person'),
                '#default_value' => 'user',
                '#id' => 'switch_type_button',
                '#attributes' => array(
                  'name' => 'searchtype',
                  'data-toggle-title' => t('Back to search'),
                  'data-title' => t('Search for person'),
                ),
              ),
              'right' => array(
                '#type' => 'container',
                '#attributes' => array(
                  'class' => array('top-right'),
                ),
                'close' => array(
                  '#type' => 'container',
                  'link' => array(
                    '#type' => 'link',
                    '#href' => '',
                    '#attributes' => array(
                      'class' => 'closeme',
                    ),
                    '#title' => t('Close'),
                  ),
                  '#attributes' => array(
                    'class' => array('close-lightbox'),
                  ),
                ),
              ),
            ),
          ),
          'search' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('search-wrapper'),
            ),
            'searchfield' => array(
              '#type' => 'html_tag',
              '#tag' => 'label',
              '#value' => t('Search field'),
              '#attributes' => array(
                'for' => 'searchfield',
                'class' => 'element-invisible',
              ),
            ),
            'searchtext' => array(
              '#type' => 'textfield',
              '#value' => check_plain(@$_GET['qq']),
              '#attributes' => array(
                'class' => array('search-field'),
                'name' => 'qq',
                'autocomplete' => 'off',
                'placeholder' => t('Search uib.no'),
                'data-placeholder' => t('Search for person'),
                'id' => 'searchfield',
              ),
            ),
            'submit' => array(
              '#type' => 'submit',
              '#value' => t('Search'),
            ),
          ),
          'results' => array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => 'results',
            ),
          ),
          'results-bottom-anchor' => array(
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#value' => '',
            '#attributes' => array(
              'class' => 'results-bottom-anchor',
            ),
          ),
        ),
      ),
    );
    break;
  }
  return $retval;
}

/**
 * Implements hook_user_update().
 *
 * hook_user_update is executed after user info is inserted in the database.
 *
 */
function uib_search_user_update(&$edit, $account, $category) {
  uib_search__index_entity(entity_metadata_wrapper('user', $account));
}

/**
 * Implements hook_user_insert().
 *
 * hook_user_insert is executed after user is created
 */
function uib_search_user_insert(&$edit, $account, $category) {
  uib_search__index_entity(entity_metadata_wrapper('user', $account));
}

/**
 * Implements hook_user_delete().
 *
 * hook_user_delete executed before user is deleted
 */
function uib_search_user_delete($account) {
  uib_search__index_entity(entity_metadata_wrapper('user', $account), TRUE);
}

/**
 * Implements hook_node_update().
 *
 */
function uib_search_node_update($node) {
  uib_search__index_entity(entity_metadata_wrapper('node', $node));
}

/**
 * Implements hook_node_insert().
 *
 */
function uib_search_node_insert($node) {
  uib_search__index_entity(entity_metadata_wrapper('node', $node));
}

/**
 * Implements hook_node_delete().
 *
 */
function uib_search_node_delete($node) {
  uib_search__index_entity(entity_metadata_wrapper('node', $node), TRUE);
}

/**
 * Execute a drupal http request against the currently set elastic search
 * engine, providing authentication. Returns the same object returned by
 * drupal_http_request().
 */
function uib_search__run_elastic_request(
  $url = '',
  $data,
  $method = 'POST',
  $run_as_administrator = false,
  $timeout = 1
)
{
  $user = uib_search__get_setup('user', $run_as_administrator);
  $password = uib_search__get_setup('password', $run_as_administrator);
  if (!uib_search__check_elastic_settings($run_as_administrator)) {
    $admin = $run_as_administrator ? 'Administrator s' : 'S';
    uibx_log($admin . 'ettings for elasticsearch is missing', 'error');
    return;
  }
  $token = "{$user}:{$password}";
  $token = base64_encode($token);

  return drupal_http_request($url,
    array(
      'headers' => array(
        'Authorization' => "Basic {$token}"
      ),
      'method' => $method,
      'data' => $data,
      'timeout' => $timeout,
    )
  );
}

/**
 * Get a setup property for elasticsearch. This function expects the
 * variables uib_elasticsearch_useindex and uib_elasticsearch_useindex_admin
 * to be set. 'index1' is used as a default if uib_elasticsearch_useindex
 * is not set. Setup is fetched from the variable uib_elasticsearch, and
 * is on the form below.
 * Read only:
 * $conf['uib_elasticsearch'] = array(
 *   'index1' => array(
 *     'url' => 'https://api.search.uib.no',
 *     'user' => 'w3_user',
 *     'password' => '**********',
 *     'index' => 'w3',
 *   ),
 *   'index2' => array(
 *     'url' => 'https://api.test.search.uib.no',
 *     'user' => 'w3_2_user',
 *     'password' => '**********',
 *     'index' => 'w3_2',
 *   )
 * );
 *
 * Admin:
 * $conf['uib_elasticsearch_admin'] = array(
 *   'index1' => array(
 *     'url' => 'https://api.search.uib.no',
 *     'user' => 'w3_admin',
 *     'password' => '**********',
 *     'index' => 'w3',
 *   ),
 *   'index2' => array(
 *     'url' => 'https://api.test.search.uib.no',
 *     'user' => 'w3_2_admin',
 *     'password' => '**********',
 *     'index' => 'w3_2',
 *   )
 * );
 * The variables uib_elasticsearch_useindex and uib_elasticsearch_useindex_admin
 * are used to set which index is used.
 *
 * Indexes can be setup on https://token.test.search.uib.no (testing) or
 * https://token.search.uib.no (prod). See the docs for more info.
 * @param string $name Setup type, can be user, password, url or index.
 * @param boolean $admin Set to TRUE for the admin setup
 */
function uib_search__get_setup($name, $admin = FALSE) {
  if (!in_array($name, array('user', 'password', 'url', 'index'))) {
    return;
  }
  $a = $admin ? '_admin' : '';
  $setup = variable_get('uib_elasticsearch' . $a);
  $use = variable_get('uib_elasticsearch_useindex' . $a, 'index1');
  if (!$setup || !array_key_exists($use, $setup)) {
    return;
  }
  return $setup[$use][$name];
}

/**
 * Get object to store in the elastic index for the given user
 */
function uib_search__get_elastic_user_array($wrapped_entity) {

  //General fields
  $output = @array(
    'name' => $wrapped_entity->name->value(),
    'mail' => $wrapped_entity->mail->value(),
    'uid' => $wrapped_entity->uid->value(),
    'first_name' => $wrapped_entity->field_uib_first_name->value() ?:
      $wrapped_entity->field_uib_user_alt_firstname->value(),
    'last_name' => $wrapped_entity->field_uib_last_name->value() ?:
      $wrapped_entity->field_uib_user_alt_lastname->value(),
    'phone' => implode(', ', $wrapped_entity->field_uib_phone->value()),
    'social_media' => implode(', ', $wrapped_entity->field_uib_user_social_media->value()),
    'slug' => $wrapped_entity->field_uib_slug->value(),
  );
  // User picture TODO takes too long in stage_file_proxy setups
  if (0 && @$wrapped_entity->picture->uri) {
    $output['picture'] = image_style_url(
      'user_thumbnail',
      $wrapped_entity->picture->uri
    );
  }

  $output['generic'] = array();
  /*
   * Language dependent fields
   */
  $languages = language_list();
  foreach ($languages as $language) {
    $lang = "_{$language->language}";
    $wrapped_entity->language($language->language);
    // Resolving area from OU
    $ou = $wrapped_entity->field_uib_user_ou->getIdentifier();
    $area = uib_user__ou_area($ou, $output['uid'], $language->language);
    if ($area) {
      $area = entity_metadata_wrapper(
        'node',
        $area,
        array('langcode', $language->language)
      );
      $output['ou' . $lang] = $area->title->value();
    }
    else if ($ou) {
      $area = entity_metadata_wrapper(
        'node',
        $ou,
        array('langcode', $language->language)
      );
      if ($area) {
        $output['ou' . $lang] = uib_search__null_if_empty(implode(
          ', ',
          (array)$area->field_uib_ou_title->value()
        ));
      }
    }
    //position
    $output['position' . $lang] =
      uib_search__null_if_empty($wrapped_entity->field_uib_position->value());
    //alt position
    $output['alt_position' . $lang] = uib_search__null_if_empty(implode(
      ', ',
      (array)$wrapped_entity->field_uib_user_alt_position->value()
    ));
    //search manual boost
    $output['search_manual_boost'] = uib_search__null_if_empty(
      $wrapped_entity->field_uib_search_manual_boost->value()
    );
    if (!$output['search_manual_boost']) {
      $output['search_manual_boost'] = 1;
    }

    $competence = $wrapped_entity->field_uib_user_competence->value();
    if (is_array($competence)) {
      foreach ($competence as &$v) {
        $v = $v->name;
      }
    }
    $output['competence' . $lang] = implode((array)$competence, ', ');

    $url = preg_replace(
      '/http(s?):\/\/w3\.uib\.no\/?/',
      'http\1://www.uib.no/',
      url('user/' . $output['uid'],
      array(
        'absolute' => TRUE,
        'language' => $language,
      )
    ));
    $output['link' . $lang] = $url;

    // Some generic fields
    $output['generic']['title' . $lang] = $output['first_name']
      . ' ' . $output['last_name'];
    $output['generic']['link' . $lang] = $output['link' . $lang];
    $output['generic']['excerpt' . $lang] = array();
    if (@$output['ou' . $lang]) {
      $output['generic']['excerpt' . $lang][] =
        t('Organisation') . ': ' . $output['ou' . $lang];
    }
    if (@$output['position' . $lang]) {
      $output['generic']['excerpt' . $lang][] =
        t('Position') . ': ' . $output['position' . $lang];
    }
    if (@$output['phone']) {
      $output['generic']['excerpt' . $lang][] =
        t('Phone nr') . ': ' . $output['phone'];
    }
    if (@$output['mail']) {
      $output['generic']['excerpt' . $lang][] =
        t('Email') . ': ' . $output['mail'];
    }
    $output['generic']['excerpt' . $lang] =
      implode(', ', $output['generic']['excerpt' . $lang]);

    if ($lang == '_nb') {
      $output['generic']['title'] = $output['generic']['title_nb'];
      $output['generic']['link'] = $output['generic']['link_nb'];
      $output['generic']['excerpt'] = $output['generic']['excerpt_nb'];
    }
  }

  $output['generic']['image'] = @$output['picture'] ;
  return $output;
}

/**
 * Check if elasticsearch settings are setup
 *
 * @param boolean $admin Set to true to check if admin settings are set.
 * @return boolean Returns true if everything is set up, otherwise false.
 *
 */
function uib_search__check_elastic_settings($admin = false) {
  if (
    uib_search__get_setup('url', $admin) &&
    uib_search__get_setup('index', $admin) &&
    uib_search__get_setup('user', $admin) &&
    uib_search__get_setup('password', $admin)
  ) {
    return true;
  }
  return false;
}

/**
 * Index a content item in the database. This implementation updates the search
 * index in elasticsearch. Node of a type listed in the drupal variable
 * uib_search_nodetype_noindex will not be indexed.
 *
 * @param $wrapped_entity entity object
 * @param $delete Set to TRUE to delete the entity in question. Defaults to
 * FALSE
 */
function uib_search__index_entity($wrapped_entity, $delete = FALSE) {
  $ignore = variable_get('uib_search_nodetype_noindex', array());
  if (in_array(trim($wrapped_entity->getBundle()), $ignore)) {
    uibx_log(
      'Entity ignored (rules fetched from variable uib_search_nodetype_noindex)',
      'notice'
    );
    return;
  }

  $id = $wrapped_entity->getIdentifier();
  $entity_type = $wrapped_entity->info();
  $entity_type = $entity_type['type'];
  $index = uib_search__get_setup('index', TRUE);
  $url = rtrim(uib_search__get_setup('url', TRUE), '/');
  if ($wrapped_entity->status->value() == 0) {
    $delete = TRUE;
  }
  if ($delete) {
    // Delete doc from users in search index, and return
    if ($wrapped_entity->getBundle() == 'uib_study') {
      $type = 'study';
    }
    else {
      $type = $entity_type;
    }

    $stat = uib_search__run_elastic_request(
      "{$url}/{$index}/{$type}/{$id}",
      NULL,
      'DELETE',
      TRUE
    );
    uib_search__report_status($stat, $entity_type, $id, 'delete');
    return;
  }

  $url = "{$url}/{$index}/{$entity_type}/$id";
  $output = uib_search__get_elastic_entity_array($wrapped_entity);
  $status = uib_search__run_elastic_request(
    $url,
    json_encode($output),
    'PUT',
    TRUE
  );
  uib_search__report_status($status, $entity_type, $id);
  return $output;
}

function uib_search__get_elastic_entity_array($wrapped_entity) {
  $type = $wrapped_entity->info();
  $type = $type['type'];
  if ($wrapped_entity->status->value() != 1) {
    return NULL;
  }

  // Handling users
  if ($type == 'user') {
    return uib_search__get_elastic_user_array($wrapped_entity);
  }
  else if ($type != 'node') {
    uibx_log("Handler for entity of type {$type} not implemented", 'warning');
    return NULL;
  }

  // Only some fields are indexed
  $fields = array(
    'title',
    'lead',
    'teaser',
    'text',
    'text2',
    'primary_text',
    'secondary_text',
    'market_text',
    'article_type',
    'promote',
    'url',
    'type',
    'language',
    'study_code',
    'study_title',
    'search_description',
    'search_manual_boost',
    'published_timestamp',
    'changed',
  );
  $usefields = variable_get('uib_search_nodefields', $fields);

  $field_prefix = 'field_uib';
  $output = array();
  $output['published_timestamp'] = $wrapped_entity->created->value();
  foreach ($wrapped_entity as $k => $v){
    $key = str_replace($field_prefix . '_', '', $k);
    if (!in_array($key, $usefields)) {
      // Fields not in $usefields are ignored
      continue;
    }

    switch ($key) {
      case 'search_manual_boost':
        $output[$key] = uib_search__null_if_empty($v->value());
        if ($output[$key] == NULL) {
          $output[$key] = 1;
        }
        break;
      case 'text':
      case 'text2':
      case 'primary_text':
      case 'secondary_text':
      case 'market_text':
        $tmp = $v->value();
        if (array_key_exists('safe_value', (array)$tmp)) {
          $tmp = $tmp['safe_value'];
        }
        else if (array_key_exists('value', (array)$tmp)) {
          $tmp = $tmp['value'];
        }
        $tmp = uib_search__null_if_empty($tmp);
        $tmp = uib_search__strip_html($tmp);
        $output[$key] = uib_search__null_if_empty($tmp);
        break;
      case 'url':
        $ll = language_list();
        $options =  array('absolute' => TRUE);
        if (array_key_exists($wrapped_entity->language->value(), $ll)) {
          $lang = $ll[$wrapped_entity->language->value()];
          $options['language'] = $lang;
        }

        $output[$key] = url(
          "{$type}/{$wrapped_entity->getIdentifier()}",
          $options
        );
        break;
      case 'published_timestamp':
        if (uib_search__null_if_empty($v->value())) {
          $output[$key] = uib_search__null_if_empty($v->value());
        }
        break;
      default:
        $output[$key] = uib_search__null_if_empty($v->value());
        break;
    }
  }
  if ($wrapped_entity->getBundle() == 'uib_study') {
    $output['title'] = uib_search__null_if_empty($wrapped_entity->field_uib_study_title->value());
  }
  unset($wrapped_entity);
  if (@$output['article_type']) {
    $type .= " - " . $output['article_type'];
  }
  $output = array('w3' => $output);
  $output['generic'] = array(
    'title' => $output['w3']['title'],
    'link' => $output['w3']['url'],
    'excerpt' =>
      @$output['w3']['search_description']
      ?: @$output['w3']['teaser']
      ?: @$output['w3']['lead']
      ?: substr(strip_tags(@$output['w3']['text']), 0, 160)
      ?: substr(strip_tags(@$output['w3']['primary_text']), 0, 160)
      ?: substr(strip_tags(@$output['w3']['text2']), 0, 160)
      ?: substr(strip_tags(@$output['w3']['secondary_text']), 0, 160)
      ?: NULL,
    '_searchable_text' => uib_search__concat_text(
      $output['w3'],
      array(
        'search_description',
        'title',
        'lead',
        'teaser',
        'text',
        'text2',
        'primary_text',
        'secondary_text',
        'market_text',
      )
    ),
  );
  return $output;
}

/**
 * Returns NULL for empty values (strings, empty arrays etc.)
 *
 * @param mixed $val
 */
function uib_search__null_if_empty($val) {
  if (is_array($val) || is_object($val)) {
    $val = (array)$val;
    if (count($val) == 0) {
      $val = NULL;
    }
    else {
      foreach ($val as $k => &$v) {
        $v = uib_search__null_if_empty($v);
        if (is_null($v)) {
          unset($val[$k]);
        }
      }
    }
  }
  else {
    if (!trim($val)) {
      $val = NULL;
    }
  }
  return $val;
}

function uib_search__strip_html($val) {
  if (!trim($val)) {
    return NULL;
  }
  libxml_use_internal_errors(true);
  $doc = new DOMDocument();
  $xml = '<?xml encoding="utf-8" ?>' . $val;
  if (!$doc->loadHTML($xml)) {
    foreach (libxml_get_errors() as $error) {
      $level = 'notice';
      switch ($error->level) {
        case LIBXML_ERR_WARNING:
          $level = 'warning';
          break;

        case LIBXML_ERR_ERROR:
          $level = 'error';
          break;

        case LIBXML_ERR_WARNING:
          $level = 'warning';
          break;
      }
      uibx_log('Xml - error: ' . $error->message, $level);
    }
    libxml_clear_errors();
  }
  uib_search__remove_tag('script', $doc);
  uib_search__remove_tag('style', $doc);
  $retval = $doc->saveHTML();

  $retval = preg_replace(
    array(
      '/<\/p *>/i',
      '/<br *\/?>/i',
      '/<\/li *>/i',
      '/<\/div *>/i',
      '/<\/h[0-9] *>/i',
    ),
    "$0\n",
    $retval
  );
  $retval = strip_tags($retval);
  $retval = preg_replace('/[\n\r]+/',"\n\n", $retval);
  $retval = html_entity_decode($retval, ENT_QUOTES, 'UTF-8');
  $retval = trim($retval);
  return $retval;
}

function uib_search__report_status($status, $type, $id, $action = 'update') {
  if (!$status) {
    uibx_log('HTTP-call failed');
  }
  else if (in_array($status->code, array(200))) {
    uibx_log("Successful $action of elastic $type id #$id", 'notice');
  }
  else if (in_array($status->code, array(201))) {
    $action = $action == 'update' ? 'creation' : $action;
    uibx_log("Successful $action of elastic $type id #$id", 'notice');
  }
  else if ($status->code == 404) {
    uibx_log(
      ucwords($type) . " id #" . $id . ' was not found in the elastic index',
      'notice'
    );
  }
  else {
    uibx_log(
      ucfirst($action) . " elastic $type id {$id} failed: {$status->code} - "
        . "{$status->status_message}",
      'error'
    );
  }
}

function uib_search__remove_tag($tag, $dom) {
    $list = $dom->getElementsByTagName($tag);
    while ( $node = $list->item(0) ) {
        $node->parentNode->removeChild($node);
    }
}

/**
 * Concatenate (possibly empty) arguments in an array to a comma separated
 * string.
 * @param array $array The array to handle number of string arguments
 * @param array $keys Array of keys
 * @return string The concatenated string.
 */
function uib_search__concat_text($array, $keys) {
  $output = '';
  foreach ($keys as $key) {
    if (array_key_exists($key, $array)) {
      $output .= "{$array[$key]}, ";
    }
  }
  return trim($output, ', ');
}

/**
 * Get an array with data from FS for the given nid, suitable for inserting
 * into elasticsearch.
 *
 * @param int $nid Node ID for the node to return data from.
 * @return an array with structured data from FS. Returns an empty array
 * if no data is found.
 *
 */
function uib_search__get_elastic_study_array($wrapped_entity) {
  if (!isset($wrapped_entity->field_uib_study_type)) {
    return NULL;
  }
  $study_type = $wrapped_entity->field_uib_study_type->value();
  $render = uib_search__get_render_json($wrapped_entity);
  $output = array(
    'fs' => array(
      'text' => $render['text'],
      'study_type' => $study_type,
    ),
    'generic' => array(
      'excerpt' => $render['excerpt'],
      '_searchable_text' =>  $render['_searchable_text'],
    )
  );

  return $output;
}

function uib_search__index_study($wrapped_entity) {
  $index = uib_search__get_setup('index', TRUE);
  $url = rtrim(uib_search__get_setup('url', TRUE), '/');
  $type = 'study';
  // Loading data from FS
  $fsdata = uib_search__get_elastic_study_array($wrapped_entity);
  // Loading data from w3 as well
  $entitydata = uib_search__get_elastic_entity_array($wrapped_entity);
  $data = uib_search__merge_study_arrays($entitydata, $fsdata);
  $url = "{$url}/{$index}/{$type}/" . $wrapped_entity->getIdentifier();
  $status = uib_search__run_elastic_request(
    $url,
    json_encode($data),
    'PUT',
    true
  );
  uib_search__report_status(
    $status,
    "node (study {$data['study_type']})",
    $wrapped_entity->getIdentifier()
  );
  return $data;
}

function uib_search__split_key($key) {
  $ke = explode(':', $key);
  $key = strtolower($ke[0]);
  $lang = '';
  $sem = '';
  if (count($ke) > 1) {
    $lang = ':' . $ke[1];
  }
  if (count($ke) > 2) {
    $sem = $ke[2];
  }
  return array($key, $lang, $sem);
}

function uib_search__get_render_json($entity) {
  $nid = $entity->nid->value();

  $courses = uib_study__fspres_get_node_json($nid, 'render.json');

  // Ignore some types
  $ignore_types = array(
    'B_RE_SPRAK',
    'M_RE_SPRAK',
  );

  // make a decent array
  $output = array();
  $output['_searchable_text'] = '';
  $output['text'] = '';
  if (!empty($courses)) {
    $excerpt = FALSE;
    foreach ($courses  as $course) {
      if (array_key_exists('#title', $course)) {
        $output['_searchable_text'] .= "{$course['#title']}\n\n";
      }
      foreach ($course['#items'] as $item) {
        if (in_array($item['#type'], $ignore_types)) {
          continue;
        }
        if (array_key_exists('#title', $item)) {
          $output['_searchable_text'] .= $item['#title'] . "\n\n";
          $output['text'] .= $item['#title'] . "\n\n";
        }
        if (array_key_exists('#text', $item)) {
          $output['_searchable_text'] .= $item['#text'] . "\n\n";
          $output['text'] .= $item['#text'] . "\n\n";
          if (!$excerpt) {
            $output['excerpt'] = uib_search__strip_html($item['#text']);
            $excerpt = TRUE;
          }
        }
      }
    }
    // strip HTML
    $output['_searchable_text'] = uib_search__strip_html($output['_searchable_text']);
    $output['text'] = uib_search__strip_html($output['text']);

  }
  if (!array_key_exists('excerpt', $output)) {
    $output['excerpt'] = '';
  }
  $output['excerpt'] =
    preg_replace('/\s+?(\S+)?$/', '...', substr($output['excerpt'], 0, 350));
  return $output;
}

/**
 * Merge study content from W3 and from FS into an array suitable for elastic.
 * @param array $nodearray Array with W3-data for study node
 * @param array $studyarray Array with FS-data for study
 * @return array Merged array for elastic search.
 */
function uib_search__merge_study_arrays($nodearray, $studyarray) {
  $nodearray['generic']['_searchable_text'] .= "\n\n" . $studyarray['generic']['_searchable_text'];
  $nodearray['generic']['_searchable_text'] = trim($nodearray['generic']['_searchable_text']);
  $nodearray['generic']['excerpt'] .= "\n\n" . $studyarray['generic']['excerpt'];
  $nodearray['generic']['excerpt'] = trim($nodearray['generic']['excerpt']);
  unset($studyarray['generic']);
  $nodearray = array_merge($nodearray, $studyarray);
  return $nodearray;
}

/**
 * Increase the search boost for an item manually. This function sets the boost
 * value for individual entities in the database. How this value is used is up
 * to the search implementation to decide.
 *
 * @param string $dir Direction of boost. Can be up or down.
 * @param string $type Entity type, either node or user.
 * @param int $id Entity id to boost
 * @return void The function exits drupal, echoing the current boost value.
 */
function uib_search__boost_item_search($dir, $type, $id) {
  global $user;
  if (
    !(
      in_array('level 1', $user->roles)
      || in_array('admin', $user->roles)
      || $user->uid == 1
      )
    ) {
    // User does not have role admin or level 1
    return;
  }
  if (!$id) {
    // no id is set
    return;
  }
  $o = null;
  switch ($type) {
    case 'node':
      $o = node_load($id);
      break;
    case 'user':
      $o = user_load($id);
      break;
  }
  if (!$o) {
    // entity not found
    return;
  }
  $old  = isset($o->field_uib_search_manual_boost['und'][0]['value'])
    ? $o->field_uib_search_manual_boost['und'][0]['value']
    : 1;
  $max = variable_get('uib_search_boost_max', 10);
  $min = variable_get('uib_search_boost_min', pow(.5,10));
  switch ($dir) {
    case 'up':
      $new = $old < 1 ? 1 : $old + 1;
      break;
    case 'down':
      $new = $old > 1 ? $old - 1: $old / 2;
      break;
  }
  $new = $new > $max ? $max : $new;
  $new = $new < $min ? $min : $new;
  $o->field_uib_search_manual_boost['und'][0]['value'] = $new;
  call_user_func($type . '_save', $o);
  drupal_json_output($new);
  drupal_exit();
}
