<?php

include_once 'uib_calendar2.features.inc';

/**
 * Implements hook_menu().
 */
function uib_calendar2_menu() {
  $items["calendar2"] = array(
    'page callback' => 'uib_calendar2__index_page',
    'access callback' => TRUE,
  );
  $items["node/%/calendar2"] = array(
    'page callback' => 'uib_calendar2__index_page',
    'access callback' => TRUE,
    'page arguments' => array(1),
  );
  $items['autocomplete/calendar2/area'] = array(
    'title' => 'Autocomplete for area',
    'page callback' => 'uib_calendar2_form__autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function uib_calendar2_block_info() {
  return array(
    'cal2form' => array(
      'info' => t('Calendar2s form'),
      'status' => TRUE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function uib_calendar2_block_view($delta='') {
  $block = array();
  if ($delta == 'cal2form') {
    $block['content'] = array(
      'form' => drupal_get_form('uib_calendar2_form'),
      'more' => array('#markup' => '<br><hr>'),
    );
  }
  return $block;
}

/**
 * Generates the render array for the top level calendar page.
 */
function uib_calendar2__index_page($area_nid=NULL) {
  $page = array();

  $form = drupal_get_form('uib_calendar2_form');
  $event_types = $form['event']['type']['#value'];
  $dayOfYear = $form['datepicker']['#value']['date'];
  $langVal = $form['language']['#value'];
  $area = (isset($form['area']['#value']) && $form['area']['#value']!='') ? $form['area']['#value'] : 'UiB';
  $area_code = 0;
  if ($area != 'UiB') {
    $area_explode = explode(" : (", $area);
    $area = $area_explode[0];
    $area_code = str_replace(")","",$area_explode[1]);
  }

  elseif ($area_nid) {
    $area_code = $area_nid;
    $area_node = node_load($area_code);
    if (!$area_node || $area_node->type != 'area') {
      return MENU_NOT_FOUND;
    }
    $area = $area_node->title;
  }


  $events = '';
  $i=1;
  foreach ($event_types as $event) {
    if ($i == count($event_types) && count($event_types) != 1 && $i != 1) $events .= t("and")." ";
    $events .= t($event);
    if ($i != count($event_types)) $events .= ", ";
    $i++;
  }

  $page['header'] = array('#markup' => "<h2>" . t("Calendar for !area",array('!area' => $area)) . "</h2>");
  $page['ingress'] = array('#markup' => "<p>" . t("Selection: !events from ", array('!events' => $events)) . format_date(strtotime($dayOfYear),'medium') . "</p>");

  $nodes = get_event_nodes($event_types, $dayOfYear, $langVal, 0, 0, $area_code);
  $printDate = "";
  $lastItemPrintTime = "";
  $eventsarray;
  $datesarray;

  foreach ($nodes as $node) {
    $timestamp = strtotime($node->date1);
    $pretty_date = format_date($timestamp, 'day_and_month');

    $event = array();
    $event['nid'] = $node->nid;
    $event['content'] = array('#markup' => '<li>' . format_date($timestamp, 'time') . ' : ' . l($node->title, "node/$node->nid") . '</li>');

    $eventsarray[substr($node->date1,0,10)]['event'][] = $event;

    if ($pretty_date != $printDate) {
      $printDate = $pretty_date;
      $datesarray[] = substr($node->date1,0,10);
    }
  }

  if ($lastItemPrintTime != "") {
    $nodesLastDay = get_event_nodes($event_types, $lastItemPrintTime, $langVal, 0, 1, $area_code);
    foreach ($nodesLastDay as $node) {
      $timestamp = strtotime($node->date1);
      $event = array();
      $event['nid'] = $node->nid;
      $event['content'] = array('#markup' => '<li>' . format_date($timestamp, 'time') . ' : ' . l($node->title, "node/$node->nid") . '</li>');

      $eventsarray[substr($node->date1,0,10)]['event'][] = $event;

    }
  }

  $deadlines = db_query("SELECT n.nid, n.title, dl.field_uib_deadline_value as deadline FROM node n, field_data_field_uib_deadline dl WHERE :enddate >= substring(cast (field_uib_deadline_value as text) from 1 for 10) AND substring(cast (field_uib_deadline_value as text) from 1 for 10) >= :startdate AND n.nid=dl.entity_id;", array(':enddate'=>end($datesarray), ':startdate'=>$dayOfYear))->fetchAll();

  foreach ($deadlines as $deadline) {
    $event = array();
    $event['nid'] = $deadline->nid;
    $event['content'] = array('#markup' => '<li>' . format_date(strtotime($deadline->deadline), 'time') . ' : ' . l($deadline->title, "node/$deadline->nid") . '</li>');
    $eventsarray[substr($deadline->deadline,0,10)]['deadline'][] = $event;
    if(!in_array(substr($deadline->deadline,0,10),$datesarray)) $datesarray[] = substr($deadline->deadline,0,10);
  }

  sort($datesarray);
  foreach ($datesarray as $arr) {
    $page[$arr] = array('#markup' => '<h2 style=clear:both>' . format_date(strtotime($arr), 'day_and_month') . '</h2>');
    if(isset($eventsarray[$arr]['event'])) {
      foreach ($eventsarray[$arr]['event'] as $event) {
        $page['event:'.$event['nid']] = $event['content'];
      }
    }
    if (isset($eventsarray[$arr]['deadline'])) {
      $page['deadlines'.$arr] = array('#markup' => '<h4 style=clear:both>' . t('Deadlines:') . '</h4>');
      foreach ($eventsarray[$arr]['deadline'] as $deadline) {
        $page['deadline:'.$deadline['nid']] = $deadline['content'];
      }
    }
  }
  $page['multiday'] = array('#markup' =>
    '<h2 style=clear:both>'
    . t('Multiday events running ')
    . format_date(strtotime($dayOfYear), 'day_and_month')
    . '</h2>');
  $nodesMulti = get_event_nodes($event_types, $dayOfYear, $langVal, 1, 0, $area_code);
  foreach ($nodesMulti as $node) {
    $page[$node->nid] = array('#markup' => '<li>' . l($node->title, "node/$node->nid") . '</li>');
  }
  return $page;
}

function uib_calendar2_form__autocomplete($string='') {
  $matches = array();
  $low_string = strtolower(check_plain($string));
  $options[":string"] = $string;
  $sql = "SELECT DISTINCT(field_uib_ou_title_value) AS area, field_uib_ou_target_id as code FROM field_data_field_uib_ou_title out, field_data_field_uib_ou ou WHERE out.entity_id=ou.field_uib_ou_target_id AND lower(field_uib_ou_title_value) like '%' || :string || '%'";
  $result = db_query($sql, $options)->fetchAll();


  foreach ($result as $row) {
    $matches[$row->area." : (".$row->code.")"] = check_plain($row->area);
  }

  // Return the result to the form in json
  drupal_json_output($matches);
}

/**
 * Implements hook_form().
 */
function uib_calendar2_form($form, &$form_state) {
  $area = variable_get('area');
  if (isset($_GET['area']))$area = check_plain($_GET['area']);
  $form['#method'] = array(
    '#type' => 'POST'
  );
  $form['datepicker'] = array(
    '#type' => 'datepicker',
    '#date_format' => 'Y-m-d',
    '#default_value' => date('Y-m-d'),
  );
  if (arg(0) != 'node') {
    $form['area'] = array(
      '#title' => t('Area'),
      '#type' => 'textfield',
      '#autocomplete_path' => 'autocomplete/calendar2/area',
    );
  }
  $form['language'] = array(
    '#type' => 'radios',
    '#title' => 'Language',
    '#default_value' => '2',
    '#options' => array(t('Any'),t('English'),t('Norwegian')),
  );
  $form['event']['type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Event types'),
    '#options' => array(
      'any' => t('Any'),
      'book_release' => t('Book Release'),
      'conference' => t('Conference'),
      'consert' => t('Consert'),
      'course' => t('Course'),
      'deadline' => t('Deadline'),
      'disputation' => t('Disputation'),
      'event' => t('Event'),
      'exhibition' => t('Exhibition'),
      'grant' => t('Grant'),
      'guest_lecturer' => t('Guest Lecturer'),
      'guided_tour' => t('Guided tour'),
      'lecture' => t('Lecture'),
      'meeting' => t('Meeting'),
      'presentation' => t('Presentation'),
      'seminar' => t('Seminar'),
      'trial_lecture' => t('Trial lecture'),
      'workshop' => t('Workshop')
    ),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Implements hook_form_submit().
 */
function uib_calendar2_form_submit($form, &$form_state){
  $form_state['rebuild'] = TRUE;
  return $form;
}

/**
 * Implements hook_form_validate().
 */
function uib_calendar2_form_validate($form, &$form_state) {
  // not implemented
}

function get_event_nodes($event_types, $date, $language, $multidayevent, $lastday, $area_code=0) {
  $sqlOptions = array();
  $day_not = "";
  if ($multidayevent)
    $day_not = "NOT";

  $langVal = "nb";
  if (is_numeric($language) && $language==1) {
    $langVal = "en";
  }

  $sql = "SELECT n.title,n.nid,field_uib_date_value as date1, field_uib_date_value2 as date2, dl.field_uib_deadline_value as deadline
          FROM node n
          JOIN field_data_field_uib_article_type at ON (at.entity_id = n.nid AND field_uib_article_type_value like 'event')
          JOIN field_data_field_uib_date d ON d.entity_id = n.nid
          JOIN field_data_field_uib_event_type et ON et.entity_id = n.nid
          LEFT OUTER JOIN field_data_field_uib_deadline dl ON dl.entity_id = n.nid
          WHERE substring(cast (field_uib_date_value as text) from 1 for 10) $day_not LIKE substring(cast (field_uib_date_value2 as text) from 1 for 10)";

  if ($language != 0) {
    $sql .= " AND n.language like :lang ";
    $sqlOptions[":lang"] = $langVal;
  }

  $sqlOptions[":day"] = substr($date,0,10);
  if (!$multidayevent && !$lastday) {
    $sql .= " AND d.field_uib_date_value >= :day ";
  }
  elseif ($multidayevent && !$lastday) {
    $sql .= " AND d.field_uib_date_value2 >= :day AND :day >= d.field_uib_date_value ";
  }
  elseif (!$multidayevent && $lastday) {
    $sql .= " AND substring(cast (field_uib_date_value as text) from 1 for 10) = :day AND field_uib_date_value > :lastPrintTime ";
    $sqlOptions[":lastPrintTime"] = $date;
  }

  if (!empty($event_types) && !in_array("any", $event_types)) {
    $sql .= " AND et.field_uib_event_type_value IN (:eventtypes)";
    $sqlOptions[":eventtypes"] = array_values($event_types);
  }

  if ($multidayevent) {
    $sql .= " ORDER BY field_uib_date_value2 ASC";
  }
  else {
    $sql .= " ORDER BY field_uib_date_value ASC LIMIT 20";
  }

  return db_query($sql, $sqlOptions)->fetchAll();
}
