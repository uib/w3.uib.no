<?php
/**
 * @file
 * Module file for uib_urlfilter
 */

/**
 * Implements hook_filter_info().
 *
 */
function uib_filter_filter_info() {
  $filters['filter_uib_markup'] = array(
    'title' => t('Expand UiB markup'),
    'description' => t('Expands strings like (% cmd : parameter %) to something interesting'),
    'process callback' => 'uib_filter__process',
  );
  return $filters;
}

/**
 * filter process callback
 *
 * Look for strings on the form "(* cmd : ... *) in the text and expand them.
 * The set of commands understod will evolve as we see fit.
 *
 */
function uib_filter__process($text, $filter) {
  return preg_replace_callback('/\(\*\s*(\w+)\s*(?::(.*?))?\*\)/',
    function ($matches) {
      if (count($matches) == 3) {
        $arg = $matches[2];
        $arg = str_replace("&nbsp;", "", $arg);
        $arg = trim($arg);
      }
      else {
        $arg = FALSE;
      }
      //return check_plain($matches[1] . "[[$arg]]\n");
      switch ($matches[1]) {
      case 'today':
        return date($arg ? $arg : 'Y-m-d');
      case 'user':
        if ($arg) {
          $u = user_load_by_name($arg);
          if ($u && $u->status) {
            return l(
              check_plain($u->field_uib_first_name['und'][0]['value'] . ' ' .
                          $u->field_uib_last_name['und'][0]['value']
              ),
              'user/' . $u->uid
            );
          }
          else {
            return t('user') . ' ' . check_plain($arg);
          }
        }
        break;
      case 'node':
        if ($arg && is_numeric($arg)) {
          /// Can't use node_load here since we might recurse if node_load triggers this filter
          $node_result = db_query('SELECT nid, title FROM {node} WHERE nid = :nid', array(':nid' => $arg));
          foreach ($node_result as $node) {
            return l($node->title, 'node/' . $node->nid);
          }
        }
        break;
      case 'study':
        if ($arg) {
          return uib_study__study_link($arg, '<title>');
        }
        break;
      case 'books':
        if ($arg) {
          return '<div class="ltfl_bookdisplay_widget" id="ltfl_widget_' . $arg . '"></div>
<script type="text/javascript" src="https://ltfl.librarything.com/forlibraries/widget.js?id=2175-2558198918"></script>';
        }
        break;
      case 'jobbnorge':
        $positions = uib_feed__jobbnorge_positions_full($arg);
        return render($positions);
      case 'offjournal':
        $data = drupal_json_decode(file_get_contents('http://webber.uib.no/api/offjournal.php'));
        $block = array();
        if (isset($data['journal'])) {
          krsort($data['journal']);
          $limit = date('Y-m-d', time() - 92 * 24 * 3600); // max 3 months old stuff
          foreach ($data['journal'] as $date => $href) {
            if ($date < $limit)
              break;
            $t = strtotime($date);
            $m = substr($date, 5, 2);
            if (!isset($block[$m])) {
              $block[$m] = array(
                'heading' => array(
                  '#type' => 'html_tag',
                  '#tag' => 'h3',
                  '#value' => format_date($t, 'custom', 'F'),
                ),
                'list' => array(
                  '#prefix' => '<ul>',
                  '#suffix' => '</ul>',
                ),
              );
            }
            $block[$m]['list'][$date] = array(
              '#markup' => "<li>" . l(format_date($t, 'medium'), $href) . "</li>",
            );
          }
          $block['#prefix'] = '<section class="offjournal">';
          $block['#suffix'] = '</section>';
        }
        else {
          $block['error'] = array(
            '#markup' => '<p><i>' . t('Public journal data not currently available') . '</i></p>',
          );
        }
        return render($block);
      case 'pressrelease':
        $block = array();
        // Get last press releases
        $limit = 10;
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'uib_article')
          ->propertyCondition('status', 1)
          ->fieldCondition('field_uib_article_type', 'value', 'press_release', '=')
          ->propertyOrderBy('created', 'DESC')
          ->range(0, $limit);
        $result = $query->execute();
        if ($result) {
          $block['#prefix'] = '<div class="press-releases">';
          $block['#suffix'] = '</div>';
          $query = 'SELECT nid, title, created FROM {node} WHERE nid IN (:nids) ORDER BY created DESC';
          $node_result = db_query($query, array(':nids' => array_keys($result['node'])));
          $previous_date = '';
          foreach ($node_result as $node) {
            $current_date = date('Ymd', $node->created);
            if ($current_date != $previous_date) {
              $previous_date = $current_date;
              $block[$current_date] = array(
                'heading' => array(
                  '#type' => 'html_tag',
                  '#tag' => 'h3',
                  '#value' => format_date($node->created),
                ),
                'list' => array(
                  '#prefix' => '<ul>',
                  '#suffix' => '</ul>',
                ),
              );
            }
            $href = 'node/' . $node->nid;
            $block[$current_date]['list'][] = array(
              '#markup' => '<li>' . l($node->title, $href) . '</li>',
            );
          }
        }
        return render($block);
      }
      return '(' . check_plain($matches[1]) . ' ' . t('unrecognized') . ')';
    },
    $text
  );
}

/**
 * Implements hook_node_insert()
 */
function uib_filter_node_insert($node) {
  _uib_filter__filter_check($node);
}

/**
 * Implements hook_node_update()
 */
function uib_filter_node_update($node) {
  _uib_filter__filter_check($node);
}

/**
 * Determines if an article references the pressrelease filter.
 * Returns a boolean value.
 */
function _uib_filter__text_references_pressrelease($node) {
  return !empty($node->field_uib_text['und']) && preg_match('/\(\*\s*(pressrelease)\s*(?::(.*?))?\*\)/', $node->field_uib_text['und'][0]['value']);
}

/**
 * Function to add a node containing a text filter to an array of nodes getting
 * their cache cleared on insert or update
 */
function _uib_filter__filter_check($node) {
  $cache_invalidate = $cache_invalidate_orig = variable_get('uib_field_cache_invalidate_by_article_type');

  if (!isset($cache_invalidate['press_release']))
    $cache_invalidate['press_release'] = array();
  $nid = $node->nid;

  if (_uib_filter__text_references_pressrelease($node)) {
    if (!in_array($nid, $cache_invalidate['press_release'])) {
      $cache_invalidate['press_release'][] = $nid;
    }
  }
  else {
    $key = array_search($nid, $cache_invalidate['press_release']);
    if ($key !== FALSE) {
      array_splice($cache_invalidate['press_release'], $key, 1);
    }
  }

  if ($cache_invalidate != $cache_invalidate_orig) {
    variable_set('uib_field_cache_invalidate_by_article_type', $cache_invalidate);
  }
}
