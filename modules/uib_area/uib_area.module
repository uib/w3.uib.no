<?php
/**
 * @file
 * Code for the UiB Feature Area feature.
 */

include_once 'uib_area.features.inc';

/**
 * Implements hook_block_info().
 *
 * area_parents contains a list of parents to the current area.
 */
function uib_area_block_info() {
  return array(
    'colophon2' => array(
      'info' => t('Colophon'),
      'status' => TRUE,
    ),
    'jobbnorge' => array(
      'info' => t('Jobbnorge'),
      'status' => TRUE,
    ),
    'feed' => array(
      'info' => t('Feed'),
      'status' => TRUE,
    ),
    'area_parents' => array(
      'info' => t('Area parents'),
      'status' => TRUE,
    ),
    'newspage_recent_news' => array(
      'info' => t('Newspage recent news'),
      'status' => TRUE,
    ),
    'colophon_logos' => array(
      'info' => t('Colophon logos frontpage'),
      'status' => TRUE,
    ),
    'paahoyden_logo' => array(
      'info' => t('Paa hoyden logo on newspage'),
      'status' => TRUE,
    ),
    'ouprosjektet_logo' => array(
      'info' => t('OU-prosjektet logo on for-employees'),
      'status' => TRUE,
    ),
    'area_banner' => array(
      'info' => t('Area global html container'),
      'status' => TRUE,
    ),
    'frontpage_links' => array(
      'info' => t('Graphic links used only in the frontpage'),
      'status' => TRUE,
    ),
    'news_and_calendar' => array(
      'info' => t('Links to an areas news archive and calendar'),
      'status' => TRUE,
    ),
    'bottom_links' => array(
      'info' => t('Links to some basic areas - Contact / open positions ' .
        '/ Press / About cookies'),
      'status' => TRUE,
    ),
    'area_twitter' => array(
      'info' => t('Tweets from the account related to this area'),
      'status' => TRUE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function uib_area_block_view($delta='') {
  global $language;
  $area = uib_area__get_current();
  $block = array();
  switch ($delta) {
    case 'area_twitter':
      if (!empty($area)) {
        if (!empty($area->field_uib_show_twitter_feed) &&  $area->field_uib_show_twitter_feed['und'][0]['value']) {
          $twitter = FALSE;
          if (!empty($area->field_uib_social_media)) {
            foreach($area->field_uib_social_media['und'] as $sm) {
              list($media, $user) = explode(':', $sm['safe_value']);
              if ($media == 'twitter') {
                $twitter = $user;
                continue;
              }
            }
          }
          if ($twitter) {
            $content = l('twitter.com/' . $twitter, 'https://twitter.com/' . $twitter, array('attributes' => array('class' => 'twitter-timeline', 'title' => 'twitter.com/' . $twitter)));
            $content .= '<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>';
            $block['subject'] = NULL;#t('Twitter');
            $block['content'] = $content;
          }
        }
      }
      break;
    case 'news_and_calendar':
      if (!empty($area)) {
        $block['subject'] = NULL;
        $items = array();
        if ($area->field_uib_area_type['und'][0]['value'] == 'frontpage') {
          $calendar_url = 'calendar';
          $news_nid = $area->language == 'nb' ? 36363 : 36364;
          $news_archive_url = 'node/' . $news_nid;
        }
        else {
          $calendar_url = 'node/' . $area->nid . '/calendar';
          $news_archive_url = 'node/' . $area->nid . '/news-archive';
        }
        if (
          uib_calendar3__area_count_events($area->nid) ||
          $area->field_uib_area_type['und'][0]['value'] == 'frontpage'
        ) {
          $calendar_link = l(t('See all events'), $calendar_url, array(
            'attributes' => array('class' => array('more-link__calendar')),
          ));
          $items[] = $calendar_link;
        }
        if (
          uib_area__count_news_articles($area->nid) ||
          $area->field_uib_area_type['und'][0]['value'] == 'frontpage'
        ) {
          if ($area->field_uib_area_type['und'][0]['value'] == 'frontpage' ? $news_archive_link_text = t('News') : $news_archive_link_text = t('See all news'));
          $news_archive_link = l($news_archive_link_text, $news_archive_url, array(
            'attributes' => array('class' => array('more-link__news')),
          ));
          $items[] = $news_archive_link;
        }
        $block['content'] = theme_item_list(array(
          'items' => $items,
          'title' => NULL,
          'type' => 'ul',
          'attributes' => array('class' => array('news-and-calendar')),
        ));
      }
      break;
    case 'colophon_2':
      $place = "";
      $phone = '+47 55 58 00 00';
      $mail_title = t('post@uib.no');
      $mail_href = 'mailto:post@uib.no';
      if(isset($area->field_uib_ou['und'])) {
        $place = node_load($area->field_uib_ou['und'][0]['target_id']);
        $mail_title = isset($place->field_uib_email['und'][0]['safe_value'])
          ? $place->field_uib_email['und'][0]['safe_value']
          : '';
        $mail_href = 'mailto:' . $mail_title;
        $phone = isset($place->field_uib_phone['und'][0]['value'])
          ? $place->field_uib_phone['und'][0]['value']
          : '';
      }
      elseif (isset($area->field_uib_area_parents['und'])) {
        $parent = node_load($area->field_uib_area_parents['und'][0]['target_id']);
        $place = node_load($parent->field_uib_ou['und'][0]['target_id']);
      }
      $postal_address = t('University of Bergen') .' '. uib_area__format_postal_address($place);
      $contact_info = $area->field_uib_contact_info;
      if (!empty($contact_info)) {
        $contact_info_link_title = t('Contact information');
        $contact_info_url = $contact_info['und'][0]['url'];
      } else {
        $contact_info_link_title = '';
        $contact_info_url = '';
      }
      $visit_address = uib_area__format_visit_address($place);
      $visitor_info = $area->field_uib_visitor_info;
      if (!empty($visitor_info)) {
        $visitor_info_link_title = t('Visitor information');
        $visitor_info_url = $visitor_info['und'][0]['url'];
      } else {
        $visitor_info_link_title = '';
        $visitor_info_url = '';
      }
      $block['title'] = '';
      $block['region'] = 'none';
      $block['subject'] = NULL;
      $block['content'] = array(
        'contact' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => 'contact',
          ),
          'title' => array(
            '#type' => 'html_tag',
            '#tag' => 'h3',
            '#value' => t('Contact us'),
          ),
          'email' => array(
            '#type' => 'link',
            '#title' => $mail_title,
            '#href' => $mail_href,
          ),
          'phone' => array(
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#value' => $phone,
          ),
          'postal_address' => array(
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#value' => $postal_address,
          ),
          'contact_info' => array(
            '#type' => 'link',
            '#title' => $contact_info_link_title,
            '#href' => $contact_info_url,
          ),
        ),
        'visit' => array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => 'visit',
          ),
          'title' => array(
            '#type' => 'html_tag',
            '#tag' => 'h3',
            '#value' => t('Visit us'),
          ),
          'visit_address' => array(
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#value' => $visit_address,
          ),
          'visitor_info' => array(
            '#type' => 'link',
            '#title' => $visitor_info_link_title,
            '#href' => $visitor_info_url,
          ),
        ),
      );
      if (!empty($contact_info)) unset($block['content']['contact']['email']);
      if (empty($phone) || !empty($contact_info)) unset($block['content']['contact']['phone']);
      if (empty($postal_address) || !empty($contact_info)) unset($block['content']['contact']['postal_address']);
      if (empty($contact_info)) unset($block['content']['contact']['contact_info']);
      if (empty($visit_address) || !empty($visitor_info)) unset($block['content']['visit']['visit_address']);
      if (empty($visitor_info)) unset($block['content']['visit']['visitor_info']);
      if (empty($place->field_uib_geolocation)) {
        $nid = $language->language == 'en' ? 79263 : 79254;
        $mapurl = drupal_get_path_alias('node/' . $nid);
      }
      else {
        $map = $language->language == 'en' ? '/map' : '/kart';
        $mapurl = drupal_get_path_alias('node/' . $area->nid) . $map;
      }
      $block['content']['visit']['campus_map'] = array(
        '#theme' => 'link',
        '#text' => t('View campus map'),
        '#path' => $mapurl,
        '#options' => array(
          'attributes' => array(),
          'html' => TRUE,
        ),
      );
      if (!empty($visitor_info)) unset($block['content']['visit']['campus_map']);
      break;
    case 'jobbnorge':
      $whitelist = array('faculty', 'unit', 'institute');
      if ($area && in_array($area->field_uib_area_type['und'][0]['value'], $whitelist)) {
        if (!empty($area->field_uib_ou['und'])) {
          $place = node_load($area->field_uib_ou['und'][0]['target_id']);
        }
        if (empty($place->field_uib_jobbnorge_id['und'])) {
          continue;
        }
        $feed = uib_feed__jobbnorge_url($place->field_uib_jobbnorge_id['und'][0]['value'], $area->language);
        $block['content'] = uib_feed__format($feed, t('Open Positions'), $limit = 999, array('uib_feed__format_pre_render'), array('uib_area__jobbnorge_format_post_render', 'uib_area__feed_format_post_render'));
      }
    break;
    case 'feed':
      if ($area) {
        $elements = array();
        if (!empty($area->field_uib_feed['und'])) {
          foreach ($area->field_uib_feed['und'] as $delta => $item) {
            $url = url($item['url'], $item);
            if (strpos($url, '#')) {
              $limit = explode('#', $url);
            }
            $limit = (isset($limit[1]) && is_numeric($limit[1])) ? $limit[1] : 5;
            $elements[$delta] = uib_feed__format($url, $item['title'], $limit, array('uib_feed__format_pre_render') ,array('uib_area__feed_format_post_render'));
          }
        }
        $block['content'] = $elements;
      }
    break;
    case 'area_parents':
      $block['subject'] = t('Belongs to');
      if (!empty($area->field_uib_area_parents['und'])) {
        // Setup an SQL query to get parent titles from node ids listed.
        $nlist = array();
        $query = 'SELECT nid, title FROM {node} WHERE ';
        $glue = '';
        for ($i=0; $i < count($area->field_uib_area_parents['und']); $i++) {
          $nlist[":nid$i"] = $area->field_uib_area_parents['und'][$i]['target_id'];
          $query .= $glue . " nid = :nid$i";
          $glue = " OR";
        }
        $result = db_query($query, $nlist);
        // Setup each parental area node title on a separate line with link.
        foreach ($result as $record) {
          $title = t($record->title);
          $url = 'node/' . $record->nid;
          if ($title) {
            $block['content'][$title]['#markup'] = l($title, $url) . '<br>';
          }
        }
      }
    break;
    case 'newspage_recent_news':
      if (!empty($area)) {
        $slideshow = db_select('field_data_field_uib_profiled_article', 'f')
          ->fields('f', array('field_uib_profiled_article_target_id'))
          ->condition('entity_id', $area->nid)
          ->execute()
          ->fetchCol();

        $profiled_messages = db_select('field_data_field_uib_profiled_message', 'f')
          ->fields('f', array('field_uib_profiled_message_target_id'))
          ->condition('entity_id', $area->nid)
          ->execute()
          ->fetchCol();

        $exludes_nodes = array_merge($slideshow, $profiled_messages);
        if ($exludes_nodes) {
          $query = new EntityFieldQuery;
          $query = $query
            ->entityCondition('entity_type', 'node')
            ->range(0, 5)
            ->propertyCondition('status', 1)
            ->propertyOrderBy('created', 'DESC')
            ->fieldCondition('field_uib_article_type','value', 'news', '=')
            ->fieldCondition('field_uib_area','target_id', $area->nid, '=')
            ->propertyCondition('nid', $exludes_nodes, 'NOT IN');
          $result = $query->execute();
          if ($result) {
            $nids = array_keys($result['node']);
            $nodes = node_load_multiple($nids);
            $block['content'] = node_view_multiple($nodes);
            $node_keys = array_keys($block['content']['nodes']);
            foreach ($node_keys as $key) {
              if (is_numeric($key) && empty($block['content']['nodes'][$key]['field_uib_main_media'])) {
                $block['content']['nodes'][$key]['field_uib_main_media']['#markup'] =
                  '<div class="field-name-field-uib-main-media"><div class="field-items"><img src="/' .
                  path_to_theme() .
                  '/images/Recent_High.png" alt=""></div></div>';
              }
            }
          }
        }
      }
    break;
    case 'colophon_logos':
      if (!empty($area)) {
        if (!empty($area->field_uib_colophone_logos)) {
          $externals = array();
          foreach ($area->field_uib_colophone_logos['und'] as $external) {
            $externals[] = $external['target_id'];
          }
          $logos = entity_load('node', $externals);
          $block['content'] = '';
          foreach ($logos as $logo) {
            $image_src = image_style_url('colophone_logo', $logo->field_uib_media['und'][0]['uri']);
            $block['content'] .= '
              <div class="banner">
                <a title="' . $logo->title . '" href="' . $logo->field_uib_links['und'][0]['url'] . '">
                  <img alt="' . $logo->title . '" src="' . $image_src . '"/>
                </a>
              </div>
            ';
          }
        }
      }
    break;
    case 'paahoyden_logo':
      global $base_url;
      global $theme_path;
      $path = $base_url . '/' . $theme_path . '/images/';
      $logo = $path . 'paahoyden.png';
      if(!empty($area) && $area->field_uib_area_type['und'][0]['value'] == 'newspage') {
        if ($area->language == 'nb') {
          $block['content'] = '
            <div>
              <a title="På Høyden, Uavhengig avis for UiB" href="http://pahoyden.no/">
                <img alt="På Høyden, Uavhengig avis for UiB" src="' . $logo . '"/>
              </a>
            </div>
          ';
        }
      }
    break;
    case 'ouprosjektet_logo':
      global $base_url;
      global $theme_path;
      $path = $base_url . '/' . $theme_path . '/images/';
      $logo = $path . 'ouprosjektet.png';
      if(!empty($area) && $area->nid == 1) {
        $block['content'] = '
          <div>
            <a title="Organisasjonsutviklingsprosjektet" href="http://www.uib.no/ouprosjekt">
              <img alt="Organisasjonsutviklingsprosjektet" src="' . $logo . '"/>
            </a>
          </div>
        ';
      }
    break;
    case 'area_banner':
      if (!empty($area)) {
        $wrapped_area = entity_metadata_wrapper('node', $area);
        $block['subject'] = NULL;
        if ($wrapped_area->field_uib_area_banner->value()) {
          $block['content'] = $wrapped_area->field_uib_area_banner->value->value();
        }
      }
    break;
    case 'frontpage_links':
      if(!empty($area)) {
        $links = array(
          'nb' => array(
            array('Fakultet, institutt og sentre', '/om/organisasjonskart', 'uib-frontpage-organization'),
            array('Biblioteket', '/ub', 'uib-frontpage-ub'),
            array('Museet', '/universitetsmuseet', 'uib-frontpage-museum'),
            array('Rektoratets blogg', 'http://rektor.b.uib.no', 'uib-frontpage-principal'),
          ),
          'en' => array(
            array('Faculties, departments and centres', '/about/organisationchart', 'uib-frontpage-organization'),
            array('Library', '/ub', 'uib-frontpage-ub'),
            array('Museum', '/universitymuseum', 'uib-frontpage-museum'),
          ),
        );
        $items = array();
        foreach($links[$area->language] as $item) {
          list($title, $href, $class) = $item;
          $item = array(
            '#type' => 'link',
            '#title' => $title,
            '#href' => $href,
            '#attributes' => array('class' => array($class)),
          );
          $items[] = render($item);
        }
        $block['subject'] = NULL;
        $block['content'] = array(
          '#theme' => 'item_list',
          '#items' => $items,
        );
      }
    break;
    case 'bottom_links':
      if(!empty($area)) {
        $links = array(
          'nb' => array(
            array('Kontakt UiB', 74847, 'link-contact-info'),
            array('Ledige stilinger', 84775, 'link-vacant-positions'),
            array('Presse', 50664, 'link-press'),
            array('Om informasjonskapsler', 50897, 'link-info-cookies'),
          ),
          'en' => array(
            array('Contact UiB', 74388, 'link-contact-info'),
            array('Available positions', 84777, 'link-vacant-positions'),
            array('Press', 107460, 'link-press'),
            array('About cookies', 50970, 'link-info-cookies'),
          ),
        );
        $items = array();
        foreach($links[$area->language] as $item) {
          list($title, $nid, $class) = $item;
          $item = array(
            '#type' => 'link',
            '#title' => $title,
            '#href' => drupal_get_path_alias('node/' . $nid),
            '#attributes' => array('class' => array($class)),
          );
          $items[] = render($item);
        }
        $block['subject'] = NULL;
        $block['content'] = array(
          '#theme' => 'item_list',
          '#items' => $items,
        );
      }
    break;
  }
  return $block;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uib_area_preprocess_page(&$variables) {
  if (isset($variables['page']['above_content']['uib_area_area_banner']['#markup'])) {
    $markup = $variables['page']['above_content']['uib_area_area_banner']['#markup'];
    if (preg_match('/<!--\s*Resources?:\s*(.+?)\s*-->/', $markup, $matches)) {
      foreach(preg_split('/\s*,\s*/', $matches[1]) as $resource) {
        switch($resource) {
        case 'uib.tabs':
          drupal_add_library('system' , 'ui.tabs');
          drupal_add_js(drupal_get_path('theme', 'uib_w3') . '/js/tabs.js', array('group' => JS_THEME, ));
          break;
        default:
          if (substr($resource, -3) == '.js') {
            drupal_add_js($resource, array('type' => 'external', 'group' => JS_THEME));
          }
          elseif(substr($resource, -4) == '.css') {
            drupal_add_css($resource, array('type' => 'external', 'group' => CSS_THEME));
          }
          else {
            uibx_log("Don't know how to process banner resource '$resource'", 'warning');
          }
          break;
        }
      }
    }
  }
}

/**
 * Returns the full postal address of a place as a string
 */
function uib_area__format_postal_address($place) {
  if (empty($place->field_uib_postal_address))
    return;
  $address = $place->field_uib_postal_address['und'][0]['thoroughfare'];
  $p_code = $place->field_uib_postal_address['und'][0]['postal_code'];
  $p_place = $place->field_uib_postal_address['und'][0]['locality'];
  return $address . ', ' . t('N-') . $p_code . ' ' . $p_place;
}

/**
 * Returns the full visit address of a place as a string
 */
function uib_area__format_visit_address($place) {
  if (empty($place->field_uib_visit_address))
    return;
  $address = $place->field_uib_visit_address['und'][0]['thoroughfare'];
  return $address;
}

/**
 * Adds markup for blue square on feed block titles
 */
function uib_area__feed_format_post_render($markup) {
  if ($markup && strpos($markup, 'item-list') !== FALSE) {
    $markup = preg_replace('/<h3(.*?)>(.*?)<\/h3>/','<h2\1>\2</h2>', $markup);
    $markup = preg_replace('/<h2>/', '<h2><span></span>', $markup, 1);
  }
  return $markup;
}

function uib_area__jobbnorge_format_post_render($markup) {
  global $language;
  if ($markup && strpos($markup, 'h3') === FALSE) {
    $markup = '<div id="block-uib-area-jobbnorge" class="block block-uib-area">';
    $markup .= '<div class="content"><div class="item-list">';
    $markup .= '<h2>' . t('Open positions') . '</h2>';
    $markup .= '<p>' . t('There are no open positions for this unit at the moment.') . '</p>';
    $markup .= '</div></div></div>';
  }
  $all_vacant_positions_text = t("See all open positions at UiB");
  if ($language->language == 'en') $all_vacant_positions_link = l($all_vacant_positions_text, 'node/84777');
  else $all_vacant_positions_link = l($all_vacant_positions_text, 'node/84775');
  $markup = substr(trim($markup), 0, -6);
  $markup .= '<div class="uib-all-vacancies">' . $all_vacant_positions_link . '</div></div>';
  return $markup;
}

/**
 * Implements hook_field_formatter_info().
 */
function uib_area_field_formatter_info() {
  return array(
    'uib_area_link_feed' => array(
      'label' => t('View as an rss feed'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function uib_area_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $url = url($item['url'], $item);
      if (strpos($url, '#')) {
        $limit = explode('#', $url);
      }
      $limit = (isset($limit[1]) && is_numeric($limit[1])) ? $limit[1] : 5;
      $elements[$delta] = uib_feed__format($url, $item['title'], $limit, array('uib_area__feed_format_post_render'));
  }
  return $elements;
}

/**
 * Implements hook_theme().
 */
function uib_area_theme() {
  return array(
    'uib_area_formatter_uib_area_link_feed' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Implements hook_node_presave().
 */
function uib_area_node_presave($node) {
  // obtain full list of parent areas
  $parent_node_id_list = array();
  if (!empty($node->field_uib_area_parents['und'])) {
    foreach ($node->field_uib_area_parents['und'] as $parent) {
      uib_area__get_parentage($parent['target_id'], $parent_node_id_list);
    }
    // remove duplicate area node ids if present
    $cleaned_node_id_list = array();
    foreach ($parent_node_id_list as $pnid) {
      if (!in_array($pnid, $cleaned_node_id_list)) {
        $cleaned_node_id_list[] = $pnid;
      }
    }
    // update node with cleaned full list
    $node->field_uib_area_parents['und'] = array();
    for($i = 0; $i < count($cleaned_node_id_list); $i++) {
      $node->field_uib_area_parents['und'][$i] = array('target_id' => $cleaned_node_id_list[$i]);
    }
  }
}

/**
 * Recursively tries to get uib_area parent_ids.
 */
function uib_area__get_parentage($parent_node_id, &$parent_ids) {
  $parent_ids[] = $parent_node_id;
  if ($parent_node = node_load($parent_node_id)) {
    if (!empty($parent_node->field_uib_area_parents['und'])) {
      foreach ($parent_node->field_uib_area_parents['und'] as $this_parent) {
        uib_area__get_parentage($this_parent['target_id'],$parent_ids);
     }
    }
  }
}

/**
 * Find and obtain [and keep] reference to current uib_area
 * as indicated by node id in URL, or in the field_uib_area
 * of that node. That node is loaded if necessary.
 *
 * The current area may be set "manually" by passing an area node id
 *
 * @param int $area_nid Optional area node id to set as current area
 * @return object
 *   If no area reference is found, the function returns NULL.
 */
function uib_area__get_current($area_nid = NULL) {
  static $current_area;
  if (!empty($area_nid)) {
    $area_nid = intval($area_nid);
    $node = node_load($area_nid);
    if ($node->type == 'area') {
      $current_area = $node;
    }
  }
  if (!isset($current_area)) {
    // obtain area from node indicated in url
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $nn = intval(arg(1));
      $node = node_load($nn);
      if (!empty($node)) {
        if ($node->type == 'area') {
          $current_area = $node;
        }
        elseif ($node->type == 'uib_study') {
          if (!empty($node->field_uib_study_category['und']) && $node->field_uib_study_category['und'][0]['value'] == 'evu') {
            $current_area = node_load(77320);  # utdanning/evu
          }
          elseif (!empty($node->field_uib_study_category['und']) && in_array($node->field_uib_study_category['und'][0]['value'], array('mou', 'forskningsavtale'))) {
            $current_area = node_load(73685);
          }
          else {
            $study_area_nid = variable_get('uib_study_area_nid');
            if ($study_area_nid)
              $current_area = node_load($study_area_nid);
          }
        }
        elseif (isset($node->field_uib_area['und'][0]['entity'])) {
          $current_area = $node->field_uib_area['und'][0]['entity'];
        }
        elseif (!empty($node->field_uib_area['und'][0]['target_id'])) {
          $current_area = node_load($node->field_uib_area['und'][0]['target_id']);
        }
        else {
          $current_area = NULL;
        }
      }
    }
  }
  return uib_area__get_current_by_language($current_area);
}

/**
 * Get the area that corresponds to the global language if this
 * is different from the articles language.
 *
 * @param node $current_area
 *   The current uib_area before a check to se if the global
 *   language is equal to the current uib_area's language.
 * @return node
 *   The current uib_area in the global language.
 */
function uib_area__get_current_by_language($current_area) {
  if (!$current_area)
    return NULL;
  global $language;
  if ($language->language != $current_area->language) {
    if ($current_area->nid == $current_area->tnid) {
      $result = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('tnid', $current_area->nid, '=')
        ->condition('nid', $current_area->nid, '<>')
        ->execute()
        ->fetchAssoc();
      $current_area = node_load($result['nid']);
    }
    else {
      $current_area = node_load($current_area->tnid);
    }
  }
  return $current_area;
}

/**
 * Get current node address as indicated by node id in URL.
 *
 * @return string
 *   If no node reference is found in URL, the function returns NULL.
 */
function uib_area__get_current_node() {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    return arg(0) . '/' . arg(1);
  }
  return NULL;
}

/**
 * Get the node type of an indicated node ('node/nid'), or
 * the current node as indicated by node id in URL.
 *
 * @return string
 *   If no node or node type is found, the function returns NULL.
 */
function uib_area__get_node_type($node = NULL) {
  if (empty($node)) {
    $node = uib_area__get_current_node();
  }
  if (!empty($node)) {
    $tmp = explode('/',$node);
    if (is_numeric($tmp[1])) {
      $query = 'SELECT type FROM {node} WHERE nid = :nid'; // get node type
      $result = db_query($query, array(':nid' => $tmp[1]));
      foreach ($result as $record) {
        return $record->type;
      }
    }
  }
  return NULL;
}

/**
 * Find the OU nid referenced from an area or ou
 * (defaults to the ou nid of current area).
 *
 * @return int
 *   If the area does not have an OU, the function will recursively search its
 *   area parents until an OU is ultimately found -- or return NULL.
 */
function uib_area__get_ou_nid($area = NULL) {
  if (empty($area)) {
    $area = uib_area__get_current();
  }
  elseif ($area->type == 'uib_ou') {
    return $area->nid;
  }
  if (!empty($area->field_uib_ou['und'][0]['target_id'])) {
    return $area->field_uib_ou['und'][0]['target_id'];
  }
  else {
    if (!empty($area->field_uib_area_parents)) {
      $i = 0;
      $nrof_parents = count($area->field_uib_area_parents['und']);
      $ou_nid = NULL;
      while (empty($ou_nid) && $i < $nrof_parents) {
        $ou_nid = uib_area__get_ou_nid(node_load($area->field_uib_area_parents['und'][$i]['target_id']));
        $i++;
      }
      if ($i < $nrof_parents) {
        uibx_log("Selected the first OU found [$ou_nid] for area node $area->nid among $nrof_parents parents.", "warning");
      }
      return $ou_nid;
    }
    else {
      return NULL;
    }
  }
}

/**
 * Find nid referenced from an area or ou.
 *
 */
function uib_area__get_ou_nids_recursive($nid) {
  $node = node_load($nid);
  if (!$node)
    return NULL;

  if ($node->type == "area") {
    $nid = uib_area__get_ou_nid($node);
    if (!$nid)
      return NULL;
    $node = node_load($nid);
  }

  $res = array();
  $res[] = $node->nid;

  $code = $node->field_uib_ou_id['und'][0]['value'];
  if (substr($code, 2) == '0000')
    $like = substr($code, 0, 2) . '%';
  elseif (substr($code, 4) == '00')
    $like = substr($code, 0, 4) . '%';

  if (isset($like)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'uib_ou')
      ->fieldCondition('field_uib_ou_id', 'value', $like, 'LIKE');
    $result = $query->execute();
    $res = array_keys($result['node']);
    sort($res);
  }

  $res = join('+', $res);
  return $res;
}

/**
 * Finds the faculty OU of an OU or area.
 */
function uib_area__get_faculty_ou_nid ($area_or_ou_id) {
  $node = node_load($area_or_ou_id);
  if (!$node) return NULL;

  if ($node->type == "area") {
    $nid = uib_area__get_ou_nid($node);
    if (!$nid) return NULL;
    $node = node_load($nid);
  }

  $code = $node->field_uib_ou_id['und'][0]['value'];
  if (substr($code, 2) =='0000')
    return $node->nid;
  $code = substr($code, 0, -4) . '0000';

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'uib_ou')
    ->fieldCondition('field_uib_ou_id', 'value', $code);
  $result = $query->execute();

  if (count($result) == 1) {
    foreach($result['node'] as $key => $value) {
      return $key;
    }
  }

  return NULL;
}


/**
 * Find the node id of the current uib_area.
 *
 * @return int
 *   If no area reference is found, the function returns NULL.
 */
function uib_area__get_current_nid() {
  $a = uib_area__get_current();
  if (!empty($a)) {
    return $a->nid;
  }
  else {
    return NULL;
  }
}

/**
 * Find the menu to use for the current uib_area.
 *
 * @return string
 *   Returns NULL if there is no current area node
 *   or there should be no menu for the area.
 */
function uib_area__get_current_menu() {
  $menu_name = NULL;
  $curr_node = uib_area__get_current();
  if ($curr_node) {
    if (uib_area_menu_is_allowed($curr_node)) {
      if (!empty($curr_node->nid)) {
        $menu_name = 'menu-area-' . $curr_node->nid;
      }
    }
  }
  return $menu_name;
}

/**
 * Find menu link for the current uib_area.
 *
 * @return menu_link
 *   If no area reference or no menu link is found, the function returns NULL.
 */
function uib_area__get_current_menu_link() {
  $ar = uib_area__get_current();
  if (! empty($ar)) {
    if (!empty($ar->nid)) {
      $menu_link = menu_link_get_preferred('node/' . $ar->nid, uib_area__get_current_menu());
      if (!empty($menu_link)) {
        return $menu_link;
      }
    }
  }
  return NULL;
}

/**
 * Find link item id of the current uib_area.
 *
 * @return menu_link
 *   If no menu link is found, the function returns NULL.
 */
function uib_area__get_current_mlid() {
  $menu_link = uib_area__get_current_menu_link();
  if (!empty($menu_link)) {
    return $menu_link['mlid'];
  }
  return NULL;
}

/**
 * Find menu link item id which is to be used as a starting point for the top
 * level area menu block.
 *
 * @return int
 *   The function may not return something that evaluates to FALSE,
 *   because this will result in a menu containing the full area menu.
 *   Instead, this fix will return 1 upon failure which will
 *   result in an empty menu.
 *
 */
function uib_area__get_menustart() {
  $mlid = uib_area__get_current_mlid();
  if ($mlid > 0) {
    return $mlid;
  }
  else {
    return 1;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Changes the path used for the autocomplete in %node/translate.
 */
function uib_area_form_i18n_node_select_translation_alter(&$form, &$form_state, $form_id) {
  $node = $form['node']['#value'];
  $fields = field_info_instances('node', $node->type);
  //Only overwrite the autocomplete of type of nodes (bundle) that have area
  if (isset($fields['field_uib_area'])) {
    if (isset($form['translations']['node'])) {
      foreach ($form['translations']['node'] as $langcode => $settings) {
        $form['translations']['node'][$langcode]['#autocomplete_path'] = 'uib_area/node/autocomplete/' . $node->type . '/' . $langcode;
      }
    }
  }
}

/**
 * Node title autocomplete callback for %node/translate.
 * Based on i18n_node_autocomplete and _i18n_node_references.
 */
function uib_area__node_autocomplete($type, $langcode, $string = '') {
  $query = db_select('node', 'n');
  $query->join('field_data_field_uib_area','a','a.entity_id = n.nid');
  $query->join('node','na','a.field_uib_area_target_id = na.nid');
  $query->addField('a', 'field_uib_area_target_id', 'area_id');
  $query->addField('na', 'title', 'area_title');
  $query->fields('n', array('nid', 'title'))
    ->condition('n.title', '%' . $string . '%', 'LIKE')
    ->condition('n.type', $type)
    ->condition('n.language', $langcode)
    ->condition('n.tnid', 0)
    ->condition('a.bundle', $type)
    ->orderBy('n.title')
    ->range(0, 10);
  $matches = array();
  foreach ($query->execute() as $node) {
    $matches[$node->title . " [nid:$node->nid]"] =
      '<div class="reference-autocomplete">' . check_plain($node->title) . ' - ' . check_plain($node->area_title) . '</div>';
  }
  drupal_json_output($matches);
}

/**
 * Implements hook_form_alter().
 */
function uib_area_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'field_collection_item_form') {
    $form['#validate'][] = 'uib_area_field_collection_link_section_validation_handler';
  }
  //Adding a redirect after form submissions
  if ($form_id == 'node_delete_confirm') {
    $form['#submit'][] = 'uib_area__redirect';
  }
  if ($form_id == 'area_node_form') {
    // list of fields that should be hidden (in area node form) from
    // both level 3 and innholdsprodusent users
    $not_for_level_2 = array(
      'field_uib_sebra_id', // Sebra ID
      'field_uib_area_type', // Type
      'title', // Title
      'field_uib_area_parents', // Parents
      'field_uib_ou', // Place
      'field_uib_menu_style', // Menu style
      'field_uib_area_banner', // Banner
      'field_uib_image_map',
      'field_uib_search_manual_boost',
      'field_uib_search_keywords',
    );
    // list of fields that should be hidden from
    // level 3 users
    $not_for_level_3 = array(
      'field_uib_content_manager', // Content Manager
      'field_uib_staff', // Staff
      'field_uib_show_staff', // Show staff
      'field_uib_important_message', // Important message
      );
    $not_for_any_level = array(
      'field_uib_logo', // Logo
      'field_uib_colophone_logos', // Colophone logos
      'field_uib_staff_status', // Problematical in previous Sebra sync
    );
    if ($GLOBALS['user']->uid != 1) {
      foreach ($not_for_any_level as $nfal) {
        if (isset($form[$nfal])) {
          $form[$nfal]['#access'] = FALSE;
        }
      }
    }
    if ( (in_array('innholdsprodusent', $GLOBALS['user']->roles, TRUE) OR in_array('level 3', $GLOBALS['user']->roles, TRUE)) AND (!in_array('superbruker', $GLOBALS['user']->roles, TRUE)) ) {
      // Hide some fields for innholdsprodusent and level 3 users
      foreach ($not_for_level_2 as $l2) {
        if (isset($form[$l2])) {
          $form[$l2]['#access'] = FALSE;
        }
      }
      if (! in_array('innholdsprodusent', $GLOBALS['user']->roles, TRUE)) {
        // Hide some additional fields for level 3 users
        foreach ($not_for_level_3 as $l3) {
          if (isset($form[$l3])) {
            $form[$l3]['#access'] = FALSE;
          }
        }
      }
    }

    // Disable ("grey out") some fields
    if ($GLOBALS['user']->uid != 1 && !in_array('superbruker', $GLOBALS['user']->roles, TRUE)) {
      $not_enabled = array(
        'field_uib_content_manager',
        'field_uib_staff',
      );
      foreach ($not_enabled as $to_be_disabled) {
        if (!isset($form[$to_be_disabled]['#access']) || $form[$to_be_disabled]['#access']) {
          $form[$to_be_disabled]['#disabled'] = TRUE;
        }
      }
    }
    unset($form['field_uib_feature_heading_style']['und']['#options']['tb']);
    $not_for_news_and_frontpage = array(
      'field_uib_bottom_media',
      'field_uib_profiled_testimonial',
      'field_uib_bottom_text',
      'field_uib_secondary_text',
      'field_uib_tertiary_text',
      'field_uib_feature_heading_style',
      'field_uib_feature_mobile_media',
      );
    $not_for_frontpage = array(
      'field_uib_feed',
      );
    $only_for_news_and_frontpage_and_research = array(
      'field_uib_profiled_message',
      );
    $only_for_feature_area = array(
      'field_uib_feature_heading_style',
      'field_uib_feature_mobile_media',
    );
    $nid = $form['field_uib_area_type']['und']['#entity']->nid;
    $research_nids = array(73685,73684);
    $area_type = $form['field_uib_area_type']['und']['#entity']->field_uib_area_type['und'][0]['value'];
    if ($area_type == 'frontpage') {
      foreach ($not_for_frontpage as $nf) {
        if (isset($form[$nf])) {
          $form[$nf]['#access'] = FALSE;
        }
      }
    }
    if (in_array($area_type, array('frontpage', 'newspage'))) {
      foreach ($not_for_news_and_frontpage as $nf) {
        if (isset($form[$nf])) {
          $form[$nf]['#access'] = FALSE;
        }
      }
    }
    if ($area_type != 'feature area') {
      foreach ($only_for_feature_area as $nf) {
        if (isset($form[$nf])) {
          $form[$nf]['#access'] = FALSE;
        }
      }
    }
    if (!in_array($area_type, array('frontpage', 'newspage')) && !in_array($nid, $research_nids)) {
      foreach ($only_for_news_and_frontpage_and_research as $nf) {
        if (isset($form[$nf])) {
          $form[$nf]['#access'] = FALSE;
        }
      }
    }
    if ($area_type == 'newspage' || in_array($nid, $research_nids)) {
      unset($form['field_uib_profiled_message']['und'][5]);
    }
    $form['field_uib_area_parents']['#states'] = array(
      'required' => array(
        ':input[name="field_uib_area_type[und]"]' => array('value' => 'discipline'),
       ),
    );
    $form['#validate'][] = 'uib_area_field_uib_area_banner_css_validation_handler';
    $form['#validate'][] = 'uib_area_field_uib_area_link_section_validation_handler';
  }
  elseif ($form_id == 'menu_edit_item') {
    if (!user_access('administer menu')) {
      // For content managers: Restrict options to the current area menu
      $area_menu = substr($form['parent']['#default_value'], 0, strpos($form['parent']['#default_value'], ':'));
      $opt = array();
      foreach ($form['parent']['#options'] as $key => $value) {
        if (substr($key, 0, strpos($key, ':')) == $area_menu) {
          $opt[$key] = $value;
        }
      }
      $form['parent']['#options'] = $opt;
      $form_state['rebuild'] = TRUE;
    }
  }
  elseif ($form_id == 'uib_ou_node_form') {
    $form['title']['#access'] = FALSE;

    $not_for_level_2 = array(
      'title',
      'field_uib_ou_title',
      'field_uib_ou_id',
      'field_uib_ou_shortname',
      'field_uib_phone',
      'field_uib_fax',
      'field_uib_jobbnorge_id',
      'field_uib_mail_domain',
      'field_uib_postal_address',
      'field_uib_visit_address',
      'field_uib_geolocation',
      );
    if (in_array('innholdsprodusent', $GLOBALS['user']->roles, TRUE) && (!in_array('superbruker', $GLOBALS['user']->roles, TRUE))) {
      foreach ($not_for_level_2 as $l2) {
        if (isset($form[$l2])) {
          $form[$l2]['#access'] = FALSE;
        }
      }
    }
  }
  /*
   * Move publishing opntions tabs to first option
   */
  $form['options']['#weight'] = -29;
}

/**
 * Implements hook_node_validate().
 */
function uib_area_node_validate($node, $form, &$form_state) {
  if ($form['#form_id'] == 'area_node_form') {
    if ($form['field_uib_area_type']['und']['#value'] == 'discipline') {
      if (empty($form['field_uib_area_parents']['und'][0]['target_id']['#value'])) {
        form_set_error('field_uib_area_parents', t('Area parent is required'));
      }
    }
  }
}

/**
 * Making sure nobody uses the !important rule in custom code in field_uib_area_banner
 */
function uib_area_field_uib_area_banner_css_validation_handler(&$form, &$form_state) {
  if (mb_stripos($form_state['values']['field_uib_area_banner']['und'][0]['value'], '!important')) {
    form_set_error('field_uib_area_banner', t('You are not allowed to use the !important rule in the css. Try applying a more specific selector instead.'));
  }
}

/**
 * Custom valisation for link section
 */
function uib_area_field_uib_area_link_section_validation_handler(&$form,&$form_state) {
  $submitted_links = $form_state['values']['field_uib_link_section'];
  foreach ($submitted_links['und'][0]['field_uib_links']['und'] as $key => $value) {
    if((empty($value['title']) && !empty($value['url'])) || (!empty($value['title']) && empty($value['url'])) && is_numeric($key)) {
      form_set_error('field_uib_link_section', t('URL or Title missing from link section element'));
    }
  }
}
/**
 * Custom valisation for field collection link section item list
 */
function uib_area_field_collection_link_section_validation_handler(&$form,&$form_state) {
  $submitted_links = $form_state['values']['field_uib_links']['und'];
  foreach ($submitted_links as $key => $value) {
     if((empty($value['title']) && !empty($value['url'])) || (!empty($value['title']) && empty($value['url'])) && is_numeric($key)) {
      form_set_error('field_uib_link_section', t('URL or Title missing from link section element'));
     }
  }
}


/**
 * Lists general aliases paths for an area node.
 *
 * @param string $node_alias Node alias
 *
 * @return array List of aliases to be added or removed for this node
 */
function uib_area__list_area_aliases($node_alias = NULL) {
  if (!empty($node_alias) && (stripos($node_alias, 'foransatte') !== FALSE || stripos($node_alias, 'foremployees') !== FALSE)) {
    return array(
      'rss.xml' => array('en' => 'rss.xml', 'nb' => 'rss.xml'),
      'calrss.xml' => array('en' => 'calrss.xml', 'nb' => 'calrss.xml'),
      'messages' => array(
        'en' => 'messages',
        'nb' => 'meldinger',
      ),
    );
  }
  else {
    return array(
      'persons' => array(
        'en' => 'persons',
        'nb' => 'personer',
      ),
      'persons/faculty' => array(
        'en' => 'persons/faculty',
        'nb' => 'personer/vit',
      ),
      'persons/staff' => array(
        'en' => 'persons/staff',
        'nb' => 'personer/adm',
      ),
      'map' => array(
        'en' => 'map',
        'nb' => 'kart',
      ),
      'news-archive' => array(
        'en' => 'news-archive',
        'nb' => 'nyhetsarkiv',
      ),
      'rss.xml' => array(
        'en' => 'rss.xml',
        'nb' => 'rss.xml',
      ),
      'calendar' => array(
        'en' => 'calendar',
        'nb' => 'kalender',
      ),
      'courses' => array(
        'en' => 'courses',
        'nb' => 'emner',
      ),
      'study-programmes' => array(
        'en' => 'study-programmes',
        'nb' => 'studieprogram',
      ),
      'bachelor-programmes' => array(
        'en' => 'bachelor-programmes',
        'nb' => 'bachelorprogram',
      ),
      'master-programmes' => array(
        'en' => 'master-programmes',
        'nb' => 'masterprogram',
      ),
      'one-year-programmes' => array(
        'en' => 'one-year-programmes',
        'nb' => 'årsstudium',
      ),
      'research-groups' => array(
        'en' => 'research-groups',
        'nb' => 'forskergrupper',
      ),
      'research-schools' => array(
        'en' => 'research-schools',
        'nb' => 'forskerskoler',
      ),
      'disciplines' => array(
        'en' => 'disciplines',
        'nb' => 'fag',
      ),
      'messages' => array(
        'en' => 'messages',
        'nb' => 'meldinger',
      ),
      'messages.xml' => array(
        'en' => 'messages.xml',
      ),
      'meldinger.xml' => array(
        'nb' => 'meldinger.xml'
      ),
    );
  }
}

/**
 * Adds aliases paths to an area node.
 *
 * Adds a number of project specific aliases for area nodes (if they do not exist)
 * These aliases correspond to views paths in the views "Staff", "Area map",
 * "Recent news" etc.
 *
 * @param integer $node_nid   Node id [nid] of the node
 * @param string  $node_alias Node alias
 * @param string  $language   Language code for the node
 *
 * @return FALSE is returned if input parameters are missing
 */
function uib_area__create_area_aliases($node_nid, $node_alias, $language = NULL) {
  if (!empty($node_nid) AND !empty($node_alias)) {
    $uib_area_aliases = uib_area__list_area_aliases($node_alias);
    $node_url = 'node/' . intval($node_nid);
    $default_lang = language_default('language');
    foreach ($uib_area_aliases as $key => $pa) {
      $source_url = $node_url . '/' . $key;
      $new_alias_url = ($language) ? $node_alias . '/' . $pa[$language] : $node_alias . '/' . $pa[$default_lang];
      $new_path = ($language) ?
        array('source' => $source_url, 'alias' => $new_alias_url, 'language' => $language) :
        array('source' => $source_url, 'alias' => $new_alias_url);
      if ($existing_alias = uibx_path_load($source_url)) { // get existing alias
        if ($existing_alias[0]->alias != $new_alias_url) {
          // Alias exists for the source, but different one than this
          $existing_alias[0]->alias = $new_alias_url;
          $new_path = (array) $existing_alias[0];
          path_save($new_path);
        }
        elseif (!empty($language)) {
          if ($existing_alias[0]->language != $language) {
            // Alias exists, but not for this language
            path_save($new_path);
          }
        }
      }
      else {
        path_save($new_path);
      }
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_path_update().
 */
function uib_area_path_update($path) {
  // Update a set of additional paths if the path has changed and is an area
  if ($path['alias'] != $path['original']['alias']) {
    $tmp = explode('/', $path['source']);
    if ($tmp[0] == 'node' && is_numeric($tmp[1]) && count($tmp) == 2) {
      $node = menu_get_object();
      if ($node && $node->type == 'area' && $tmp[1] == $node->nid) {
        uib_area__create_area_aliases($tmp[1], $path['alias'], $node->language);

        // Now, update all article aliases for this area
        // Areas may have identical aliases. Thus we have to find articles for this area only.
        $query = new EntityFieldQuery;
        $result = $query->entityCondition('entity_type', 'node')
          ->propertyCondition('type', 'uib_article')
          ->fieldCondition('field_uib_area', 'target_id', $node->nid)
          ->execute();
        if ($result) {
          $path_length = strlen($path['original']['alias']);
          $path_endptr = $path_length + 1;
          foreach (array_keys($result['node']) as $article_nid) {
            if ($existing = uibx_path_load('node/' . $article_nid)) {
              foreach ($existing as $article_alias) {
                if (substr($article_alias->alias, 0, $path_length) == $path['original']['alias']) {
                  // Article alias conforming to our pathauto pattern
                  $article_alias->alias = $path['alias'] . '/' . substr($article_alias->alias, $path_endptr);
                  $article_alias = (array) $article_alias;
                  path_save($article_alias);
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_path_insert().
 */
function uib_area_path_insert($path) {
  // Add a set of additional paths for an area
  $tmp = explode('/', $path['source']);
  if ($tmp[0] == 'node' && is_numeric($tmp[1]) && count($tmp) == 2) {
    $node = node_load($tmp[1]);
    if ($node && $node->type == 'area') {
      uib_area__create_area_aliases($tmp[1], $path['alias'], $node->language);
    }
  }
}

/**
 * Deletes a number of alias paths from an area node.
 *
 * cf. the function uib_area__create_area_aliases() that creates them.
 *
 * @param integer $node_nid Node id [nid] of the node
 *
 * @return FALSE is returned if no input parameter
 */
function uib_area__remove_area_aliases($node_nid) {
  if (!empty($node_nid)) {
    $node_url = 'node/' . intval($node_nid);
    $uib_area_aliases = uib_area__list_area_aliases();
    foreach ($uib_area_aliases as $key => $pa) {
      foreach ($pa as $language => $path) {
        $source_url = $node_url . '/' . $path;
        if ($existing = uibx_path_load($source_url, $language)) { // Check if alias exists
          foreach ($existing as $path) {
            path_delete($path->pid); // remove it
          }
        }
      }
    }
  } else {
    return FALSE;
  }
}

/**
 * Implements hook_node_insert().
 *
 */
function uib_area_node_insert($node) {
  if ($node->type == 'area') {
    if (uib_area_menu_is_allowed($node)) {
      // Create a unique menu for this area
      if ($node->nid) {
        $menu_machine_name = 'menu-area-' . $node->nid;
        if (!empty($node->path['alias'])) {
          $menu_title = 'area_' . str_replace('/', '_', $node->path['alias']);
          if ($node->language == 'en') {
            // Set suffix for English menus since nb and en aliases for different nodes may be the same
            $menu_title .= '_en';
          }
        }
        else {
          // A way out if no alias was set: use the node id
          $menu_title = 'area_' . $node->nid;
        }
        $menu_description = t('Menu for') . ' ' . $node->title;
        if (!menu_load($menu_machine_name)) {
          // Create new menu
          $menu = array(
            'menu_name' => $menu_machine_name,
            'title' => $menu_title,
            'description' => $menu_description,
            );
          menu_save($menu);
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function uib_area_node_delete($node) {
  if ($node->type == 'area') {
    global $user;
    // remove uib area aliases
    uib_area__remove_area_aliases($node->nid);
    // remove the menu for this area
    if (uib_area_menu_is_allowed($node)) {
      $menu_machine_name = 'menu-area-' . $node->nid;
      if ($menu = menu_load($menu_machine_name)) {
        menu_delete($menu);
      }
    }
    // remove content owned by the area
    uib_area__cleanup($node);
    uibx_log("node/$node->nid [$node->type] deleted by user $user->uid", 'notice');
  }
}

/**
 * Control if the current node page is an employee page.
 */
function uib_area__is_employee_page() {
  $node = uib_area__get_current();
  if (isset($node->field_uib_sebra_id['und'][0]['value'])) {
    if ($node->field_uib_sebra_id['und'][0]['value'] == 519) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Is the given user a content manager for the given area.
 *
 * @return boolean
 */
function uib_area__is_content_manager($area, $user) {
  if (isset($area->field_uib_content_manager['und'])) {
    foreach ($area->field_uib_content_manager['und'] as $cm) {
      if ($user->uid == $cm['target_id'])
        return TRUE;
    }
  }
  return FALSE;
}

/**
 * List the areas (node ids) a user is content manager for.
 *
 * @param StdObject $user
 *  The user object
 * @return array
 *  A list of node ids that the user is content manager for.
 */
function uib_area__may_manage_these_areas($user) {
  $areas = array();
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'area')
    ->fieldCondition('field_uib_content_manager', 'target_id', $user->uid)
    ->execute();
  if ($result) {
    $areas = array_keys($result['node']);
  }
  return $areas;
}

/**
 * Implements hook_node_access().
 *
 * Control access to edit an area.
 */
function uib_area_node_access($node, $op, $user) {
  if ($op == 'view') {
    return NODE_ACCESS_IGNORE;
  }
  // $op is one of 'create', 'update', 'delete'
  if (is_object($node) && $node->type == 'area') {
    if (!uib_area__is_content_manager($node, $user)) {
      return NODE_ACCESS_DENY;
    }
  }
  if (is_object($node) && $node->type == 'uib_article') {
    if (!uib_area__is_content_manager(node_load($node->field_uib_area['und'][0]['target_id']), $user)) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * If the 'edit' tab of a node is missing (because of missing node_access) then
 * also hide the 'revisions' and 'translate' tabs
 */
function uib_area_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (!path_is_admin(current_path())) {
    if (empty($data['tabs']) || $data['tabs'][0]['output'][0]['#link']['path'] != 'node/%/view') {
      return;
    }

    /**
     * Load node to check if the node is an event and only display
     * node_clone action link if the article type is an event
     **/
    $node_href = explode('/',$router_item['href']);
    $node = node_load(end($node_href));
    for ($i=0;$i<count($data['actions']['output']);$i++) {
      if ($data['actions']['output'][$i]['#link']['path'] == 'node/%/clone/%' && $node->field_uib_article_type['und'][0]['value'] != 'event') {
        unset($data['actions']['output'][$i]);
      } else if ($data['actions']['output'][$i]['#link']['path'] == 'node/%/clone/%') {
        $data['actions']['output'][$i]['#link']['localized_options']['attributes'] = array('class' => 'uib_clone');
      }
    }

    $tabs = array();
    foreach ($data['tabs'][0]['output'] as $tab) {
      $path = $tab['#link']['path'];
      if ($path == 'node/%/edit') {
        // if we find the edit tab, do nothing
        return;
      }
      if ($path == 'node/%/revisions' || $path == 'node/%/translate') {
        // tabs to ignore
        continue;
      }
      $tabs[] = $tab;
    }

    // replace the tabs
    $data['tabs'][0]['count'] = count($tabs);
    $data['tabs'][0]['output'] = $tabs;
  }
}

/**
 * Assemble the current area menu for display on a page
 *
 * Implements hook_block_list_alter().
 */
function uib_area_block_list_alter(&$blocks) {
  $current_area_menu_name = uib_area__get_current_menu();
  if ($current_area_menu_name) {
    $area_menu = block_load('menu', $current_area_menu_name);
    $area_menu->region = 'navigation';
    $area_menu->visibility = 1;
    $blocks[] = $area_menu;
  }
}

/**
 * Generate a menu.
 * @param string $menu_name
 *  The menu we want to retrieve.
 *
 * @param int $active_mlid
 *  The id of the active menu link.
 *
 * @return string
 *  HTML representing the chosen menu.
 */
function uib_area__get_menu($menu_name, $active_mlid = FALSE, $levels = 2) {
  $tree = menu_tree_all_data($menu_name, NULL, $levels);
  $menu = array();
  uib_area__generate_menu_rec($menu, $tree, $active_mlid);
  $options = array();
  uib_area__menu_get_options($menu, '', $options);
  return $options;
}

/**
 * Fetch menu options (recursive)
 */
function uib_area__menu_get_options($menu, $indent, &$options) {
  foreach ($menu as $mlid => $item) {
    $options[$mlid] = $indent . $item['title'];
    if (!empty($item['below'])) {
      uib_area__menu_get_options($item['below'], $indent . '-- ', $options);
    }
  }
}

/**
 * Generate a menu array
 * [modified from menuux module]
 * This function is recursive
 *
 * @param array $menu
 *  The menu that is to be generated
 * @param array $raw_menu
 *  The menu as returned from menu_tree_all_data
 * @param int $active_mlid
 *  The id of the active link
 * @return boolean
 *  Was the mlid of the active item found in the menu?
 */
function uib_area__generate_menu_rec(&$menu, $raw_menu, $active_mlid = FALSE) {
  $has_active = FALSE;
  foreach ($raw_menu as $data) {
    if ($data['link']['hidden'] >= 0) {
      $title = truncate_utf8($data['link']['title'], 94, TRUE, FALSE);
      if ($data['link']['hidden']) {
        $title .= ' ('. t('disabled') .')';
      }
      $mlid = $data['link']['mlid'];
      $menu[$mlid]['title'] = $title;
      if ($mlid == $active_mlid) {
        $menu[$mlid]['active'] = TRUE;
        $has_active = TRUE;
      }
      $menu[$mlid]['expanded'] = FALSE;
      if ($data['below']) {
        $below = array();
        $active_child = uib_area__generate_menu_rec($below, $data['below'], $active_mlid);
        $has_active = $has_active || $active_child;
        if (!empty($below)) {
          $menu[$mlid]['below'] = $below;
        }
        if ($active_child) {
          $menu[$mlid]['expanded'] = TRUE;
        }
      }
    }
  }
  return $has_active;
}

/**
 * Checks if an area node is expected to have an area menu
 *
 * Returns TRUE if it is, FALSE if not
 *
 * @param ref $node
 * A fully populated area node object (reference)
 */
function uib_area_menu_is_allowed($node) {
  if (!empty($node) && $node->type == 'area') {
    $allowed = array(
      'faculty',
      'institute',
      'research group',
      'research school',
      'section',
      'unit',
      'frontpage',
      'focus area',
      'discipline',
      'feature area',
    );
    if (!empty($node->field_uib_area_type['und'][0]['value']) && in_array($node->field_uib_area_type['und'][0]['value'], $allowed)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_permission.
 */
function uib_area_permission() {
  $perms = array('administer uib area menus' =>
    array('title' => t('Administer uib area menus')),
    );
  return $perms;
}

/**
 * Implements hook_menu_alter.
 */
function uib_area_menu_alter(&$items) {
  // Modified from "menu admin per menu" module
  $items['admin/structure/menu']['page callback'] = 'uib_area__menu_overview_page';
  $items['admin/structure/menu']['access callback'] = 'uib_area__menupage_access';
  unset($items['admin/structure/menu']['access arguments']);
  $items['admin/structure/menu/manage/%menu']['access callback'] = 'uib_area__menu_access';
  $items['admin/structure/menu/manage/%menu']['access arguments'] = array(4);
  $items['admin/structure/menu/manage/%menu/add']['access callback'] = 'uib_area__menu_access';
  $items['admin/structure/menu/manage/%menu/add']['access arguments'] = array(4);
  $items['admin/structure/menu/item/%menu_link/edit']['access callback'] = 'uib_area__menulink_access';
  $items['admin/structure/menu/item/%menu_link/edit']['access arguments'] = array(4);
  $items['admin/structure/menu/item/%menu_link/reset']['access callback'] = 'uib_area__menulink_access';
  $items['admin/structure/menu/item/%menu_link/reset']['access arguments'] = array(4);
  $items['admin/structure/menu/item/%menu_link/delete']['access callback'] = 'uib_area__menulink_access';
  $items['admin/structure/menu/item/%menu_link/delete']['access arguments'] = array(4);
  $items['admin/structure/menu/parents']['page callback'] = 'uib_area__limit_parent_options_js';
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function uib_area_form_menu_overview_form_alter(&$form, &$form_state, $form_id) {
  if (substr($form['#menu']['menu_name'], 0, 10) == 'menu-area-') {
    $form['#post_render'][] = 'uib_area__menu_overview_form_post_render';
  }
}

/**
 * Implements hook_form_node_form_alter(&$form, &$form_state, $form_id) {
 **/
function uib_area_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  //remove fieldgroups where user doesn't have access
  if (!in_array('superbruker',$user->roles) && $user->uid != 1) {
    unset($form['#groups']['group_level_1']);
    unset($form['#fieldgroups']['group_level_1']);
    foreach ($form['#group_children'] as $key => $value) {
      if ($value == 'group_level_1') {
        unset($form['#group_children'][$key]);
      }
    }
  }
}

function uib_area__menu_overview_form_post_render($content, $element) {
  $limit = 2;
  if ($limit < MENU_MAX_DEPTH) {
    $javascript = &drupal_static('drupal_add_js', array());
    if (isset($javascript['settings']['data'])) {
      foreach ($javascript['settings']['data'] as $i => $data) {
        if (isset($data['tableDrag']['menu-overview']['menu-plid'])) {
          $found = TRUE;
          break;
        }
      }
      if (!empty($found)) {
        array_splice($javascript['settings']['data'], $i, 1);
        if ($limit > 1) {
          drupal_add_tabledrag('menu-overview', 'match', 'parent', 'menu-plid', 'menu-plid', 'menu-mlid', TRUE, $limit - 1);
        }
      }
    }
  }
  return $content;
}

/**
 * Implements hook_form_menu_edit_item_alter()
 */
function uib_area_form_menu_edit_item_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (substr($form['original_item']['#value']['menu_name'], 0, 10) == 'menu-area-' && !in_array('superbruker', $user->roles) && $user->uid != 1) {
    if (isset($form['parent']['#options'])) {
      $relative_depth = !empty($form['has_children']['#value']) && ($item = $form['original_item']['#value']) ? menu_link_children_relative_depth($item) : 0;
      $form['parent']['#options'] = uib_area__filter_parent_options($form['parent']['#options'], $relative_depth);
    }
  }
}

/**
 * Callback to limit parent depth
 */
function uib_area__limit_parent_options_js() {
  $available_menus = array();
  if (isset($_POST['menus']) && count($_POST['menus'])) {
    foreach ($_POST['menus'] as $menu) {
      $available_menus[$menu] = $menu;
    }
  }
  $options = _menu_get_options(menu_get_menus(), $available_menus, array('mlid' => 0));
  $options = uib_area__filter_parent_options($options);

  drupal_json_output($options);
}

/**
 * Filter parent options
 */
function uib_area__filter_parent_options($options, $relative_depth = 0, $indent = '--') {
  $menus_options = array();
  foreach ($options as $key => $option) {
    list($menu_name, ) = explode(':', $key);
    $menus_options[$menu_name][$key] = $option;
  }
  $options = array();
  foreach ($menus_options as $menu_name => $menu_options) {
    $limit = 2;
    $indents = str_repeat($indent, max(1, $limit - $relative_depth));
    foreach ($menu_options as $key => $option) {
      if (strpos($option, $indents) !== 0) {
        $options[$key] = $option;
      }
    }
    return $options;
  }
}

/**
 * Callback to check access to menu administration page.
 */
function uib_area__menupage_access() {
  if (user_access('administer menu')) {
    return TRUE;
  }
  if (user_access('administer uib area menus')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Callback to check access to relevant area menus.
 */
function uib_area__menu_access($menu = NULL) {
  global $user;
  if (user_access('administer menu')) {
    return TRUE;
  }
  $managing_areas = uib_area__may_manage_these_areas($user);
  foreach ($managing_areas as $area_nid) {
    if ($menu['menu_name'] == 'menu-area-' . $area_nid) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Callback to check access to relevant area menu links.
 */
function uib_area__menulink_access($menu_link = NULL) {
  global $user;
  if (user_access('administer menu')) {
    return TRUE;
  }
  $managing_areas = uib_area__may_manage_these_areas($user);
  foreach ($managing_areas as $area_nid) {
    if ($menu_link['menu_name'] == 'menu-area-' . $area_nid) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Creates a menu overview page,
 * showing only those menus that the user has access to
 * The user need to have the 'administer uib area menus' permission set
 * and needs to be content manager for the area.
 *
 * @return render_array
 */
function uib_area__menu_overview_page() {
  // Modified from "menu admin per menu" module
  if (user_access('administer menu')) {
    return menu_overview_page();
  }

  $result = db_query("SELECT * FROM {menu_custom} ORDER BY title", array(), array('fetch' => PDO::FETCH_ASSOC));
  $header = array(t('Title'), array('data' => t('Operations'), 'colspan' => '2'));
  $rows = array();
  foreach ($result as $menu) {
    if (uib_area__menu_access($menu)) {
      $row = array(theme('menu_admin_overview', array('title' => $menu['title'], 'name' => $menu['menu_name'], 'description' => $menu['description'])));
      $row[] = array('data' => l(t('list links'), 'admin/structure/menu/manage/' . $menu['menu_name']));
      $row[] = array('data' => l(t('add link'), 'admin/structure/menu/manage/' . $menu['menu_name'] . '/add'));
      $rows[] = $row;
    }
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 * Add non field elements to field group.
 */
function uib_area_field_group_build_pre_render_alter(&$element) {
  if ($element['#entity_type'] == 'node' && $element['#bundle'] == 'area' && isset($element['group_two_column'])) {
    if ($element['group_two_column']['group_column_first']) {
      $nid = $element['#node']->nid;
      $tmp_block_html = views_embed_view('faculty_departments_kids', 'block', $nid);
      if (stripos($tmp_block_html, 'view-content') !== FALSE) {
        if (uib_area__has_bg_box('views-faculty-department-kids')) {
          $ptr = mb_strpos($tmp_block_html, '>') + 1;
          $tmp_block_html = drupal_substr($tmp_block_html, 0, $ptr) . '<div class="opaque-box">' . drupal_substr($tmp_block_html, $ptr) . '</div>';
        }
        $element['group_two_column']['group_column_first']['field_uib_kids']['#markup'] = $tmp_block_html;
        $element['group_two_column']['group_column_first']['field_uib_kids']['#weight'] = 6;
      }
    }
    if ($element['group_two_column']) {
      $column_first_empty = TRUE;
      if ($element['group_two_column']['group_column_first']) {
        foreach ($element['group_two_column']['group_column_first'] as $key => $value) {
          if (substr($key, 0, 1) != '#') {
            if (!empty($value)) {
              $column_first_empty = FALSE;
              break;
            }
          }
        }
      }
      $column_second_empty = TRUE;
      if ($element['group_two_column']['group_column_second']) {
        foreach ($element['group_two_column']['group_column_second'] as $key => $value) {
          if (substr($key, 0, 1) != '#') {
            if (!empty($value)) {
              $column_second_empty = FALSE;
              break;
            }
          }
        }
      }
      if ($column_first_empty || $column_second_empty) {
        $element['group_two_column']['#prefix'] .= '<div class="full-width">';
        $element['group_two_column']['#suffix'] .= '</div>';
      }
    }
  }
}

/**
 * Determine if a field (etc) should have background box on area pages
 */
function uib_area__has_bg_box($field_name) {
  $boxed = array(
    'field_uib_secondary_text',
    'field_uib_link_section',
    'field_uib_profiled_testimonial',
    'views-faculty-department-kids',
  );
  if (!empty($field_name) && in_array($field_name, $boxed)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_query_TAG_alter().
 */
function uib_area_query_uib_study_order_by_title_alter(QueryAlterableInterface $query) {
  $order_by =& $query->getOrderBy();
  if (isset($order_by['field_data_field_uib_study_title_field_uib_study_title_value'])) {
    $query->addExpression('lower(field_data_field_uib_study_title.field_uib_study_title_value)', 'lower_title');

    // replace orderBy entry with the lower case version
    $copy = $order_by;
    $order_by = array();
    foreach ($copy as $key => $value) {
      $order_by[
        $key == 'field_data_field_uib_study_title_field_uib_study_title_value' ?
        'lower_title' : $key
       ] = $value;
    }
  }
}

/**
 * Implements hook_menu().
 */
function uib_area_menu() {
  $items['node/%node/ties'] = array(
    'title' => 'Ties',
    'page callback' => 'uib_area__ties',
    'page arguments' => array(1),
    'access callback' => 'uib_area__ties_access_check',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/staff_status'] = array(
    'title' => 'Staff status',
    'page callback' => 'uib_area__staff_status',
    'page arguments' => array(1),
    'access callback' => 'uib_area__staff_status_access_check',
    'type' => MENU_LOCAL_TASK,
  );

  $items['uib_area/node/autocomplete'] = array(
    'page callback' => 'uib_area__node_autocomplete',
    'file' => 'uib_area.module',
    'access arguments' => array('administer content translations'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/*
 * Check access to the staff status local task
 */
function uib_area__staff_status_access_check() {
  global $user;
  $node = node_load(arg(1));
  if ($node && $node->type == 'area') {
    if ($user->uid == 1) {
      return TRUE;
    }
    if (in_array('superbruker', $user->roles) || in_array('admin', $user->roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Setup contents of the staff status local task tab
 */
function uib_area__staff_status($area_node) {
  $area = entity_metadata_wrapper('node', $area_node);
  $staff = array();
  $staff[] = array(
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h1',
      '#value' => t('Staff and content manager synchronisation problems'),
      ),
    );

  // Status from previous synchronisation
  $staff_status = $area->field_uib_staff_status->value();
  $user_list = array();
  if ($staff_status) {
    $usernames = explode(',', $staff_status);
    foreach ($usernames as $user) {
      if ($entity = user_load_by_name($user)) {
        $user_list[] = l($user, 'user/' . $entity->uid);
      }
      else {
        $user_list[] = $user . ' (' . t('Not currently a user') . ')';
      }
    }
    $user_list = implode('<br>', $user_list);
  }
  else {
  }

  $staff['last'] = array(
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  );
  $staff['last'] = array(
    'header' => array(
      '#type' => 'html_tag',
      '#tag' => 'h3',
      '#value' => t('Users problematical in last area synchronisation'),
    ),
  );
  if ($user_list) {
    $staff['last']['info'] = array(
      '#markup' => '<p>' . $user_list . '</p>',
    );
  }
  else {
    $staff['last']['info'] = array(
      '#markup' => '<p>' . t('No synchronisation problems found') . '.</p>',
    );
  }

  // Current staff and content manager status
  $staff['current'] = array(
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  );
  $staff['current'] = array(
    'header' => array(
      '#type' => 'html_tag',
      '#tag' => 'h3',
      '#value' => t('Current staff status'),
    ),
  );

  $markup = array();
  // Assemble info on staff and content managers
  $area_sebra_id = $area->field_uib_sebra_id->value();
  $all_area_roles = uib_sebra__sws_get('omraaderoller');

  if ($area_sebra_id) {
    $area_doc = uib_sebra__sws_get("omraader?omraadekode=$area_sebra_id");
    // Check staff
    if (isset($area_doc->omraade->visninger->uibid)) {
      $staff_list = array_unique((array)$area_doc->omraade->visninger->uibid);
      sort($staff_list);
      $staff_table = uib_area__staff_table($staff_list);
    }
    $staff['current']['staff'] = array(
      '#prefix' => '<div id="staff-list">',
      '#suffix' => '</div>',
      'title' => array(
        '#type' => 'html_tag',
        '#tag' => 'h4',
        '#value' => t('Staff'),
      ),
    );
    if (!empty($staff_table['#rows'])) {
      $staff['current']['staff']['staff_table'] = $staff_table;
    }
    else {
      $staff['current']['staff']['ok']['#markup'] = t('No problems found in staff list') . '.';
    }

    // Check content managers
    $area_roles = uib_sebra__get_area_roles($all_area_roles, $area_sebra_id);
    if (!empty($area_roles)) {
      $content_manager_list = array_unique($area_roles);
      sort($content_manager_list);
      $content_manager_table = uib_area__staff_table($content_manager_list);
    }
    $staff['current']['content_managers'] = array(
      '#prefix' => '<div id="content-manager-list">',
      '#suffix' => '</div>',
      'title' => array(
        '#type' => 'html_tag',
        '#tag' => 'h4',
        '#value' => t('Content managers'),
      ),
    );
    if (!empty($content_manager_table['#rows'])) {
      $staff['current']['content_managers']['content_manager_table'] = $content_manager_table;
    }
    else {
      $staff['current']['content_managers']['ok']['#markup'] = t('No problems found in content manager list') . '.';
    }
  }
  else {
    $markup[] = t('No sebra id present for the area') . '.';
  }
  if ($markup) {
    $staff['current']['info']['#markup'] = '<p>' . implode('<br>', $markup) . '</p>';
  }

  return $staff;
}

/**
 * Setup a staff table
 */
function uib_area__staff_table($staff_list) {
  $staff_table = array(
    '#theme' => 'table',
    '#header' => array(t('User'), t('Name'), t('Main account'), t('Message')),
  );
  $rows = array();
  foreach ($staff_list as $uname) {
    $report = uib_area__staff_check($uname);
    if ($report['msgs']) {
      $row = array();
      if ($report['user']) {
        $row[0] = ($report['uid']) ? l($report['user'], 'user/' . $report['uid']) : $report['user'];
      }
      $row[1] = ($report['name']) ? $report['name'] : '';
      if ($report['main']) {
        $row[2] = ($report['main_uid']) ? l($report['main'], 'user/' . $report['main_uid']) : $report['main'];
      }
      else {
        $row[2] = '';
      }
      $row[3] = ($report['msgs']) ? implode(', ', $report['msgs']) : '';
      $rows[] = $row;
    }
  }
  $staff_table['#rows'] = $rows;

  return $staff_table;
}

/**
 * Check and report status for a user
 */
function uib_area__staff_check($username) {
  $msgs = array();
  $name = '';
  $uid = 0;
  $main = '';
  $main_uid = 0;

  // Check that user has an account in w3
  if ($u = user_load_by_name($username)) {
    $uid = $u->uid;
    $name = $u->field_uib_first_name['und'][0]['value'] . ' ' . $u->field_uib_last_name['und'][0]['value'];
  }
  else {
    $msgs[] = t('Not a user');
  }

  // Check if user has an account in Sebra
  if (! uib_sebra__sws_get("person?id=$username")) {
    $msgs[] = t('No active account in Sebra');
  }

  // Check Sebra main account
  $main = uib_sebra_get_main_user($username);
  $main = (string)$main;
  if (empty($main)) {
    $msgs[] = t('No main account in Sebra');
  }

  // Check if this is the user's main Sebra account
  if ($main == $username) {
    $main = '';
  }
  else {
    $msgs[] = t('Non-main account used');
    if ($main) {
      if ($main_user = user_load_by_name($main)) {
        $main_uid = $main_user->uid;
      }
    }
  }

  return array(
    'user' => $username,
    'name' => $name,
    'uid' => $uid,
    'main' => $main,
    'main_uid' => $main_uid,
    'msgs' => $msgs,
  );
}

/**
 * Check access to the ties local task
 */
function uib_area__ties_access_check() {
  $node = node_load(arg(1));
  if ($node && $node->type == 'area') {
    if (user_access('delete any area content')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Setup contents of the ties local task tab
 */
function uib_area__ties($node) {
  $ties = array();
  // Node info
  $ties['area_node'] = uib_area__ties_node($node);
  // Menu info
  $ties['menu'] = uib_area__ties_menu($node->nid);
  // Menu links
  $ties['menu_links'] = uib_area__ties_menu_links($node->nid);
  // Aliases
  $ties['aliases'] = uib_area__ties_aliases($node->nid);
  // Redirects
  $ties['redirects'] = uib_area__ties_redirects($node->nid);
  // Children
  $ties['children'] = uib_area__ties_children($node->nid);
  // Connected content
  $ties['connected'] = uib_area__ties_content($node->nid);
  return $ties;
}

/**
 * Format the node section of the ties tab
 */
function uib_area__ties_node($area_node) {
  if (empty($area_node) || $area_node->type != 'area') {
    return array();
  }
  $published = ($area_node->status) ? t('published') : t('unpublished');
  return array(
    '#prefix' => '<div id="node-info">',
    '#suffix' => '</div>',
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h1',
      '#value' => $area_node->title,
      ),
    'text' => array(
      '#markup' => '<p>' . drupal_ucfirst($area_node->type) . ' ' . t('node') . ' ' . $area_node->nid . '<br>' .
      t('status') . ': ' . $published . '<br>' .
      t('language') . ': ' . $area_node->language . '</p>',
      ),
    );
}

/**
 * Build the menu section of the ties tab
 */
function uib_area__ties_menu($area_nid) {
  // Menu and menu links
  $area_path = 'node/' . $area_nid;
  $menu_connection = array(
  '#prefix' => '<div id="connected-menu">',
  '#suffix' => '</div>',
  'title' => array(
    '#type' => 'html_tag',
    '#tag' => 'h2',
    '#value' => t('Menu'),
    ),
  );
  if ($area_menu = menu_load('menu-area-' . $area_nid)) {
    $menu_connection['menu'] = array(
      '#markup' => '<p><span class="menu-title">' . $area_menu['title'] . '</span><br>' . t('machine name') . ': ' . $area_menu['menu_name'] . '</p>',
      );
  }
  else {
    $menu_connection['menu'] = array(
      '#markup' => '<p>' . t('No menu') . '</p>',
      );
  }
  return $menu_connection;
}

/**
 * Build the menu links section of the ties tab
 */
function uib_area__ties_menu_links($area_nid) {
  $area_path = 'node/' . $area_nid;
  $menu_links = array(
    '#prefix' => '<div id="menu-links">',
    '#suffix' => '</div>',
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Menu links'),
      ),
    );
  $result = db_query('SELECT mlid, link_path, menu_name, link_title, hidden FROM {menu_links} WHERE link_path LIKE :lpt',
    array(':lpt' => $area_path . '%')
    );
  if ($result) {
    $lnk_table = array(
      '#theme' => 'table',
      '#header' => array(t('link id'), t('menu name'), t('path'), t('link title'), t('hidden')),
      );
    $rows = array();
    foreach ($result as $lnk) {
      if ($lnk->menu_name != 'area') {
        $tmp = array($lnk->mlid, $lnk->menu_name, l($lnk->link_path, $lnk->link_path), truncate_utf8($lnk->link_title, 80, TRUE, TRUE));
        $tmp[] = ($lnk->hidden) ? t('yes') : t('no');
        $rows[] = $tmp;
      }
    }
    if (!empty($rows)) {
      $lnk_table['#rows'] = $rows;
      $menu_links['links'] = $lnk_table;
    }
  }
  if (empty($menu_links['links'])) {
    $menu_links['links'] = array(
      '#markup' => '<p>' . t('No menu links point to this node') . '</p>',
      );
  }
  return $menu_links;
}

/**
 * Build the aliases section of the ties tab
 */
function uib_area__ties_aliases($area_nid) {
  // Aliases
  $area_path = 'node/' . $area_nid;
  $aliases = array(
    '#prefix' => '<div id="aliases">',
    '#suffix' => '</div>',
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Aliases'),
      ),
    );
  $result = db_query('SELECT source, alias, language FROM {url_alias} WHERE source LIKE :lpt',
    array(':lpt' => $area_path . '%')
    );
  if ($result) {
    $alias_table = array(
      '#theme' => 'table',
      '#header' => array(t('alias'), t('source'), t('language')),
      );
    $rows = array();
    foreach ($result as $alias) {
      $rows[] = array($alias->alias, l($alias->source, $alias->source), $alias->language);
    }
    if (!empty($rows)) {
      $alias_table['#rows'] = $rows;
      $aliases['aliases'] = $alias_table;
    }
  }
  if (empty($aliases['aliases'])) {
    $aliases['aliases'] = array(
      '#markup' => '<p>' . t('No aliases') . '</p>',
      );
  }
  return $aliases;
}

/**
 * Build the redirects section of the ties tab
 */
function uib_area__ties_redirects($area_nid) {
  // Redirects
  $area_path = 'node/' . $area_nid;
  $redirects = array(
    '#prefix' => '<div id="redirects">',
    '#suffix' => '</div>',
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Redirects'),
      ),
    );
  $area_alias = path_load($area_path);
  $query = 'SELECT source, count FROM {redirect} WHERE redirect = :lpt';
  $data = array(':lpt' => $area_path);
  if (!empty($area_alias['alias'])) {
    $query .= ' OR redirect = :als OR redirect = :lal';
    $data[':als'] = $area_alias['alias'];
    $data[':lal'] = $area_alias['language'] . '/' . $area_alias['alias'];
  }
  $result = db_query($query, $data);
  if ($result) {
    $redirects_table = array(
      '#theme' => 'table',
      '#header' => array(t('source'), t('count')),
      );
    $rows = array();
    foreach ($result as $redirect) {
      $rows[] = array(l($redirect->source, $redirect->source), $redirect->count);
    }
    if (!empty($rows)) {
      $redirects_table['#rows'] = $rows;
      $redirects['redirects'] = $redirects_table;
    }
  }
  if (empty($redirects['redirects'])) {
    $redirects['redirects'] = array(
      '#markup' => '<p>' . t('No redirects') . '</p>',
      );
  }
  return $redirects;
}

/**
 * Build the node children section of the ties tab
 */
function uib_area__ties_children($area_nid) {
  // Is parent of
  $children = array(
    '#prefix' => '<div id="children">',
    '#suffix' => '</div>',
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Area children'),
      ),
    'text' => array(
      '#markup' => '<p>' . t('Areas of which this area is a parent') . '</p>',
      ),
    );
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('field_uib_area_parents', 'target_id', $area_nid)
    ->execute();
  if ($result) {
    $children_table = array(
      '#theme' => 'table',
      '#header' => array(t('path')),
      );
    $rows = array();
    foreach ($result['node'] as $child) {
      $child_path = 'node/' . $child->nid;
      $child_path_alias = path_load($child_path);
      $rows[] = array(l($child_path, $child_path), $child_path_alias['alias']);
    }
    if (!empty($rows)) {
      $children_table['#rows'] = $rows;
      $children['children'] = $children_table;
    }
  }
  if (empty($children['children'])) {
    $children['children'] = array(
      '#markup' => '<p>' . t('No children') . '</p>',
      );
  }
  return $children;
}

/**
 * Build the connected content section of the ties tab
 */
function uib_area__ties_content($area_nid) {
  // Connected content
  $connected_content = array(
    '#prefix' => '<div id="connected-articles">',
    '#suffix' => '</div>',
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Connected content nodes'),
      ),
  );
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('field_uib_area', 'target_id', $area_nid)
    ->execute();
  if ($result) {
    $connect_tbl = array();
    $connect_tbl['#theme'] = 'table';
    $connect_tbl['#header'] = array(t('node'), t('title'), t('type'), t('article type'), t('owned'), t('shared'), t('related from'));
    $rows = array();
    $related_nodes = entity_load('node', array_keys($result['node']));
    foreach ($related_nodes as $rnid => $rnode) {
      $related = entity_metadata_wrapper('node', $rnode);
      $tmp = array(l($related->getIdentifier(), 'node/' . $related->getIdentifier()),
        truncate_utf8($related->title->value(), 70, TRUE, TRUE),
        $related->type->value(),
        );
      $tmp[] = ($related->type->value() == 'uib_article') ? $related->field_uib_article_type->value() : '';
      $tmp[] = ($related->field_uib_area[0]->raw() == $area_nid) ? t('yes') : t('no');
      $tmp[] = (count($rnode->field_uib_area['und']) > 1) ? t('yes') : t('no');
      // Check if this is related content
      $result = db_select('field_data_field_uib_relation', 'r')
        ->fields('r', array('entity_id'))
        ->condition('field_uib_relation_target_id', $rnid, '=')
        ->execute()
        ->fetchAssoc();
      if ($result) {
        $rel = '';
        foreach ($result as $entity_id) {
          $rel .= l($entity_id, "node/$entity_id") . ' ';
        }
        $tmp[] = $rel;
      }
      else {
        $tmp[] = '';
      }
      $rows[] = $tmp;
    }
    $connect_tbl['#rows'] = $rows;
    $connected_content['connected'] = $connect_tbl;
  }
  else {
    $connected_content['text'] = array('#markup' => '<p>' . t('No content') . '</p>');
  }
  return $connected_content;
}

/**
 * Cleanup when an area is to be deleted.
 *
 * @param StdObject $area_node
 *   Node object of the area node
 */
function uib_area__cleanup($area_node) {
  if (empty($area_node)) {
    return FALSE;
  }
  global $user;
  $area = $area_node->nid;
  $area_path = 'node/' . $area;

  // Remove any menu links pointing to the area node
  $result = db_query('SELECT mlid FROM {menu_links} WHERE link_path LIKE :lpt',
    array(':lpt' => $area_path . '%')
    );
  if ($result) {
    foreach ($result as $record) {
      menu_link_delete($record->mlid);
    }
  }

  // Remove any aliases pointing to the node
  $area_alias = path_load($area_path);
  path_delete(array('source' => $area_path,));

  // Remove any redirects pointing to the node
  redirect_delete_by_path($area_path);
  if (!empty($area_alias['alias'])) {
    redirect_delete_by_path($area_alias['alias']);
    redirect_delete_by_path($area_alias['language'] . '/' . $area_alias['alias']);
  }

  // Connected content
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('field_uib_area', 'target_id', $area)
    ->execute();
  if ($result) {
    $related_nodes = entity_load('node', array_keys($result['node']));
    foreach ($related_nodes as $rnid => $rnode) {
      if ($rnode->field_uib_area['und'][0]['target_id'] == $area) {

        // Remove articles etc owned by the area
        uibx_log("node/$rnode->nid [$rnode->type] deleted by user $user->uid", 'notice');
        node_delete($rnid);

        // Remove related content indications pointing to the deleted article
        $query = new EntityFieldQuery;
        $result = $query
          ->entityCondition('entity_type', 'node')
          ->fieldCondition('field_uib_relation', 'target_id', $rnid)
          ->execute();
        if ($result) {
          $rc_nodes = entity_load('node', array_keys($result['node']));
          foreach ($rc_nodes as $rc_node) {
            $rc_last = count($rc_node->field_uib_relation['und']) - 1;
            for ($i = $rc_last; $i >= 0; $i--) {
              if ($rc_node->field_uib_relation['und'][$i]['target_id'] == $rnid) {
                unset($rc_node->field_uib_relation['und'][$i]);
              }
            }
            node_save($rc_node);
          }
        }
      }
      else {
        // Remove the area from articles not owned by the area ("bobbling")
        $area_last = count($rnode->field_uib_area['und']) - 1;
        for ($i = $area_last; $i >= 0; $i--) {
          if ($rnode->field_uib_area['und'][$i]['target_id'] == $area) {
            unset($rnode->field_uib_area['und'][$i]);
          }
        }
        node_save($rnode);
      }
    }
  }

  // Connect any area children to their grand-parent, if possible
  $grand_parent_nid = FALSE;
  if (!empty($area_node->field_uib_area_parents['und'][0]['target_id'])) {
    $grand_parent_nid = $area_node->field_uib_area_parents['und'][0]['target_id'];
  }
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('field_uib_area_parents', 'target_id', $area)
    ->execute();
  if ($result) {
    $children = entity_load('node', array_keys($result['node']));
   foreach ($children as $child) {
      $grand_parent_present = FALSE;
      $area_last = count($child->field_uib_area_parents['und']) - 1;
      for ($i = $area_last; $i >= 0; $i--) {
        if ($child->field_uib_area_parents['und'][$i]['target_id'] == $grand_parent_nid) {
          $grand_parent_present = TRUE;
        }
        if ($child->field_uib_area_parents['und'][$i]['target_id'] == $area) {
          unset($child->field_uib_area_parents['und'][$i]);
        }
      }
      if (!$grand_parent_present && $grand_parent_nid) {
        $child->field_uib_area_parents['und'][] = $grand_parent_nid;
      }
      node_save($child);
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * For related content in Employee pages show the images of the ou if
 * the content does not belong to the emplyoee area.
 */
function uib_area_node_view($node, $view_mode, $langcode) {
  $SPECIAL_AREA_NIDS = array(
    array('nb'=>1, 'en'=>2),
    array('nb'=>48591, 'en'=>48593),
    array('nb'=>84297, 'en'=>84298),
  );
  // If the view mode of the current article is short_teaser it is
  // safeish to assume that it is being shown as related content.
  $current_node = menu_get_object();
  if ($view_mode == 'short_teaser' && $node->type != 'area' && $node->type != 'uib_ou' && $current_node->type != 'uib_study' ) {
    $cur_area = uib_area__get_current();
    $cur_area_parents = array();
    uib_area__get_parentage($cur_area->nid, $cur_area_parents);

    //Check that the current area is Employee or a child of Employee
    if (uib_area__have_common_element($SPECIAL_AREA_NIDS, $cur_area_parents)) {
      // Check that the area of the current related content is not Employee or a
      // child of employee
      if (isset($node->field_uib_area['und'][0]['target_id'])){
        $node_area_id = $node->field_uib_area['und'][0]['target_id'];
        $node_area_parents = array();
        uib_area__get_parentage($node_area_id, $node_area_parents);
        if (!uib_area__have_common_element($SPECIAL_AREA_NIDS, $node_area_parents)) {

          // Search for the image of the corresponding ou to add
          $ou = uib_area__get_faculty_ou_nid($node_area_id);
          if (isset($ou)){
            $ou = node_load($ou);
            if (count($ou->field_uib_main_media) > 0) {

              switch ($node->type) {
                case 'uib_external_content':
                  $field = 'field_uib_media';
                  break;

                case 'uib_article':
                case 'uib_study':
                  $field = 'field_uib_main_media';
                  break;
              }
              if (isset($field)) {
                // Assign the ou main media as the node main media
                // Remove all previously associated media
                $node->field_uib_main_media = $node->field_uib_media = array();
                $node->content['field_uib_media'] = $node->content['field_uib_main_media'] = array();

                $node->{$field} = $ou->field_uib_main_media;
                // Since at this point in the execution the view render array has
                // already been created, generate it for the new media
                $new_image = field_view_field('node', $node, $field, $view_mode);
                $node->content[$field] = $new_image;
              }
            }
          }
        }
      }
    }
  }
}

/**
 * implements hook_views_post_render
 **/
function uib_area_views_post_render(&$view,&$output,&$cache) {
  /**
   * Change teaser object url to KMD remote url for KMD events
   **/
  if ($view->args[0] == '102518') {
    foreach ($view->result as $obj) {
      if (isset($obj->_field_data['nid']['entity']->field_uib_kmd_data['und'][0]['value'])) {
        global $base_url;
        global $language;
        //replace chars from title, still allowing æøå as characters, but
        //replacing them with url encoded characters
        $title = urlencode(strtolower(preg_replace(array('/[^a-zA-Z0-9 æøå\/]/', '/[ -]+/', '/^-|-$/','/-in-/','/-for-/'),array('', '-', '','-','-'), $obj->node_title)));
        $ref_url = $base_url .'/'. $language->language .'/kmd/'. $obj->nid . '/' . $title;
        $ref_baseless = '/'. $language->language .'/kmd/'. $obj->nid . '/' . $title;
        $kmd_href = json_decode($obj->_field_data['nid']['entity']->field_uib_kmd_data['und'][0]['value'])->href;
        //Replace the internal URL with the given URL for the event
        $output = str_replace($ref_url, $kmd_href, $output);
        //Also need to replace the relative URL's
        $output = str_replace($ref_baseless, $kmd_href, $output);
      }
    }
  }
}

function uib_area__have_common_element($array_a, $array_b) {
  foreach($array_a as $aa) {
    foreach($aa as $a){
      if (in_array($a, $array_b)){
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Determine organisational level based on ou id
 */
function uib_area__org_type($sebra_id = NULL) {
  if ($sebra_id) {
    if ($sebra_id == '000000') {
      return 'university';
    }
    elseif (substr($sebra_id, 2) == '0000') {
      return 'faculty';
    }
    elseif (substr($sebra_id, 4) == '00') {
      return 'institute';
    }
    else {
      return 'other';
    }
  }
}

/**
 * Find the the most relevant area(s) for an ou
 */
function uib_area__ou_area($ou_nid, $level = array()) {
  if (empty($level)) {
    $level = array('faculty', 'institute', 'unit');
  }
  $area = NULL;
  // Get area (certain types) connected to ou
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'area')
    ->fieldCondition('field_uib_ou', 'target_id', $ou_nid)
    ->fieldCondition('field_uib_area_type', 'value', $level)
    ->execute();
  if (!empty($result['node'])) {
    $area = entity_load('node', array_keys($result['node']));
  }
  return $area;
}

/**
 * Infer a parental ou id from ou id
 */
function uib_area__inferred_ou_parent(&$known_ids, $org_type, $ou_id) {
  if ($org_type == 'university') {
    return NULL;
  }
  elseif ($org_type == 'faculty') {
    $parent_id = '000000';
  }
  elseif ($org_type == 'institute' || $org_type == 'unit') {
    $parent_id = substr($ou_id, 0, 2) . '0000';
  }
  else {
    // $parent_id = substr($ou_id, 0, 4) . '00';
    // We currently (for the purpose of the uib_organisation taxonomy)
    // do not deal with these ous.
    return FALSE;
  }
  if (!isset($known_ids[$parent_id])) {
    $parent_id = '000000';
  }
  return $parent_id;
}

function uib_w3__tabsScript(){
  $jq = <<<'EOD'
jQuery( document ).ready( function($){
  // Loading jquery ui.tabs
  var selectors = [
    '.profile .uib-tabs-container',
    '#block-uib-study-study-content .studytabs',
  ];
  $(selectors.join()).tabs(
    {
      beforeActivate: function(event, ui){
        if(history.pushState) {
          history.pushState(null, null, ui.newPanel.selector);
        }
        else {
          window.location.hash = ui.newPanel.selector;
        }
      }
  });
  hash = location.hash;
  if (navigator.userAgent.search('MSIE') != -1 && hash.length > 0) {
    location.hash='';
  }
  $(selectors.join()).tabs('option', 'active', hash);
  if(history.pushState && hash.length > 0) {
    setTimeout(function(){
      history.pushState(null, null, hash);
      $('#tabs-dropdown-menu-id').val(hash.substr(1));
    }, 1);
  }
  else if(hash.length > 0) {
    window.location.hash = hash;
  }
  window.scrollTo(0, 0);
  if($('.i18n-en').length) {
    var link = 'http://www.uib.no/en/ub/107392/contact-fine-art-and-design-library';
  } else {
    var link = 'http://www.uib.no/ub/107391/kontakt-bibliotek-kunst-og-design';
  }
  $(".ub-khib a").click(function() {
    location.assign(link);
  });
});
EOD;
//   $jq='';
return $jq;
}

function uib_w3__accordion_script(){
  $jq = <<<'EOD'
jQuery( document ).ready( function($){
  // Loading accordion (previously tabs)
  // Create an independent accordion for each div
  container = $(".uib-tabs-container > .tabs-content > div");
  container.accordion({
    header: "h2",
    collapsible: true,
    heightStyle: "content",
    active: false,
    activate: function(event, ui) {
      if (ui.newHeader.size()) {
        if(history.pushState) {
          history.pushState(null, null, '#' + $(event.target).attr('id'));
        }
      }
    }
  });
  if (window.location.hash) {
    $(".uib-tabs-container > .tabs-content > div"
      + window.location.hash).accordion('option', 'active', 0);
  }
});
EOD;
//   $jq='';
return $jq;
}

/**
 * Get the organisation unit id, like 184.10 for Det humanistiske fakultet.
 * @param $ou_id the OU node id
 */
function uib_area__get_organisation_unit($ou_id) {
  $sql = "SELECT substring(field_uib_ou_id_value FROM 1 FOR 2)::int AS toplevel,
    substring(field_uib_ou_id_value FROM 3 FOR 2)::int AS sublevel
    FROM field_data_field_uib_ou_id
    WHERE entity_id = :entity_id";
  $result = db_query($sql, array('entity_id' => intval($ou_id)));
  $o = $result->fetchObject();
  $retval = '184';
  if ($o->toplevel == 0) return $retval;
  $retval .= ".{$o->toplevel}";
  if ($o->sublevel > 0) {
    $retval .= ".{$o->sublevel}";
  }
  return $retval;
}

/**
* Get the number of news articles linked to this area
*/
function uib_area__count_news_articles($area_nid = -1) {
  $sql = "SELECT count(news.entity_id) as news
    FROM node n
    inner join field_data_field_uib_area a on a.field_uib_area_target_id=n.nid
    inner join node c on a.entity_id=c.nid and n.language = c.language
    left join field_data_field_uib_article_type news on news.entity_id=c.nid
    where
    n.nid='{$area_nid}'
    and n.status=1
    and c.status=1
    and news.field_uib_article_type_value = 'news'";
  $res = db_query($sql);
  return $res->fetchField(0);
}

/**
 * Current node is area
 */
function uib_area__current_node_is_area() {
  $node = menu_get_object();
  return $node->type == 'area' ? TRUE : FALSE;
}

/**
 * Redirect on form submit
 */
function uib_area__redirect($form, &$form_state) {
  if ($form['#token'] == 'node_delete_confirm') {
    $form_state['redirect'] = 'webdesk';
  }
}

