<?php

function uib_sebra__sync_places($limit) {
  uib_sebra__update_uib_ou('000000');

  $places = uib_sebra__sws_get('places?status=aktiv');
  if (empty($places)) {
    uibx_log('Sebra claims no active places', 'error');
    return;
  }

  foreach ($places->place as $place) {
    $place_id = (string)$place->code;
    uib_sebra__update_uib_ou($place_id);
    if ($limit) {
      if (--$limit == 0)
        break;
    }
  }
}

function uib_sebra__sws_url($path) {
  $url = variable_get('uib_sws_url', 'http://sebra.uib.no/sws/');
  $url .= $path;
  return $url;
}

function uib_sebra__sws_get($path) {
  $tries = 0;
  $limit = 3;
  $snooze = 2;
  $url = uib_sebra__sws_url($path);
  uibx_log('GET ' . $url);
  while ($tries <= $limit) {
    $contents = file_get_contents($url);
    if ($contents === FALSE) {
      $tries++;
      if ($tries > $limit) {
        throw new Exception("Can not get \"$url\"");
      }
      $snooze_time = $tries * $snooze;
      uibx_log("Failed to get '$url'. Retry attempt #$tries (of $limit) in $snooze_time seconds.", 'warning');
      // Wait a few seconds
      sleep($snooze_time);
    }
    else {
      break;
    }
  }
  if (preg_match("/^\s*No data(?:\n|$)/i", $contents)) {
    return NULL;
  }
  $object = simplexml_load_string($contents);
  return $object;
}

/**
 * Look up the node id of the organisation unit with the given $place_id.
 */
function uib_sebra__uib_ou_nid($place_id) {
    $query = new EntityFieldQuery;
    $result = $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'uib_ou')
      ->fieldCondition('field_uib_ou_id', 'value', $place_id, '=')
      ->range(0, 1)
      ->execute();

    if (!empty($result['node'])) {
      $nids = array_keys($result['node']);
      return $nids[0];
    }
    return NULL;
}

/**
 * Update or create node representing the organisation unit with the given
 * $place_id.
 */
function uib_sebra__update_uib_ou($place_id) {
  $place = new SebraPlace($place_id);
  $node = NULL;
  $nid = uib_sebra__uib_ou_nid($place_id);
  if ($nid === NULL) {
    $node = new stdClass();
    $node->type = 'uib_ou';
    $node->title = $place->name;
    $node->uid = 1;
    $node->status = 1;
    $node->revision = 0;
    $node->language = 'nb';
    $node->field_uib_ou_id['und'][0]['value'] = $place_id;
    $node->field_uib_ou_shortname['und'][0]['value'] = $place->alias;
    $node->field_uib_email['und'][0]['value'] = $place->email;
    $node->field_uib_mail_domain['und'][0]['value'] = $place->maildomain;

    $node->field_uib_postal_address['und'][0]['thoroughfare'] = !empty($place->postbox) ? "Postboks $place->postbox"
                                                                                        : $place->address;
    $node->field_uib_postal_address['und'][0]['postal_code'] = $place->postcode;
    $node->field_uib_postal_address['und'][0]['locality'] = $place->postarea;
    $node->field_uib_postal_address['und'][0]['country'] = 'NO';

    $node->field_uib_visit_address['und'][0]['thoroughfare'] = $place->address;
    $node->field_uib_visit_address['und'][0]['country'] = 'NO';

    if (isset($place->phone))
      $node->field_uib_phone['und'][0]['value'] = $place->phone;
    if (isset($place->fax))
      $node->field_uib_fax['und'][0]['value'] = $place->fax;

    $node->field_uib_ou_title['nb'][0]['value'] = $place->name;

    node_save($node);
    uibx_log("Created node $node->nid for place $place_id $place->name");
  }
  else {
    $ou = entity_metadata_wrapper('node', node_load($nid));
    $severity = 'notice';
    $edit = array();
    if ($ou->status->value() != 1) {
      $ou->status->set(1);
      $edit[] = 'published';
    }
    if ($ou->title->value() != $place->name) {
      $ou->title->set($place->name);
      $ou->language('nb')->field_uib_ou_title->set($place->name);
      $edit[] = 'title';
    }
    if ($ou->field_uib_ou_id->value() != $place_id) {
      throw new Exception("Bad place id for node/$nid; expected $place_id, got " . $ou->field_uib_ou_id->value());
    }
    if ($ou->field_uib_ou_shortname->value() != $place->alias) {
      $ou->field_uib_ou_shortname->set($place->alias);
      $edit[] = 'shortname';
    }
    if ($ou->field_uib_email->value() != $place->email) {
      $ou->field_uib_email->set($place->email);
      $edit[] = 'email';
    }
    if ($ou->field_uib_mail_domain->value() != $place->maildomain) {
      $ou->field_uib_mail_domain->set($place->maildomain);
      $edit[] = 'mail_domain';
    }

    $old = $ou->field_uib_postal_address->value();
    $new = $old;
    $new['thoroughfare'] = !empty($place->postbox) ? "Postboks $place->postbox" : $place->address;
    $new['postal_code'] = $place->postcode;
    $new['locality'] = $place->postarea;
    $new['country'] = 'NO';
    if ($new != $old) {
      $ou->field_uib_postal_address->set($new);
      $edit[] = 'postal';
    }

    $old = $ou->field_uib_visit_address->value();
    $new = $old;
    $new['thoroughfare'] = $place->address;
    $new['postal_code'] = '';
    $new['locality'] = '';
    $new['country'] = 'NO';
    if ($new != $old) {
      $ou->field_uib_visit_address->set($new);
      $edit[] = 'visit';
    }

    if (str_replace(' ', '', $ou->field_uib_phone[0]->value()) !== str_replace(' ', '', $place->phone)) {
      $ou->field_uib_phone[0]->set($place->phone);
      $edit[] = 'phone';
    }
    if (str_replace(' ', '', $ou->field_uib_fax->value()) !== str_replace(' ', '', $place->fax)) {
      $ou->field_uib_fax->set($place->fax);
      $edit[] = 'fax';
    }

    if ($edit) {
      $ou->save();
      uibx_log("updated ou $place_id (node/$nid): " . implode(', ', $edit), $severity);
    }
  }
  return $node;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function uib_sebra_field_widget_addressfield_standard_form_alter(&$element, &$form_state, $context) {
  if ($element['#field_name'] == 'field_uib_visit_address') {
    $element['locality_block']['postal_code']['#required'] = false;
    $element['locality_block']['locality']['#required'] = false;
  }
}

/**
 * Sync the 'field_uib_staff' of all areas that define a 'field_uib_sebra_id'.
 */
function uib_sebra__sync_areas() {
  // fetch all roles for all areas
  $all_area_roles = uib_sebra__sws_get('omraaderoller');
  if (empty($all_area_roles)) {
    uibx_log('Sebra claims there are no area roles, aborting area sync', 'error');
    return;
  }

  $query = new EntityFieldQuery;
  $query = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'area')
    ->fieldOrderBy('field_uib_sebra_id', 'value')
    ;
  $result = $query->execute();

  $staff_unchanged = 0;
  $content_manager_unchanged = 0;
  $seen_sebra_id = array();
  $usernames = array();
  $seen_sebra_users = array();

  foreach (array_keys($result['node']) as $nid) {
    $edit_p = FALSE;
    $area = node_load($nid);
    $problem_user_list = array();

    $sebra_id = $area->field_uib_sebra_id['und'][0]['value'];
    if (isset($seen_sebra_id[$sebra_id])) {
      // we can skip this one since all the fields we update are shared
      // between the translations.
      continue;
    }
    $seen_sebra_id[$sebra_id] = 1;
    $area_doc = uib_sebra__sws_get("omraader?omraadekode=$sebra_id");
    if (empty($area_doc)) {
      uibx_log("Can't get area $sebra_id", 'error');
      continue;
    }
    uib_sebra__sync_jobbnorge_id($area, $area_doc);
    $staff = array();
    if (isset($area_doc->omraade->visninger->uibid)) {
      $visninger = (array)$area_doc->omraade->visninger;
      if (!is_array($visninger['uibid'])) {
        $visninger['uibid'] = array($visninger['uibid']);
      }
      foreach ($visninger['uibid'] as $uname) {
        // Check user in Sebra
        if (!isset($seen_sebra_users[$uname])) {
          $user_exists = uib_sebra__sws_get("person?id=$uname");
          $seen_sebra_users[$uname] = ($user_exists) ? 1 : 0;
        }
        if (!$seen_sebra_users[$uname]) {
          uibx_log("Staff user not in Sebra [$uname]. Area $sebra_id, node/$nid $area->title", 'warning');
          $problem_user_list[] = $uname;
        }
        if (!isset($usernames[$uname])) {
          $usernames[$uname] = uib_sebra_get_main_user($uname);
        }
        if ($usernames[$uname]) {
          if ($uname != $usernames[$uname]) {
            $problem_user_list[] = $uname;
            uibx_log("Using $usernames[$uname] instead of non-main username [$uname] for staff. Area $sebra_id, node/$nid $area->title", 'warning');
          }
          $uname = $usernames[$uname];
          $account = user_load_by_name($uname);
          if (!$account) {
            $account = uib_sebra__sync_user($uname, FALSE, "area $sebra_id staff");
            if (!$account || $account->status == 0) {
              uibx_log("Staff user missing or blocked [$uname]. Area $sebra_id, node/$nid $area->title", 'warning');
              $problem_user_list[] = $uname;
              continue;
            }
          }
          $staff['und'][]['target_id'] = $account->uid;
        }
        else {
          $problem_user_list[] = $uname;
        }
      }
    }
    if (isset($area->field_uib_staff['und'])) {
      sort($area->field_uib_staff['und']);
    }
    if (isset($staff['und'])) {
      sort($staff['und']);
    }
    if ($area->field_uib_staff != $staff) {
      $area->field_uib_staff = $staff;
      $edit_p = TRUE;
      uibx_log("Updating staff setting area /node/$nid");
    }
    else {
      $staff_unchanged++;
    }

    $content_manager = array();
    $area_roles = uib_sebra__get_area_roles($all_area_roles, $sebra_id);
    foreach ($area_roles as $uname) {
      // Check user in Sebra
      if (!isset($seen_sebra_users[$uname])) {
        $user_exists = uib_sebra__sws_get("person?id=$uname");
        $seen_sebra_users[$uname] = ($user_exists) ? 1 : 0;
      }
      if (!$seen_sebra_users[$uname]) {
        uibx_log("Content manager not in Sebra [$uname]. Area $sebra_id, node/$nid $area->title", 'warning');
        $problem_user_list[] = $uname;
      }
      if (!isset($usernames[$uname])) {
        $usernames[$uname] = uib_sebra_get_main_user($uname);
      }
      if ($usernames[$uname]) {
        if ($uname != $usernames[$uname]) {
          $problem_user_list[] = $uname;
          uibx_log("Using $usernames[$uname] instead of non-main username [$uname] for content manager. Area $sebra_id, node/$nid $area->title", 'warning');
        }
        $uname = $usernames[$uname];
        $account = user_load_by_name($uname);
        if (!$account) {
          $account = uib_sebra__sync_user($uname, FALSE, "area $sebra_id roles");
          if (!$account || $account->status == 0) {
            uibx_log("Content manager missing or blocked [$uname]. Area $sebra_id, node/$nid $area->title", 'warning');
            $problem_user_list[] = $uname;
            continue;
          }
        }
        $content_manager['und'][]['target_id'] = $account->uid;
      }
      else {
        $problem_user_list[] = $uname;
      }
    }
    if (!isset($area->field_uib_content_manager) || $area->field_uib_content_manager != $content_manager) {
      $area->field_uib_content_manager = $content_manager;
      $edit_p = TRUE;
      uibx_log("Updating content_manager setting area /node/$nid");
    }
    else {
      $content_manager_unchanged++;
    }

    $problem_user_list = array_unique($problem_user_list);
    sort($problem_user_list);
    $problem_user_list = implode(',', $problem_user_list);
    if (empty($area->field_uib_staff_status['und'][0]['value']) || $problem_user_list != $area->field_uib_staff_status['und'][0]['value']) {
      $edit_p = TRUE;
      $area->field_uib_staff_status['und'][0]['value'] = $problem_user_list;
    }

    if ($edit_p)
      node_save($area);
  }
  uibx_log("staff attribute unchanged for $staff_unchanged areas");
  uibx_log("content_manager attribute unchanged for $content_manager_unchanged areas");
}

/**
 * Get area roles with the given sebra_id
 *
 * Returns array with usernames with roles: "Redaktør" or "Innholdsprodusent"
 * for a given area (sebra_id)
 */
function uib_sebra__get_area_roles($all_area_roles, $sebra_id) {
  $result = array();
  if (!empty($all_area_roles->administrator)) {

    foreach ($all_area_roles->administrator as $admin) {
      $username = (string)$admin['id'];

      foreach ($admin->role as $role) {
        $role_group = (string)$role['group'];

        foreach ($role->omraade_kode as $area_code) {
          if ((string)$area_code != $sebra_id)
            continue;

          if ($role_group == 'Redaktør' || $role_group == 'Innholdsprodusent') {
            array_push($result, $username);
          }
        }
      }
    }
  }
  return $result;
}

/**
 * Sync jobbnorge_id from område in Sebra to ou in w3.
 *
 */
function uib_sebra__sync_jobbnorge_id($area, $area_doc) {
  $jobbnorge_id = (string)$area_doc->omraade->JOBBNORGE_DEPID;
  if (!$jobbnorge_id)
    return;
  $place_id = (string)$area_doc->omraade->EIER_STED_KODE;
  //uibx_log("jobbnorge $place_id => $jobbnorge_id");
  if (isset($area->field_uib_ou['und'])) {
    $nid = $area->field_uib_ou['und'][0]['target_id'];
    $place = node_load($nid);
    if ($place->field_uib_ou_id['und'][0]['value'] != $place_id) {
      uibx_log("Mismatch for place code for /node/$nid $place_id", 'error');
      return;
    }
    if ( !is_numeric($jobbnorge_id) ) {
      uibx_log("jobbnorge_id not numeric for place code for /node/$nid", 'error');
      return;
    }
    if ($place->field_uib_jobbnorge_id['und'][0]['value'] != $jobbnorge_id) {
      $place->field_uib_jobbnorge_id['und'][0]['value'] = $jobbnorge_id;
      node_save($place);
      uibx_log("Updated jobbnorge_id for /node/$nid");
    }
  }
  else {
    uibx_log("No place set up for /node/$area->nid");
  }
}

/**
 * Sync users between Sebra and the Drupal database.
 *
 * If $limit is provided only sync the given number of users.  In this case the
 * function maintains an internal counter in the variable
 * "uib_sebra_user_offset" and will start syncing from that user.
 *
 * Syncing with a $limit of 0 means unlimited and will take a long time.
 */

function uib_sebra__sync_users($limit, $no_block = FALSE) {
  $users = array_merge(
    uib_sebra__get_persons('staff'),
    uib_sebra__get_persons('extern')
  );

  // Add users that are marked as staff or content managers on areas but not listed in persons list in Sebra
  $add_staff = array();
  $query = 'SELECT DISTINCT u.name
    FROM users u, field_data_field_uib_staff m
    WHERE u.uid = m.field_uib_staff_target_id';
  $result = db_query($query);
  foreach ($result as $record) {
    $add_staff[] = $record->name;
  }
  $query = 'SELECT DISTINCT u.name
    FROM users u, field_data_field_uib_content_manager m
    WHERE u.uid = m.field_uib_content_manager_target_id';
  $result = db_query($query);
  foreach ($result as $record) {
    $add_staff[] = $record->name;
  }
  $add_staff = array_diff(array_unique($add_staff), $users);
  $users = array_merge($users, $add_staff);

  $users_count = count($users);
  $offset = 0;

  if ($limit) {
    $offset = variable_get('uib_sebra_user_offset', 0);
    if ($offset >= $users_count)
      $offset = 0;
    variable_set('uib_sebra_user_offset', $offset + $limit);
    uibx_log("Starting to process $limit of $users_count users at offset $offset");
  }
  else {
    uibx_log("Processing $users_count users");
  }

  foreach ($users as $username) {
    if (--$offset > 0)
      continue;
    uib_sebra__sync_user($username, FALSE, 'persons staff+extern');
    if ($limit) {
      if (--$limit == 0)
        break;
    }
  }

  // look for users to block

  $active_count = 0;
  $blocked_count = 0;
  $extras_count = 0;
  $query = 'SELECT u.uid, u.name, u.status
    FROM users u, field_data_field_uib_user_domain d
    WHERE u.uid = d.entity_id AND d.field_uib_user_domain_value = :dom';
  $result = db_query($query, array(':dom' => 'uib'));
  foreach ($result as $user) {
    if (in_array($user->name, $users)) {
      if ($user->status == 0) {
        $blocked_count++;
      }
      else {
        $active_count++;
        if (in_array($user->name, $add_staff)) {
          $extras_count++;
        }
      }
    }
    elseif ($user->status != 0) {
      if ($no_block) {
        uibx_log("$user->name would be blocked");
      }
      else {
        $account = user_load($user->uid);
        user_save($account, array(
          'status' => 0, // BLOCKED
        ));
        uibx_log("$account->name blocked");
        $blocked_count++;
      }
    }
    else {
      $blocked_count++;
    }
  }
  uibx_log("$active_count active and $blocked_count blocked uib-accounts. $extras_count active not in Sebra persons.");
}

/**
 * Returns the list of active usernames.  The $type argument limits the kind of users
 * to return.  It can be one of 'staff', 'student', or 'extern'.
 */

function uib_sebra__get_persons($type) {
  $persons_url = 'persons';
  if ($type)
    $persons_url .= "?type=$type";
  $persons = uib_sebra__sws_get($persons_url);
  if (empty($persons)) {
    throw new Exception("No users returned by sws/$persons_url");
  }
  $uids = array();
  foreach ($persons->person as $p) {
    $uids[] = (string)$p->id;
  }
  return $uids;
}

/**
 * Add uid to content_manager on areas
 *
 * Returns true if adding to content_manager, else false
 */
function uib_sebra__add_content_manager($content_manager_areas, $uid) {

  $res = FALSE;
  foreach ($content_manager_areas as $sebra_id) {
    $query = new EntityFieldQuery;
    $query = $query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'area')
      ->fieldCondition('field_uib_sebra_id', 'value', $sebra_id, '=');
    $result = $query->execute();

    if (isset($result['node'])) {
      foreach (array_keys($result['node']) as $nid) {

        $area = node_load($nid);
        $needle = array('target_id' => $uid);
        if ( !isset($area->field_uib_content_manager['und']) ||
          !in_array($needle, $area->field_uib_content_manager['und']) ) {

          $area->field_uib_content_manager['und'][]['target_id'] = $uid;
          node_save($area);
          $res = TRUE;
        }
      }
    }
  }
  return $res;
}

/**
 * Determine if the given user belongs to a test account.
 *
 * Rule is that if either the first or last name starts or
 * ends with the word "test" or "testkonto" then it is.
 */

function _uib_sebra__is_testkonto($u) {
  foreach (array($u->first_name, $u->last_name) as $name) {
    $pos = stripos($name, 'test');
    if ($pos === false)
      continue;
    if ($pos == 0) // startswith "test"
      return 1;
    $pos = strripos($name, 'test');
    if ($pos == strlen($name) - 4) // endswith "test"
      return 1;
    $pos = strripos($name, 'testkonto');
    if ($pos == strlen($name) - 9) // endswith "testkonto"
      return 1;
  }
  return 0;
}

/**
 * Synchronise the given user with Sebra.  If the user did not already exist in
 * the Drupal database it will be created.  If it exists, this function will
 * figure out if any attributes need to be changed and - if so - update the user.
 *
 * The function returns the user object created/loaded.
 */

function uib_sebra__sync_user($username, $dry_run = FALSE, $ref = NULL) {
  static $places = array();
  $account = user_load_by_name($username);
  try {
    $u = new SebraPerson($username, $ref);
  }
  catch (Exception $e) {
    uibx_log($e->getMessage(), 'warning');
    if ($e->getCode() == 404)
      // Block the user before we return it
      if ($account) {
        if (!$dry_run) {
          user_save($account, array('status' => 0));
          uibx_log("$username blocked");
        }
        else {
          uibx_log("$username would be blocked");
        }
      }
      return $account;
    throw $e;
  }
  if (!isset($places[$u->place_code])) {
    $places[$u->place_code] = uib_sebra__uib_ou_nid($u->place_code);
  }
  $phones = array();
  $country_prefix = '+47';
  $u->phone_office = trim($u->phone_office);
  if (!empty($u->phone_office)) {
    if (substr($u->phone_office, 0, 3) != $country_prefix) {
      $u->phone_office = $country_prefix . ' ' . $u->phone_office;
    }
    $phones['und'][]['value'] = $u->phone_office;
  }
  $u->phone_mobile = trim($u->phone_mobile);
  if (!empty($u->phone_mobile)) {
    if (substr($u->phone_mobile, 0, 3) != $country_prefix) {
      $u->phone_mobile = $country_prefix . ' ' . $u->phone_mobile;
    }
    $phones['und'][]['value'] = $u->phone_mobile;
  }

  $status = _uib_sebra__is_testkonto($u) ? 0 : 1;

  if ($account) {
    $edit = array();
    if ($account->mail != $u->email)
      $edit['mail'] = $u->email;

    if ($account->status != $status) {
      $edit['status'] = $status;
      $un = $status == 1 ? 'un' : '';
      if (!$dry_run) {
        uibx_log("$account->name ${un}blocked");
      }
      else {
        uibx_log("$account->name would be ${un}blocked");
      }
    }
    $u->first_name = trim($u->first_name);
    if ($account->field_uib_user_alt_firstname['und'][0]['value'] != $u->first_name) {
      if ($account->field_uib_first_name['und'][0]['value'] == $account->field_uib_user_alt_firstname['und'][0]['value']) {
        $edit['field_uib_first_name']['und'][0]['value'] = $u->first_name;
      }
      $edit['field_uib_user_alt_firstname']['und'][0]['value'] = $u->first_name;
    }
    $u->last_name = trim($u->last_name);
    if ($account->field_uib_user_alt_lastname['und'][0]['value'] != $u->last_name) {
      if ($account->field_uib_last_name['und'][0]['value'] == $account->field_uib_user_alt_lastname['und'][0]['value']) {
        $edit['field_uib_last_name']['und'][0]['value'] = $u->last_name;
      }
      $edit['field_uib_user_alt_lastname']['und'][0]['value'] = $u->last_name;
      $edit['field_uib_sort_name']['und'][0]['value'] = uibx_sort_name($u->last_name);
    }
    $slug_first_name = (empty($edit['field_uib_first_name'])) ? $account->field_uib_first_name['und'][0]['value'] : $edit['field_uib_first_name']['und'][0]['value'];
    $slug_last_name = (empty($edit['field_uib_last_name'])) ? $account->field_uib_last_name['und'][0]['value'] : $edit['field_uib_last_name']['und'][0]['value'];
    $slug = uib_sebra_slug($slug_first_name, $slug_last_name, $account->uid);
    if (empty($account->field_uib_slug['und']) || $account->field_uib_slug['und'][0]['value'] != $slug) {
      $edit['field_uib_slug']['und'][0]['value'] = $slug;
    }
    if ($account->field_uib_position['nb'][0]['value'] != $u->position_name_no)
      $edit['field_uib_position']['nb'][0]['value'] = $u->position_name_no;
    if ($account->field_uib_position['en'][0]['value'] != $u->position_name_en)
      $edit['field_uib_position']['en'][0]['value'] = $u->position_name_en;
    if ($account->field_uib_position_code['und'][0]['value'] != $u->position_code)
      $edit['field_uib_position_code']['und'][0]['value'] = $u->position_code;

    $existing_position_category = array();
    if (isset($account->field_uib_position_category)) {
      foreach ($account->field_uib_position_category['und'] as $delta => $category) {
        $existing_position_category['und'][$delta]['value'] = $category['value'];
      }
    }
    $new_position_category = array();
    foreach (explode(" ", $u->position_category) as $category) {
      $new_position_category['und'][]['value'] = $category;
    }
    if ($existing_position_category != $new_position_category) {
      $edit['field_uib_position_category'] = $new_position_category;
    }

    $existing_phone = $account->field_uib_phone;
    if (isset($existing_phone['und'])) {
      foreach ($existing_phone['und'] as $delta => $pnr) {
        $existing_phone['und'][$delta]['value'] = str_replace(' ', '', $pnr);
      }
    }
    $sebra_phone = $phones;
    if (isset($sebra_phone['und'])) {
      foreach ($sebra_phone['und'] as $delta => $pnr) {
        $sebra_phone['und'][$delta]['value'] = str_replace(' ', '', $pnr);
      }
    }
    if ($existing_phone != $sebra_phone)
      $edit['field_uib_phone'] = $phones;
    if (empty($places[$u->place_code])) {
      $edit['field_uib_user_ou'] = array();
    }
    else {
      if ($account->field_uib_user_ou['und'][0]['target_id'] != $places[$u->place_code]) {
        $edit['field_uib_user_ou']['und'][0]['target_id'] = $places[$u->place_code];
      }
    }
    // Some roles have no correspondence in Sebra and will be lost if we do not fix it here.
    // All roles but 'level 2' and 'level 3' are fixed.
    foreach ($account->roles as $key => $value) {
      if ($value != 'level 2' AND $value != 'level 3') {
        $u->roles[$key] = $value;
      }
    }
    if ($account->roles != $u->roles)
      $edit['roles'] = $u->roles;

    if (empty($edit)) {
      uibx_log("No user field change for $username <$account->mail>");
    }
    else {
      if (!$dry_run){
        user_save($account, $edit);
        uibx_log("Updated user fields for $username <$account->mail>");
      }
      else {
        uibx_log("Would have updated user fields for $username <$account->mail>");
      }
    }
  }
  else {
    $account = new stdClass();
    $account->is_new = 1;
    $account->name = $u->id;
    $account->mail = $u->email;
    $account->status = $status;
    $account->field_uib_user_domain['und'][0]['value'] = 'uib';
    $account->field_uib_first_name['und'][0]['value'] = $u->first_name;
    $account->field_uib_last_name['und'][0]['value'] = $u->last_name;
    $slug = uib_sebra_slug($u->first_name, $u->last_name);
    $account->field_uib_slug['und'][0]['value'] = $slug;
    $account->field_uib_user_alt_firstname['und'][0]['value'] = $u->first_name;
    $account->field_uib_user_alt_lastname['und'][0]['value'] = $u->last_name;
    $account->field_uib_sort_name['und'][0]['value'] = uibx_sort_name($u->last_name);
    $account->field_uib_position['nb'][0]['value'] = $u->position_name_no;
    $account->field_uib_position['en'][0]['value'] = $u->position_name_en;
    $account->field_uib_position_code['und'][0]['value'] = $u->position_code;
    foreach (explode(" ", $u->position_category) as $category) {
      $account->field_uib_position_category['und'][]['value'] = $category;
    }
    $account->field_uib_phone = $phones;
    if (!empty($places[$u->place_code])) {
      $account->field_uib_user_ou['und'][0]['target_id'] = $places[$u->place_code];
    }
    $account->roles = $u->roles;
    // Initialise translation
    $trans_handler = entity_translation_get_handler('user', $account);
    $translation = array(
      'status' => 1,
      'language' => 'en',
    );
    $trans_handler->setTranslation($translation);
    $translation = array(
      'status' => 1,
      'language' => 'nb',
      'source' => 'en',
    );
    $trans_handler->setTranslation($translation);

    if (!$dry_run) {
      user_save($account);
      uibx_log("Created user $account->uid for $username <$u->email>");
    }
    else {
      uibx_log("Would have created user $account->uid for $username <$u->email>");
    }
  }

  // Just add uid to content_manager on areas.
  // A full run of sync_users will remove stale uids from content_manager
  if (!$dry_run) {
    if (uib_sebra__add_content_manager($u->content_manager_areas, $account->uid))
      uibx_log("Content manager - updated for user $account->uid for $username <$u->email>");
    else
      uibx_log("Content manager - no change for user $account->uid for $username <$u->email>");
  }

  return $account;
}

/**
 * Add aliases for a user
 */
function uib_sebra__add_user_aliases($account) {
  if ($account->uid) {
    if (!empty($account->field_uib_first_name['und'][0]['value']) && !empty($account->field_uib_last_name['und'][0]['value'])) {
      $slug = uib_sebra_slug($account->field_uib_first_name['und'][0]['value'], $account->field_uib_last_name['und'][0]['value'], $account->uid);
      $source = 'user/' . $account->uid;
      $languages = array(
        'nb' => 'personer',
        'en' => 'persons',
      );
      foreach ($languages as $lang => $prefix) {
        $alias = $prefix . '/' . $slug;
        if ($path_list = uibx_path_load($source, $lang)) {
          foreach ($path_list as $path) {
            if ($path->alias == $alias) {
              // no need up update the alias for this language
              uibx_log("No change in '$lang' path alias $alias for $account->name");
              continue 2;
            }
          }
        }
        $path = array(
          'source' => $source,
          'alias' => $alias,
          'language' => $lang,
        );
        path_save($path);
        uibx_log("Added '$lang' path alias $alias for $account->name");
      }
    }
    else {
      uibx_log("Did not add user aliases for user/$account->uid due to missing real names.", 'warning');
    }
  }
}

/**
 * Remove aliases for a user
 */
function uib_sebra__remove_user_aliases($source) {
  if ($path_list = uibx_path_load($source)) {
    foreach ($path_list as $path) {
      path_delete($path->pid);
      uibx_log("Removed path alias $path->alias [$path->source]");
    }
  }
}

/**
 * Check if user name is the person's main user name.
 * A person may have more than one active user, but one is main user.
 * Returns TRUE if this is the main user, else FALSE.
 */
function uib_sebra_user_is_main($name = NULL) {
  if ($name) {
    $main = uib_sebra__sws_get("hoveduid?uid=$name");
    if ($main->uid != 'No data') {
      return ($main->uid == $name) ? TRUE : FALSE;
    }
  }
}

/**
 * Get the user's main account name
 */
function uib_sebra_get_main_user($name = NULL) {
  if ($name) {
    $main = uib_sebra__sws_get("hoveduid?uid=$name");
    if ($main->uid != 'No data' && !empty($main->uid)) {
      $name = $main->uid;
    }
  }
  return $name;
}

/**
 * Implements hook_user_presave().
 */
function uib_sebra_user_presave(&$edit, $account, $category) {
  if (array_key_exists('status', $edit)) {
    if ($edit['status'] === 0) {
      if (!array_key_exists('roles', $edit)) {
        $roles = array_filter($account->roles, function($rname) {
          return !in_array($rname, array('level 1', 'level 2', 'level 3'));
        });
        if ($roles != $account->roles) {
          $edit['roles'] = $roles;
        }
      }
    }
  }
}

/**
 * Implements hook_user_update().
 */
function uib_sebra_user_update(&$edit, $account, $category) {
  // Add or remove user path aliases
  $source = 'user/' . $account->uid;
  if (uib_sebra_user_is_main($account->name)) {
    if ($account->status == 1) {
      uib_sebra__add_user_aliases($account);
    }
    else {
      // Remove aliases for blocked accounts
      uib_sebra__remove_user_aliases($source);
    }
  }
  else {
    // Remove aliases if this is not the person's main account
    uib_sebra__remove_user_aliases($source);
  }
}

/**
 * Implements hook_user_insert().
 */
function uib_sebra_user_insert(&$edit, $account, $category) {
  uib_sebra__add_user_aliases($account);
}

/**
 * Creates and returns a personal name string, a.k.a. "slug" based on the supplied
 *   name of the user.
 * If a user id is supplied and it matches an existing slug, that slug will be returned.
 * If the slug is already in use by other user, or used as an active alias,
 * a suffix will be added: an underscore and a serial number starting at 1.
 *
 * Returns a user slug string
 */
function uib_sebra_slug($first, $last, $uid = NULL) {
  $slug = '';
  $suffix = '';
  if ($last) {
    $first = trim($first);
    $first = preg_replace('/[\s]+/', '.', $first);
    $last = trim($last);
    $last = preg_replace('/[\s]+/', '.', $last);
    $slug = $first . '.' . $last;

    $suffix_cnt = 0;
    $searching = TRUE;
    $query = new EntityFieldQuery();
    while ($searching) {
      $result = $query->entityCondition('entity_type', 'user')
        ->fieldCondition('field_uib_slug', 'value', $slug . $suffix, '=')
        ->execute();
      if (empty($result['user'])) {
        // Do not use if used as user alias for another user
        $alias = path_load(array('alias' => 'personer/' . $slug . $suffix));
        if (empty($alias)) {
          $searching = FALSE;
        }
        else {
          $tmp = explode('/', $alias['source']);
          if ($tmp[1] == $uid) {
            $searching = FALSE;
          }
        }
      }
      else {
        $list = array_keys($result['user']);
        if ($uid) {
          foreach ($list as $user_uid) {
            if ($user_uid == $uid) {
              $searching = FALSE;
            }
          }
        }
      }
      if ($searching) {
        $suffix = '_' . ++$suffix_cnt;
      }
    }
  }
  return $slug . $suffix;
}

function uib_sebra__area_diff($list = TRUE) {
  $sebra_areas_not_in_w3 = array();
  $sebra_areas_in_w3 = array();
  $sebra_areas_confirmed = array();
  $sebra_areas_unconfirmed = array();
  // Get all sebra areas in w3
  $query = 'SELECT entity_id, field_uib_sebra_id_value FROM {field_data_field_uib_sebra_id} WHERE deleted = :false';
  $result = db_query($query, array(':false' => 0));
  foreach ($result as $record) {
    if (!empty($record->field_uib_sebra_id_value)) {
      $sebra_areas_in_w3[$record->field_uib_sebra_id_value] = $record->entity_id;
    }
  }
  // Get all sebra areas
  $sebra_areas = uib_sebra__sws_get('omraader');
  foreach ($sebra_areas->omraade as $omr) {
    $sebra_area_code = (string)$omr->OMRAADEKODE;
    if (!empty($sebra_areas_in_w3[$sebra_area_code])) {
      // area is in w3
      $sebra_areas_confirmed[$sebra_area_code] = array($sebra_areas_in_w3[$sebra_area_code], $omr->OMRAADE_NAVN);
    }
    else {
      // area is not in w3
      $sebra_areas_not_in_w3[$sebra_area_code] = $omr->OMRAADE_NAVN;
    }
  }
  echo count($sebra_areas_not_in_w3), ' sebra area(s) NOT FOUND in w3', PHP_EOL;
  if ($list) {
    foreach ($sebra_areas_not_in_w3 as $ei => $ar) {
      echo $ar, ' [sebra id: ', $ei, ']', PHP_EOL;
    }
  }
  echo PHP_EOL,count($sebra_areas_confirmed),' sebra area(s) FOUND in w3',PHP_EOL;
  foreach ($sebra_areas_confirmed as $ei => $ar) {
    echo $ar[1], ' [sebra id: ', $ei, '] [entity id: ', $ar[0], ']', PHP_EOL;
  }
  foreach ($sebra_areas_in_w3 as $si => $ei) {
    if (empty($sebra_areas_confirmed[$si])) {
      $sebra_areas_unconfirmed[$si] = $ei;
    }
  }
  // leftovers
  if (count($sebra_areas_unconfirmed) > 0) {
    echo PHP_EOL, count($sebra_areas_unconfirmed), ' area(s) in w3 missing in sebra:', PHP_EOL;
    foreach ($sebra_areas_unconfirmed as $si => $ei) {
      $query = 'SELECT title FROM {node} WHERE nid = :eid';
      $result = db_query($query, array(':eid' => $ei));
      foreach ($result as $record) {
        if (!empty($record->title)) {
          $unconf_title = $record->title;
        }
      }
      echo $unconf_title, ' [sebra id: ', $si, ', entity id: ', $ei, ']', PHP_EOL;
    }
  }
}
