<?php
/**
 * @file
 * Code for the Study feature.
 */

include_once 'uib_study.features.inc';

/**
 * Implements hook_block_info().
 */
function uib_study_block_info() {
  return array(
    'study_content' => array(
      'info' => t('Study content from FS'),
      'status' => TRUE,
    ),
    'study_contact' => array(
      'info' => t('Study contact content from FS'),
      'status' => TRUE,
    ),
    'study_facts_2' => array(
      'info' => t('New block for study facts from FS'),
      'status' => TRUE,
    ),
    'study_facts_exchange' => array(
      'info' => t('Block for additional study facts on exchange agreements'),
      'status' => TRUE,
    ),
    'study_related' => array(
      'info' => t('Related study programs or courses from FS'),
      'status' => TRUE,
    ),
    'study_testimonial' => array(
      'info' => t('Randomly selected testimonial referring to a Study'),
      'status' => TRUE,
    ),
    'study_semester_toggle' => array(
      'info' => t('Possibility to toggle semesters'),
      'status' => TRUE,
    ),
    'study_evu' => array(
      'info' => t('EVU facts'),
      'status' => TRUE,
    ),
    'study_static_links' => array(
      'info' => t('A set of static links for exchange agreements'),
      'status' => TRUE,
    ),
    'study_plan' => array(
      'info' => t('Link to the study plan if it exists'),
      'status' => TRUE,
    ),
    'study_period_phd' => array(
      'info' => t('Information about the study period of this phd course'),
      'status' => TRUE,
    ),
    'study_so_code' => array(
      'info' => t('The code used to apply for admission at "Samordna opptak"'),
      'status' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function uib_study_menu() {
  // Arrange for unaliased uib_study pages to return 404
  foreach (explode(' ', 'emne studieprogram course studyprogramme') as $prefix) {
    $items["$prefix/%"] = array(
      'page callback' => 'uib_study__not_found',
      'access callback' => TRUE,
    );
  }

  // studieplan page
  foreach (explode(' ', 'studieprogram studyprogramme') as $prefix) {
    $items["$prefix/%/plan"] = array(
      'page callback' => 'uib_study__infopage',
      'page arguments' => array(1),
      'access callback' => TRUE,
    );
  }

  foreach (explode(' ', 'studieprogram studyprogramme') as $prefix) {
    $items["$prefix/%/%/plan"] = array(
      'page callback' => 'uib_study__infopage',
      'page arguments' => array(1,2),
      'access callback' => TRUE,
    );
  }

  foreach (array('emne', 'course') as $prefix) {
    $items["$prefix/%/description"] = array(
      'page callback' => 'uib_study__infopage',
      'page arguments' => array(1),
      'access callback' => TRUE,
    );
  }

  $items["utdanning/evu/courses"] = array(
    'page callback' => 'uib_study__evu_courses_page',
    'file' => 'uib_study.evu.inc',
    'access callback' => TRUE,
  );
  return $items;
}

function uib_study__not_found() {
  return MENU_NOT_FOUND;
}

function uib_study__infopage($code, $code2 = NULL) {
  global $language;
  uib_area__get_current(variable_get('uib_study_area_nid'));

  if ($code2) {
    $path = uib_study__study_path($code2);
    if (empty($path)) {
      $path = uib_study__study_path($code . $code2);
    }
  }
  else {
    $path = uib_study__study_path($code);
  }
  if (empty($path))
    return MENU_NOT_FOUND;
  $study = entity_metadata_wrapper('node', node_load(substr($path, 5)));
  $study_code = $study->field_uib_study_code->value();
  $fspres_code = $code2 ? $code . '/' . $study_code : $code;
  $study_type = $study->field_uib_study_type->value();
  $fspres_study_type = $study_type == 'course' ? 'emne' : 'studieprogram';
  $page = array();
  $page_title = $study_type == 'course' ? t('Course description') : t('Study plan');
  $header_start = $page_title . ' ' . t('for') . ' ';
  $header_study = $study_code . ' ' . $study->language($language->language)->field_uib_study_title->value();
  $header_semester = uib_study__get_current_semester_long();
  $page['header'] = array(
    '#type' => 'html_tag',
    '#tag' => 'h1',
    '#value' => $header_start . l($header_study, $path) . ', ' . $header_semester,
  );
  drupal_set_title($header_start . $header_study . ', ' . $header_semester, $path);

  if (!uib_study__infotyper_render(
      $page,
      uib_study__fspres_get_json(uib_study__fspres_lang() . "/$fspres_study_type/$fspres_code/render.json"),
      function ($group) {
        return substr($group, -11) == '_studieplan' || $group == 'em-emnebeskrivelse';
      }
    )
  ) {
    drupal_set_message(t('This page has not been translated yet'), 'warning');
    $page['missing'] = array(
      '#markup' => $page_title . ' ' . t('missing'),
    );
  }
  // Remove unwanted header
  foreach ($page as $item => $value) {
    if (substr($item, -11) == '_studieplan' || $item == 'em-emnebeskrivelse') {
      unset($page[$item]['header']);
      break;
    }
  }
  return $page;
}

function uib_study__infotyper_render(&$page, $render, $filter, $nid=NULL) {
  if (empty($render))
    return FALSE;
  $count = 0;
  $is_course = uib_study__is_course();
  $is_evu_course = uib_study__is_course('evu');
  foreach ($render as $group) {
    if ($filter && !$filter($group['#group']))
      continue;
    $group_title = check_plain($group['#title']);
    $group_title_html_id = uib_study__clean_id_string($group_title);
    $count++;
    $page[$group['#group']] = array(
      'header' => array(
        '#type' => 'html_tag',
        '#tag' => 'h2',
        '#value' => $group_title,
      ),
      '#prefix' => '<div id="uib-tabs-'. $group_title_html_id . '">',
      '#suffix' => '</div>',
    );
    if ($is_evu_course) {
      hide($page[$group['#group']]['header']);
    }
    foreach ($group['#items'] as $item) {
      $page[$group['#group']][$item['#type']] = array(
        '#markup' => uib_study__text_markup($item, $is_course),
      );
    }
    if (substr($group['#group'], (strlen($group['#group']) -11)) == '_utveksling' && $nid) {
      $page[$group['#group']]['exag'] = array(
        '#markup' => uib_study__get_exchange_agreements($nid),
      );
    }
    // some infotype categegory headers that we don't want to display because
    // in the context we use them it's obvious what the content below is
    foreach (array('em-emnebeskrivelse', 'ku_kursinformasjon') as $category) {
      if (isset($page[$category]))
        hide($page[$category]['header']);
    }
  }
  return $count;
}

function uib_study__get_exchange_agreements($nid) {
  $markup = '';
  global $language;
  $query = new EntityFieldQuery;
  $results = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'uib_study')
    ->propertyCondition('language', $language->language)
    ->fieldCondition('field_uib_study_part_of', 'target_id', $nid)
    ->execute();
  if (!empty($results['node'])) {
    $nids = array_keys($results['node']);
    $part_ofs = entity_load('node', $nids);
    $agreements = array();
    foreach ($part_ofs as $key => $part_of) {
      if ($part_of->field_uib_study_type['und'][0]['value'] == 'exchange') {
        // Handle agreements, also those connected to more than one country
        $country_tids = array();
        foreach ($part_of->field_uib_study_country['und'] as $tmp) {
          if (!in_array($tmp['target_id'], $country_tids)) {
            $country_tids[] = $tmp['target_id'];
          }
        }
        foreach ($country_tids as $ctid) {
          $agreements[$ctid][] = $part_of;
        }
      }
    }
    // Get country names (current language) from country taxonomy
    $countries = array();
    $terms = taxonomy_term_load_multiple(array_keys($agreements));
    foreach ($terms as $tid => $term) {
      $countries[$tid] = $term->field_uib_geographic_name[$language->language][0]['value'];
    }
    // Regroup the agreements according to country names
    $tmp = array();
    foreach ($agreements as $key => $value) {
      usort($value, 'uib_study__exc_name_compare');
      $tmp[$countries[$key]] = $value;
    }
    $agreements = $tmp;
    ksort($agreements);
    if (!empty($agreements)) {
      $markup = '<div class="uib_exchange_agreements"><h3>' . t('Facilitated exchange agreements') . '</h3>';
      $markup .= '<ul>';
      foreach ($agreements as $country => $agreement_set) {
        $markup .= '<li><h4>' . $country . '</h4><ul>';
        foreach ($agreement_set as $agreement) {
          $link = l($agreement->field_uib_study_title[$language->language][0]['value'], 'node/' . $agreement->nid);
          $markup .= '<li><h4>' . $link . '</h4></li>';
        }
        $markup .= '</ul></li>';
      }
      $markup .= '</ul></div>';
    }
  }
  return $markup;
}

/**
 * Comparison of exchange agreement titles for use in usort
 */
function uib_study__exc_name_compare($a, $b) {
  global $language;
  $a = iconv('utf-8', 'ascii//TRANSLIT', $a->field_uib_study_title[$language->language][0]['value']);
  $b = iconv('utf-8', 'ascii//TRANSLIT', $b->field_uib_study_title[$language->language][0]['value']);
  if ($a == $b) {
    return 0;
  }
  return ($a < $b) ? -1 : 1;
}

/**
 * Comparison of exchange duration end dates for use in usort (reverse sort)
 */
function uib_study__exc_date_compare($a, $b) {
  if (empty($a['date2']['#value'])) {
    $a['date2']['#value'] = $a['date']['#value'];
  }
  if (empty($b['date2']['#value'])) {
    $b['date2']['#value'] = $b['date']['#value'];
  }
  if ($a['date2']['#value'] == $b['date2']['#value']) {
    return 0;
  }
  return ($a['date2']['#value'] > $b['date2']['#value']) ? -1 : 1;
}

/**
 * Check if a course has a current description (em-emnebeskrivelse)
 */
function uib_study__course_description_exists($fspres_code) {
  if ($data = uib_study__fspres_get_json(uib_study__fspres_lang() . "/emne/$fspres_code/render.json")) {
    foreach ($data as $item) {
      if ($item['#group'] == 'em-emnebeskrivelse') {
        foreach ($item['#items'] as $subs) {
          if (!empty($subs['#text'])) {
            return TRUE;
          }
        }
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_flush_caches().
 */
function uib_study_flush_caches() {
  $caches = array();
  if (db_table_exists('cache_uib_study'))
    $caches[] = 'cache_uib_study';
  return $caches;
}

function uib_study__fspres_request($path) {
  $url = variable_get('uib_fspres_root', 'http://fs-pres.test.uib.no');
  $url .= '/';
  $url .= $path;

  $before = microtime(true);
  $res = drupal_http_request($url);

  $log_message = "GET $url => ";
  $log_message .= $res->code < 0 ? "$res->error errno=" . -$res->code : "$res->code $res->status_message";
  $log_message .= sprintf(" (%.0fms)", 1000 * (microtime(true) - $before));
  $severity = 'notice';
  if ($res->code == 404) {
    $expected_404s = array(
      'sted/184.11.74',
      'sted/184.11.1',
      'sted/184.11.82',
      'sted/184.12.80',
      'sted/184.12.90',
      'sted/184.13.2',
      'sted/184.13.15',
      'sted/184.13.16',
      'sted/184.13.17',
      'sted/184.13.18',
      'sted/184.13.27',
      'sted/184.13.44',
      'sted/184.13.57',
      'sted/184.15.1',
    );
    $subpath = substr($path, 0, strrpos($path, '/'));
    if (!in_array($subpath, $expected_404s)) {
      $severity = 'warning';
    }
  }
  elseif ($res->code != 200) {
    $severity = 'error';
  }
  uibx_log($log_message, $severity);
  return $res;
}

/**
 * Fetch the given JSON object from fs-pres.
 *
 * Returns the deserialized array on success, FALSE on 404 and NULL otherwise
 * Responses are cached for 4 hours.
 */
function uib_study__fspres_get_json($path) {
  $data = FALSE;
  if ($cache = cache_get($path, 'cache_uib_study')) {
    $data = $cache->data;
    if (is_null($data)) {
      uibx_log("Cached fs-pres failure for $path", 'warning');
    }
  }
  else {
    $res = uib_study__fspres_request($path);
    if ($res->code == 200 && $res->headers['content-type'] == 'application/json') {
      $data = drupal_json_decode($res->data);
      cache_set($path, $data, 'cache_uib_study', REQUEST_TIME + 4*3600);
    }
    elseif ($res->code != 404) {
      if ($res->code == 200) {
        uibx_log("$path response wasn't JSON; but " . $res->headers['content-type'], 'error');
      }
      $data = NULL;
      cache_set($path, $data, 'cache_uib_study', REQUEST_TIME + 60);
    }
  }
  return $data;
}

function uib_study__fspres_lang() {
  global $language;
  $lang = $language->language;
  if ($lang == 'nb') {
    $lang = 'nn'; // fs-pres Norwegian is ny-norsk
  }
  return $lang;
}

function uib_study__fspres_get_node_json($nid, $json, $lang = FALSE) {
  $node = node_load($nid);
  if ($node->type != 'uib_study')
    return FALSE;
  $study = entity_metadata_wrapper('node', $node);
  $type = $study->field_uib_study_type->value();
  /* Fetch what to render from:
   * http://fs-pres.app.uib.no/[<lang>]/emne/<code>/render.json
   */
  $path = '';
  if ($lang) {
    $path .= uib_study__fspres_lang() . '/';
  }

  $path_objects = array($study);
  if ($type == 'course') {
    $path .= 'emne/';
  }
  elseif ($type == 'program' || $type == 'specialization') {
    $path .= 'studieprogram/';
  }
  elseif ($type == 'exchange') {
    $path .= 'utvekslingsavtale/';
  }
  else {
    uibx_log("Unknown study type; '$type'", 'error');
  }
  if ($type == 'specialization') {
    $program = entity_metadata_wrapper('node', $study->field_uib_study_part_of[0]->value());
    if ($json == 'render.json') {
      array_unshift($path_objects, $program);
    }
    else {
      $path_objects = array($program);
    }
  }

  foreach ($path_objects as $path_object) {
    $slug = $path_object->field_uib_study_code->value();
    $slug = str_replace("/", "_", $slug);  # for courses like "NOR-U1/2"
    $path .= $slug . '/';
  }
  $path .= $json;
  return uib_study__fspres_get_json($path);
}

/**
 * Get student reports
 */
function uib_study__published_student_reports($code, $instcodes) {
  $url = variable_get('uib_studentrapport_root', 'http://studentrapport.app.uib.no');
  $instcodes = implode(',', $instcodes);
  $url .= "/api/reports/$code/$instcodes/done";
  $data = uib_study__access_student_reports($url);
  return $data['reports'];
}

/**
 * Get a list of exchange agreements that have published student reports
 * @return  array           Exchange agreements as keys, student user names as values
 */
function uib_study__student_reports_list() {
  $url = variable_get('uib_studentrapport_root', 'http://studentrapport.app.uib.no');
  $url .= "/api/reports/list";
  $data = uib_study__access_student_reports($url);
  return $data;
}

/**
 * Access the student report site api
 */
function uib_study__access_student_reports($url = NULL) {
  if ($url) {
    $before = microtime(true);
    $res = drupal_http_request($url);
    $log_message = "GET $url => ";
    $log_message .= $res->code < 0 ? "$res->error errno=" . -$res->code : "$res->code $res->status_message";
    $log_message .= sprintf(" (%.0fms)", 1000 * (microtime(true) - $before));

    $severity = ($res->code == 200 || $res->code == 404) ? 'notice' : 'error';
    uibx_log($log_message, $severity);
    if ($res->code != 200 || $res->headers['content-type'] != 'application/json') {
      return NULL;
    }
    return drupal_json_decode($res->data);
  }
}

function uib_study__area($study_node, $lang) {
  $ou_nid = $study_node->field_uib_ou['und'][0]['target_id'];
  $query = new EntityFieldQuery;
  $results = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'area')
    ->propertyCondition('language', $lang)
    ->fieldCondition('field_uib_ou', 'target_id', $ou_nid)
    ->fieldCondition('field_uib_area_type', 'value', array('institute', 'faculty'))
    ->execute();
  if (!empty($results['node'])) {
    list($area_nid) = array_keys($results['node']);
    $area = node_load($area_nid);
    return l($area->title, "node/" . $area_nid);
  }
  return false;
}

/**
 * Replace characters for use in css id string
 */
function uib_study__clean_id_string($unclean) {
  $replacements = array('æ' => 'a', 'ä' => 'a', 'ø' => 'o', 'ö' => 'o', 'ü' => 'u', 'é' => 'e', 'è' => 'e');
  $cleaner = strtr(drupal_strtolower($unclean), $replacements);
  return mb_ereg_replace('[^0-9A-Za-z\_\-]', '-', $cleaner);
}

/**
 * Implements hook_block_view().
 */
function uib_study_block_view($delta = '') {
  global $language;
  if (isset($_GET['sem']))
  {
    $semesterQQ = $_GET['sem'];
  } else {
    $semesterQQ = "";
  }
  list($prevSemQQ, $currSemQQ,  $nextSemQQ) = uib_study__get_adjacent_semesters();
  $prev = "";
  $next = "";
  $curr = "";
  if ($semesterQQ == $prevSemQQ) {
    $prev = "previous is-active";
  }
  else if ($semesterQQ == $nextSemQQ) {
    $next = "next is-active";
  }
  else {
    $curr = "current is-active";
  }
  $block = array();
  $data = FALSE;
  $is_course = uib_study__is_course();
  $is_exchange = uib_study__is_exchange();
  $is_evu_course = uib_study__is_course('evu');

  switch ($delta) {
    case 'study_content':
      $splice_list = array(
        'EB_SPRAK',
        'B_RE_SPRAK',
        'M_RE_SPRAK',
        'B_RE_PLASS',
        'M_RE_PLASS',
        'EB_KONTAKT',
        'B_RE_INFO',
        'M_RE_INFO',
        'B_RE_VISST',
      );

      $node = menu_get_object();
      if ($node) {
        $node = entity_metadata_wrapper('node', $node);
        $data = uib_study__fspres_get_node_json($node->getIdentifier(), 'render.json', TRUE);
        if (empty($data)) {
          if (is_null($data)) $msg = t('Information about this study isn\'t currently available. Please try again later!');
          else $msg = t('Information about this study is not available in English');
          $block['content'] = array(
            '#markup' => '<div class="fs-error">' . $msg . '</div>',
          );
          break;
        }

        # promote the right variant
        if ($semesterQQ) {
          foreach (array_keys($data) as $i) {
            foreach (array_keys($data[$i]['#items']) as $j) {
              if (isset($data[$i]['#items'][$j]['#variants'][$semesterQQ])) {
                $data[$i]['#items'][$j]['#text'] = $data[$i]['#items'][$j]['#variants'][$semesterQQ];
              }
            }
          }
        }

        foreach ($splice_list as $splice_item) {
          uib_study__extract_study_info($data, $splice_item);
        }

        $render = array();
        $nid = $node->nid->value();
        if ($is_exchange) {
          $info_data = uib_study__fspres_get_node_json($node->getIdentifier(), 'info.json', FALSE);
          if (uib_study__exchange_is_network($info_data)) {
            uib_study__infotyper_render($render, $data, function ($group) {
              return $group != 'avt_sted';
            }, $nid);
          }
          else {
            uib_study__infotyper_render($render, $data, NULL, $nid);
          }
        }
        else {
          uib_study__infotyper_render($render, $data, function ($group) use ($is_evu_course) {
            if ($is_evu_course && $group == 'em-emnebeskrivelse')
              return FALSE;
            return substr($group, -8) != '_kontakt' && substr($group, -11) != '_studieplan';
          }, $nid);
        }

        $type = $node->field_uib_study_type->value();
        $study_code = $node->field_uib_study_code->value();
        $study_category = $node->field_uib_study_category->value();
        if ($type == 'program' || $type == 'specialization' || ($type == 'exchange' && (!in_array($study_category, array('forskningsavtale', 'mou'))))) {
          $tab_items = array();
          $tab_items_construction_position = 0;
          foreach ($data as $group) {
            $group_id = $group['#group'];
            $group_type = substr($group_id, strpos($group_id, '_') + 1);
            $group_title = check_plain($group['#title']);
            if ($group_type == 'studieplan' || (uib_study__exchange_is_network($info_data) && $group_id == 'avt_sted'))
              continue;
            $group_title_html_id = uib_study__clean_id_string($group_title);
            $tab_items[] = '<a href="#uib-tabs-' . $group_title_html_id . '">' . $group_title . '</a>';
            if ($group_type == 'presentasjon' || $group_type == 'oppbygging')
              $tab_items_construction_position = count($tab_items);
          }
          if ($type == 'program' || $type == 'specialization') {
            $plan = uib_study__fspres_get_node_json($node->getIdentifier(), 'plan.json', TRUE);
            if (!empty($plan['rows'])) {
              $group_title = t('Construction');
              array_splice($tab_items, $tab_items_construction_position, 0,
                '<a href="#uib-tabs-construction">' . $group_title . '</a>');
              $render['construction'] = array(
                '#type' => 'html_tag',
                '#tag' => 'h2',
                '#value' => t("Construction"),
              );

              $table = uib_study__construction_table($plan, $type, $study_code);

              $render['construction table'] = array(
                '#theme' => 'table',
                '#caption' => $table['caption'],
                '#rows' => $table['t_rows'],
                '#attributes' => array('class' => 'uib-study-construction'),
                '#prefix' => '<div id="uib-tabs-construction">',
                '#suffix' => '</div>',
              );
            }
            if ($type == 'program') {
              $view = views_get_view('uib_study_specialization');
              $view->preview('block', array($nid));
              if ($view->result) {
              $group_title = t('Specialization');
                $tab_items[] = '<a href="#uib-tabs-specialization">' . $group_title . '</a>';
                $render['specialization'] = array(
                  '#type' => 'html_tag',
                  '#tag' => 'h2',
                  '#value' => t('Specialization'),
                );
                $render['specialization block'] = array(
                  '#type' => 'html_tag',
                  '#tag' => 'div',
                  '#value' => $view->render(),
                  '#prefix' => '<div id="uib-tabs-specialization">',
                  '#suffix' => '</div>',
                );
              }
            }
          }
          elseif ($type == 'exchange') {
            if ($language->language == 'nb') {
              $external_institution_codes = uib_study__external_inst_code($info_data);
              $reports = uib_study__published_student_reports($study_code, $external_institution_codes);
              if (!empty($reports)) {
                usort($reports, 'uib_study__exc_date_compare');
                $collapsed = count($reports) > 1 ? TRUE : FALSE;
                $years = array();
                foreach ($reports as $key => $report) {
                  $years[$key] = substr($report['date2']['#value'], 0, 4);
                  if (!empty($report['text'])) {
                    foreach($report['text'] as $item => $content) {
                      if (!empty($content['body']['#markup'])) {
                        $report['text'][$item]['body']['#markup'] = nl2br($content['body']['#markup']);
                      }
                    }
                  }
                  $report_title = $report['title']['#value'];
                  if (isset($report['author'])) {
                    hide($report['author']);
                  }
                  // convert ISO 8601 to Norwegian date format
                  if (!empty($report['date']['#value'])) {
                    $report['date']['#value'] = format_date(strtotime($report['date']['#value']));
                  }
                  if (!empty($report['date2']['#value'])) {
                    $report['date2']['#value'] = format_date(strtotime($report['date2']['#value']));
                    $report['date2']['#prefix'] = ' - ';
                  }
                  $report = array(
                    '#theme' => 'ctools_collapsible',
                    '#handle' => $report_title,
                    '#content' => render($report),
                    '#collapsed' => $collapsed,
                  );
                  $reports[$key] = $report;
                }
                // Add year as header
                $tmp = array();
                $previous_year = '';
                foreach ($reports as $key => $report) {
                  if ($years[$key] != $previous_year) {
                    $tmp[] = array(
                      '#type' => 'html_tag',
                      '#tag' => 'h3',
                      '#value' => $years[$key],
                    );
                    $previous_year = $years[$key];
                  }
                  $tmp[] = $report;
                }
                $reports = $tmp;
                $group_title = t('Student reports');
                $tab_items[] = '<a href="#uib-tabs-student-reports">' . $group_title . '</a>';
                $render['student reports'] = array(
                  '#type' => 'html_tag',
                  '#tag' => 'h2',
                  '#value' => $group_title,
                );

                $render['student reports text'] = array(
                  '#type' => 'markup',
                  '#markup' => '<div id="uib-tabs-student-reports">' . render($reports) . '</div>',
                );
              }
            }
          }

          $toc = array(
            '#items' => $tab_items,
            '#theme' => 'item_list',
            '#attributes' => array(
              'class' => array('uib-tabs-list'),
            ),
          );
        }
        $block['content']['fspres'][] = $render;
        if (isset($toc)) {
          $block['content']['fspres']['#prefix'] = render($toc);
        }
      }
      break;
    case 'study_period_phd':
      $node = menu_get_object();
      if ($node && $node->field_uib_study_category['und'][0]['value'] == 'phdkurs') {
        $data = uib_study__fspres_get_node_json($node->nid, 'render.json', TRUE);
        $tmp= uib_study__extract_study_info($data, 'FKU_UNDPER');
        if (!empty($tmp)) {
          $block['title'] = $tmp['#title'];
          $block['content'] = array(
            '#type' => 'markup',
            '#markup' => $tmp['#text'],
          );
        }
      }
      break;
    case 'study_so_code':
      $node = menu_get_object();
      $affected_study_categories = array('bachelorprogram','arsstudium','masterprogram','integrertemasterpr-profesjonsst');
      if ($node && in_array($node->field_uib_study_category['und'][0]['value'], $affected_study_categories)) {
        $data = uib_study__fspres_get_node_json($node->nid, 'info.json');
        if (!empty($data)) {
          if (!empty($data['studietypenr'])) {
            $block['title'] = t('Apply here');
            $block['content'] = array(
              '#type' => 'markup',
              '#markup' => "<h3>" . t('Application code in NUCAS') . "</h3>" . l($data['studietypenr'], 'http://www.samordnaopptak.no/'),
            );
          }
        }
      }
      break;
    case 'study_contact':
      $node = menu_get_object();
      if ($node) {
        $category = (!empty($node->field_uib_study_category['und'])) ? $node->field_uib_study_category['und'][0]['value'] : '';
        $data = uib_study__fspres_get_node_json($node->nid, 'render.json', TRUE);
        $render = array();
        if ($category == 'evu') {
          $tmp = uib_study__extract_study_info($data, 'EVU_KONTAK');
        }
        else {
          $tmp = uib_study__extract_study_info($data, 'EB_KONTAKT');
        }
        if (!$tmp) {
          $tmp = uib_study__extract_study_info($data, 'B_RE_INFO');
        }
        if (!$tmp) {
          $tmp = uib_study__extract_study_info($data, 'M_RE_INFO');
        }
        if ($tmp) {
          $render = array(
            '#markup' => uib_study__text_markup($tmp, $is_course),
          );
        }
        if ($render) {
          if (!strpos($render['#markup'],"mailto")) {
            $render['#markup'] = preg_replace('/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6})/', '<a href="mailto:$1">$1</a>', $render['#markup']);
          }
          $block['title'] = t("Contact");
          $block['content']['fspres'][] = $render;
        }
      }
      break;

    case 'study_facts_2':
      $node = menu_get_object();
      if ($node && isset($node->field_uib_study_type)) {
        $type = $node->field_uib_study_type['und'][0]['value'];
        $study_category = $node->field_uib_study_category['und'][0]['value'];
        $data = uib_study__fspres_get_node_json($node->nid, 'info.json', FALSE);
        global $language;
        if (empty($data))
          break;
        $data_2 = uib_study__fspres_get_node_json($node->nid, 'render.json', TRUE);
        $items = array();
        if ($type == 'course') {
          $category = $node->field_uib_study_category['und'][0]['value'];
          $study_code = $data['emneid']['emnekode'];
          $items[] = uib_study__get_study_facts_markup(t('ECTS credits'), $data['studiepoeng']);
          $items[] = uib_study__get_study_facts_markup(t('Teaching semester'), t($data['undervisningssemester:en']));
          $items[] = uib_study__get_study_facts_markup(t('Course code'), $study_code);
          if ($data['studieniva'] != 'FU') $items[] = uib_study__get_study_facts_markup(t('Number of semesters'), $data['antall-undsemester']);
          $sprak = uib_study__extract_study_info($data_2, 'EB_SPRAK');
          if ($sprak && $data['studieniva'] != 'FU') {
            $items[] = uib_study__get_study_facts_markup(t('Language'), $sprak['#text']);
          }
          $resources = array(
            '#theme' => 'item_list',
            '#items' => array(),
          );
          $schedule = uib_study__get_resource_links('schedule', $study_code);
          $resources['#items'][] = render($schedule);
          $reading_list = uib_study__get_resource_links('reading_list', $data);
          $resources['#items'][] = render($reading_list);
          if ($category == 'evu') {
            if (uib_study__course_description_exists($study_code)) {
              $tmp = uib_study__get_description_link($study_code);
              $resources['#items'][] = render($tmp);
            }
          }
          $items[] = uib_study__get_study_facts_markup(t('Resources'), render($resources));
        }
        elseif ($type == 'program' or $type == 'specialization') {
          $items[] = uib_study__get_study_facts_markup(t('ECTS credits'), $data['studiepoeng']);
          $points = uib_study__extract_study_info($data_2, 'B_RE_POENG');
          if ($points && $language->language == 'nb') {
            $items[] = uib_study__get_study_facts_markup('Poenggrense', $points['#text']);
          }
          $duration = number_format(round($data['studiepoeng'] / 60 * ($data['heltidsprosent'] / 100), 1), 1, ',', ' ');
          if (substr($duration, -2) == ',0')
            $duration = substr($duration, 0, -2);
          $items[] = uib_study__get_study_facts_markup(t('Years'), $duration);
          $seats_info = $data['infocategory'] == 'masterprogram' ? 'M_RE_PLASS' : 'B_RE_PLASS';
          $seats = uib_study__extract_study_info($data_2, $seats_info);
          if ($seats) {
            $items[] = uib_study__get_study_facts_markup(t('Intake'), uib_study__text_markup($seats, $is_course, TRUE));
          }
          $start_info = $data['infocategory'] == 'masterprogram' ? 'M_RE_START' : 'B_RE_START';
          $start = uib_study__extract_study_info($data_2, $start_info);
          if ($start) {
            $items[] = uib_study__get_study_facts_markup(t('Study start'), uib_study__text_markup($start, $is_course, TRUE));
          }
          $sprak_info = $data['infocategory'] == 'masterprogram' ? 'M_RE_SPRAK' : 'B_RE_SPRAK';
          $sprak = uib_study__extract_study_info($data_2, $sprak_info);
          if ($sprak) {
            $items[] = uib_study__get_study_facts_markup(t('Language'), uib_study__text_markup($sprak, $is_course, TRUE));
          }
          if (uib_study__has_study_plan($data_2)) {
            $study_path = uib_study__study_path($node->field_uib_study_code['und'][0]['value']);
            $items[] = uib_study__get_study_facts_markup(t('Study plan'), l(t('See study plan'), drupal_get_path_alias($study_path) . '/plan'));

          }
        }
        elseif ($type == 'exchange') {
          if (!empty($data['betingelse'])) {
            foreach ($data['betingelse'] as $key => $betingelse) {
              if ($betingelse['personkategori'] == 'STUDENT') {
                if (!uib_study__exchange_is_network($data)) {
                  foreach ($betingelse['sted'] as $place) {
                    if ($place['_type'] == 'eksternt' && $place['institusjonsnr'] != 184) {
                      $items[] = uib_study__get_study_facts_markup(t('Country'),uib_geography_get_country($place['landnr'], $language->language));
                      if (!empty($data['restinfo']['bynavn']) && $data['restinfo']['utvpersonkatkode'] == 'STUDENT') {
                        // Note: it is not clear what language the town name is in
                        // Note: there seems to be only a single town name available
                        $items[] = uib_study__get_study_facts_markup(t('Town'), check_plain($data['restinfo']['bynavn']));
                      }
                      if (!empty($place['antall_ut'])) {
                        $items[] = uib_study__get_study_facts_markup(t('Number of exchange places'), check_plain($place['antall_ut']));
                      }
                      elseif (!empty($betingelse['antall_ut'])) {
                        $items[] = uib_study__get_study_facts_markup(t('Number of exchange places'), check_plain($betingelse['antall_ut']));
                      }
                    }
                  }
                }
                if (!empty($data['studienivaintervallnavn'])) {
                  $study_level = str_replace('-', '&ndash;', check_plain($data['studienivaintervallnavn']));
                  $items[] = uib_study__get_study_facts_markup(t('Study level'), $study_level);
                }

                $items[] = uib_study__get_study_facts_markup(t('Exchange programme'), check_plain(drupal_ucfirst(drupal_strtolower($data['utvprogramkode']))));
                if (!empty($data['restinfo']['varighet']) && $data['restinfo']['utvpersonkatkode'] == 'STUDENT') {
                  $exchange_duration = check_plain($data['restinfo']['varighet'] . ' ' . drupal_strtolower($data['restinfo']['tidsenhet']));
                  $items[] = uib_study__get_study_facts_markup(t('Exchange duration'), $exchange_duration);
                }
              }
              if (in_array($study_category, array('forskningsavtale', 'mou')) && $betingelse['personkategori'] == 'FORSKER') {
                foreach ($betingelse['sted'] as $place) {
                  if ($place['_type'] == 'eksternt') {
                    $items[] =  uib_study__get_study_facts_markup(t('Country'),uib_geography_get_country($place['landnr'], $language->language));
                    $items[] = uib_study__get_study_facts_markup(t('Exchange type'), $data['utvprogramkode']);
                    if ($place['url']) {
                      $items[] = uib_study__get_study_facts_markup(t('Homepage'), $place['url']);
                    }
                  }
                }
              }
            }
          }
        }

        $render = array(
          '#theme' => 'item_list',
          '#items' => $items,
        );

        $block['content']['fspres'][] = $render;
      }
      break;
    case 'study_facts_exchange':
      $node = menu_get_object();
      if ($node && isset($node->field_uib_study_type)) {
        $data = uib_study__fspres_get_node_json($node->nid, 'info.json', FALSE);
        global $language;
        if (empty($data))
          break;
        $items = array();
        if (!empty($data['betingelse'])) {
          foreach ($data['betingelse'] as $place) {
            if ($place['personkategori'] == 'STUDENT') {
              foreach ($place['sted'] as $key ) {
                if ($key['_type'] == 'eksternt' && $key['institusjonsnr'] != 184) {
                  if (!uib_study__exchange_is_network($data)) {
                    $items[] = uib_study__get_study_facts_markup(t('Homepage'), l($key['url'],$key['url']));
                  }
                  $items[] = uib_study__get_study_facts_markup(t('How do I apply'), l(t('Instructions on Søknadsweb'),'utdanning/49395/søknadsweb-instruksjonar'));
                  $items[] = uib_study__get_study_facts_markup(t('Submit your application here'), l(t('Søknadsweb'),'https://soknadsweb.uib.no/'));
                  if (!empty($data['restinfo']['studietypenr'])) {
                    $items[] = uib_study__get_study_facts_markup(t('Kode i Søknadsweb'), check_plain($data['restinfo']['studietypenr']));
                  }
                  elseif ($data['utvprogramkode'] != 'NORDPLUS') {
                    $items[] = uib_study__get_study_facts_markup(t('Kode i Søknadsweb'), t('Not open for admission'));
                  }
                }
              }
            }
          }
        }
        if ($items) {
          $render = array(
            '#theme' => 'item_list',
            '#items' => $items,
          );
          $block['title'] = t('Information');
          $block['content']['facts_exchange'][] = $render;
        }
      }
      break;
    case 'study_related':
      $node = menu_get_object();
      if ($node && $node->type == 'uib_study') {
        $display_settings = array(
          'label' => 'hidden',
          'type' => 'uib_study_title_formatter',
          'settings' => array(
            'uib_study_field_name' => 'field_uib_study_title',
            'uib_study_link' => 1,
          ),
        );
        $block['title'] = t("Relevant study programmes");
        $block['content'] = field_view_field('node', $node, 'field_uib_study_part_of', $display_settings);
      }
      break;

    case 'study_testimonial':
      $node = menu_get_object();
      if ($node) {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'uib_testimonial')
          ->propertyCondition('status', 1)
          ->fieldCondition('field_uib_study_programmes', 'target_id', $node->nid);
        $result = $query->execute();
        if (!empty($result)) {
          $testimonials = array_keys($result['node']);
          $max = count($testimonials) - 1;
          $selected = rand(0, $max);
          $selected_nid = $testimonials[$selected];
          $block['content'] = node_view(node_load($selected_nid), 'teaser');
          $block['subject'] = t('Selected testimonial');
        }
      }
      break;

    case 'study_semester_toggle':
      $node = menu_get_object();
      if ($node && uib_study__is_course() && $node->field_uib_study_category['und'][0]['value'] != 'evu') {
        $data = uib_study__fspres_get_node_json($node->nid, 'render.json', TRUE);
        if (empty($data))
          break;
        list($previous_semester, $current_semester, $next_semester) = uib_study__get_adjacent_semesters();
        $is_empty = array(
          $previous_semester => TRUE,
          $current_semester => TRUE,
          $next_semester => TRUE,
        );
        foreach ($data as $group) {
          foreach ($group['#items'] as $item) {
            foreach (array_keys($is_empty) as $sem) {
              if (empty($item['#variants'])) {
                if (!empty($item['#text'])) {
                  $is_empty[$sem] = FALSE;
                }
              }
              else {
                if (array_key_exists($sem, $item['#variants'])) {
                  if (!empty($item['#variants'][$sem])) {
                    $is_empty[$sem] = FALSE;
                  }
                }
                elseif (!empty($item['#text'])) {
                  $is_empty[$sem] = FALSE;
                }
              }
            }
          }
        }
        {
          $markup = "";
          if (!$is_empty[$previous_semester]) {
            $markup .= '<li><a href="?sem='.$prevSemQQ.'" class="'.$prev.'">' . uib_study__semester_name($previous_semester);
            $markup .= ' (' . t('Previous semester') . ')' . '</a></li>';
          }
          if (!$is_empty[$current_semester]) {
            $markup .= '<li><a href="?sem='.$currSemQQ.'" class="'.$curr.'">' . uib_study__semester_name($current_semester);
            $markup .= ' (' . t('Current semester') . ')' . '</a></li>';
          }
          if (!$is_empty[$next_semester]) {
            $markup .= '<li><a href="?sem='.$nextSemQQ.'" class="'.$next.'">' . uib_study__semester_name($next_semester);
            $markup .= ' (' . t('Next semester') . ')' . '</a></li>';
          }
          if ($markup) {
            $block['subject'] = t('Select semester');
            $block['content'] = "<ul>$markup</ul>";
          }
        }
      }
      break;

    case 'study_evu':
      $node = menu_get_object();
      if ($node) {
        $study_node = entity_metadata_wrapper('node', $node);
        if (isset($node->field_uib_study_category)) {
          if ($study_node->field_uib_study_category->value() == 'evu') {
            include_once 'uib_study.evu.inc';
            $block = uib_study__evu_courses_block($node);
          }
        }
      }
      break;

    case 'study_static_links':
      $node = menu_get_object();
      if (isset($node->field_uib_study_type)) {
        if ($node->field_uib_study_type['und'][0]['value'] == 'exchange') {
          $markup = array();
          $markup[] = l(t('Norwegian state educational loan fund'), 'http://www.lanekassen.no/');
          $markup[] = l(t('Diplomatic relations'), 'http://www.regjeringen.no/nb/dep/ud/dep/forbindelser.html?id=447053');
          $markup[] = l(t('Association for Norwegian students abroad'), 'http://www.ansa.no/');
          $block['title'] = t('Relevant links');
          $block['content'] = '<ul><li>' . implode('</li><li>', $markup) . '</li></ul>';
         }
       }
      break;
    case 'study_plan':
      $node = menu_get_object();
      if (isset($node->field_uib_study_type)) {
        if (in_array($node->field_uib_study_type['und'][0]['value'], array('program', 'specialization'))) {
          $data = uib_study__fspres_get_node_json($node->nid, 'render.json', TRUE);
          if (uib_study__has_study_plan($data)) {
            $block['title'] = t('Study plan');
            $study_path = uib_study__study_path($node->field_uib_study_code['und'][0]['value']);
            $tmp = l(t('See study plan'), (drupal_get_path_alias($study_path) . '/plan'));
            $block['content'] = $tmp;
          }
        }
      }
      break;
  }

  return $block;
}

/*
 * Creates the render array for the Construction plan of a Study
 * program.
 */
function uib_study__construction_table($plan, $type, $study_code) {
  $t_rows = array();
  $max_depth = 0;
  $strip = FALSE;
  $strip_depth = 0;
  $strip_list = array();
  foreach ($plan['rows'] as $key => $row) {
    if ($type == 'specialization') {
      // scan for irrelevant specializations
      if (isset($row['specialization']) && $row['specialization'] != $study_code) {
        $strip = TRUE;
        $strip_depth = $row['depth'];
        $strip_list[] = $key;
        continue;
      }
      if ($strip && $row['depth'] > $strip_depth) {
        $strip_list[] = $key;
        continue;
      }
      if ($strip && $row['depth'] <= $strip_depth) {
        $strip = FALSE;
      }
    }
    if ($row['depth'] > $max_depth) $max_depth = $row['depth'];
  }
  if (!empty($strip_list)) {
    // remove any irrelevant specializations found
    for ($i = (count($strip_list) - 1); $i >= 0; $i--) {
      unset($plan['rows'][$strip_list[$i]]);
    }
  }
  foreach ($plan['rows'] as $s_row) {
    $t_row = array();
    if ($s_row['depth'] > 1) {
      if (!empty($s_row['emneheader'])) {
        $t_row[] = uib_study__insert_t_row($max_depth);
        $headers = array(t('Course code'), t('Course title'), t('SP'), t('S'), t('R'));
        $header_titles = array('', '', t('ECTS credits'), t('Semester'), t('Recommended semester'),);
        foreach ($headers as $key => $title) {
          $t_row[] = array(
            'data' => $title,
            'header' => TRUE,
            'title' => $header_titles[$key],
          );
        }
      }
      elseif (!empty($s_row['emnekode'])) {
        $t_row[] = uib_study__insert_t_row($max_depth);
        $emnenavn = $s_row['name'];
        if (!$emnenavn)
          $emnenavn = '<title>';  # will be expanded
        $cells = array(
          uib_study__study_link($s_row['emnekode']),
          uib_study__study_link($s_row['emnekode'], $emnenavn),
          $s_row['sp'],
          $s_row['s'],
          strcmp($s_row['a'], $s_row['s']) ? $s_row['a'] : '',
        );
        foreach ($cells as $cell) {
          $t_row[] = array(
            'data' => $cell,
            'class' => 'uib-study-data',
          );
        }
      }
      else {
        $t_row[] = uib_study__insert_t_row($s_row['depth']);
        $td = array(
          'data' => check_plain($s_row['name']),
          'colspan' => 5 + $max_depth - $s_row['depth'],
        );
        if (isset($s_row['specialization'])) {
          $spec_path = uib_study__study_path($s_row['specialization']);
          // avoid linking specialization to itself
          if ($spec_path && $type != 'specialization') {
            $td['data'] = l($td['data'], $spec_path);
          }
          $td['class'] = 'uib-study-specialization';
        }
        if ($type == 'specialization' && isset($s_row['name']) && $s_row['name'] == 'Studieretning') {
          unset($s_row['description']);
        }
        if (isset($s_row['description'])) {
          # fake another row then
          $tmp = $t_row;
          $tmp[] = $td;
          $t_rows[] = $tmp;

          # and make the current row display the description
          $td['data'] = uib_study__filter_text($s_row['description']);
          $td['class'] = 'uib-study-description';
        }
        $t_row[] = $td;
      }
    }
    else {
      $caption = $s_row['name'];
    }
    //$t_row[] = check_plain(drupal_json_encode($s_row));
    $t_rows[] = $t_row;
  }
  // Add explanation of abbreviated headers at end of table
  if (!empty($header_titles)) {
    $tmp = '';
    $glue = '';
    foreach ($header_titles as $key => $title_text) {
      if ($title_text) {
        $tmp .= $glue . $headers[$key] . ' = ' . $title_text;
        $glue = ', ';
      }
    }
    $t_rows[] = array(
      array(
        'data' => $tmp,
        'colspan' => 5 + $max_depth - 1,
        'class' => 'uib-study-abbrev-explanation',
      ),
    );
  }
  return array('t_rows' => $t_rows, 'caption' => $caption);
}

/**
 * Returns an array of external institution codes
 * connected to a student exchange agreement
 */
function uib_study__external_inst_code(&$info) {
   $codes = array();
  foreach ($info['betingelse'] as $category) {
    if ($category['personkategori'] == 'STUDENT') {
      foreach ($category['sted'] as $part) {
        if ($part['institusjonsnr'] != 184) {
          $codes[] = $part['institusjonsnr'];
        }
      }
    }
  }
  return $codes;
}

/**
 * Expand the study level code to a more readable string
 */
function uib_study__studieniva($code) {
  $map = uib_study__fspres_get_json("studieniva/info.json");
  if (!empty($map[$code])) {
    $lang = uib_study__fspres_lang();
    if (!empty($map[$code][$lang]) && $map[$code][$lang] != '-')
      return $map[$code][$lang];
  }
  return NULL;
}

/**
 * Implements hook_filter_info().
 *
 */
function uib_study_filter_info() {
  $filters['filter_studycodes'] = array(
    'title' => t('Link study codes to their nodes'),
    'description' => t('Study codes (whole words) are linked to their corresponding study nodes.'),
    'process callback' => 'uib_study__filter_text',
    'tips callback' => '_uib_study_filter_tips',
  );
  return $filters;
}

/**
 *
 */
define('UIB_STUDY__CODE_PATTERN', '[A-ZÆØÅ]{2}[A-ZÆØÅ\d]+(?:-[A-ZÆØÅ\d]+)*(?:\/(?:\d+[HV]?|[A-Z]{2,3}))?');


/**
 * Replace study codes in the text with an HTML link to the corresponding node.
 */
function uib_study__filter_text($text) {
  return uibx_html_linkify('/\b' . UIB_STUDY__CODE_PATTERN . '\b/', function ($matches) {
    return uib_study__study_link($matches[0]);
  }, $text);
}

/**
 * Filter tips callback for study filter.
 *
 */
function _uib_study_filter_tips($filter, $format, $long = FALSE) {
  return t('Study codes are linked to their content.');
}

/**
 *  Returns array reference that maps study codes into nid
 */
function &uib_study__study_map() {
  static $study_nid;
  if (!isset($study_nid)) {
    $result = db_query(
      'SELECT n.nid, c.field_uib_study_code_value
      FROM {node} n, {field_data_field_uib_study_code} c
      WHERE n.status = 1 AND n.type = :studytype AND c.entity_id = n.nid',
      array(':studytype' => 'uib_study')
      );
    foreach ($result as $record) {
      $study_nid[$record->field_uib_study_code_value] = $record->nid;
    }
  }
  return $study_nid;
}

/**
 * Get nid from study code
 * @param string $study_code The study code
 * @return int node id or NULL if not found.
 */
function uib_study__nid_from_study_code($study_code) {
  $map = &uib_study__study_map();
  if (array_key_exists($study_code, $map)) {
    return $map[$study_code];
  }
}

/**
 *  Returns the path to the page for given study code.  Returns FALSE for codes
 *  that are not in use.
 */
function uib_study__study_path($code) {
  $study_nid = &uib_study__study_map();
  if (isset($study_nid[$code])) {
    return "node/$study_nid[$code]";
  }
  return FALSE;
}

/**
 *  Linkify a study code.  Returns $code unchanged if code isn't valid.
 *
 *  The optional $text argument can be provided to replace the link text.
 *  The special $text value of "<title>" will be replaced with the title of
 *  the study.
 */
function uib_study__study_link($code, $text=NULL) {
  $text = $text ? $text : $code;
  $path = uib_study__study_path($code);
  if ($path) {
    if ($text == '<title>') {
      # expand the name
      $nid = substr($path, 5);
      $node = node_load($nid);
      global $language;
      $text = $node->field_uib_study_title[$language->language][0]['value'];
    }
    return l($text, $path);
  }
  else {
    return check_plain($text);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function uib_study_field_formatter_info() {
  return array(
    'uib_study_title_formatter' => array(
      'label' => t('Display a field'),
      'description' => t('Display a field instead of the node title.'),
      'field types' => array('entityreference'),
      'settings' => array(
        'uib_study_field_name' => '',
        'uib_study_link' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function uib_study_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  $element['uib_study_field_name'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Field name'),
    '#description'    => t('The name of the uib field to use'),
    '#default_value'  => $settings['uib_study_field_name'],
  );
  $element['uib_study_link'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Link to entity'),
    '#description'    => t('Indicate if the field should link to its entity'),
    '#default_value'  => $settings['uib_study_link'],
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function uib_study_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $lnk = '';
  if (!$settings['uib_study_link']) {
    $lnk = 'no ';
  }
  $summary = t('Show field "@the_field", ' . $lnk . 'link to entity', array(
    '@the_field' => $settings['uib_study_field_name'],
  ));
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function uib_study_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($display['type'] == 'uib_study_title_formatter') {
    global $language;
    $elements = array();
    $settings = $display['settings'];
    if (!empty($settings['uib_study_field_name'])) {
      foreach ($items as $delta => $item) {
        $node = entity_metadata_wrapper('node', node_load($item['target_id']));
        $lang = $language->language;
        if (empty($lang) || $lang == 'und') {
          $lang = 'nb';
        }
        $display_text = $node->language($lang)->$settings['uib_study_field_name']->value();
        if ($settings['uib_study_link']) {
          $elements[$delta]['#markup'] = l($display_text, 'node/' . $item['target_id']);
        }
        else {
          $elements[$delta]['#markup'] = $display_text;
        }
      }
    }
    return $elements;
  }
}

/**
 * Determine current semester - brief format
 */
function uib_study__get_current_semester() {
  $current_semester = (date('n') > 6 ? 'h' : 'v');
  return date('Y') . $current_semester;
}

/**
 * Determine current semester - longer format
 */
function uib_study__get_current_semester_long() {
  $tmp = uib_study__get_current_semester();
  $semester = substr($tmp, 4) == 'h' ? t('fall') : t('spring');
  return $semester . ' ' . substr($tmp, 0, 4);
}

function uib_study__get_resource_links($type, $data) {
  list ($previous, $current, $next) = uib_study__get_adjacent_semesters();
  if ($type == 'schedule') {
    $previous_semester = uib_study__get_schedule_link($data, $previous, array('previous-semester'));
    $current_semester = uib_study__get_schedule_link($data, $current, array('current', 'previous-exists', 'next-exists', 'variants-exist'));
    $next_semester = uib_study__get_schedule_link($data, $next, array('next-semester'));
  }
  else {
    global $language;
    $lang = $language->language == 'nb' ? 'no' : 'en';
    if (isset($data['reading-list-url:' . $lang . ':' . $previous])) {
      $previous_semester = uib_study__get_reading_list_link($data['reading-list-url:' . $lang . ':' . $previous], array('previous-semester'));
    }
    if (isset($data['reading-list-url:' . $lang . ':' . $current])) {
      $current_semester = uib_study__get_reading_list_link($data['reading-list-url:' . $lang . ':' . $current], array('current', 'previous-exists', 'next-exists', 'variants-exist'));
    }
    if (isset($data['reading-list-url:' . $lang . ':' . $next])) {
      $next_semester = uib_study__get_reading_list_link($data['reading-list-url:' . $lang . ':' . $next], array('next-semester'));
    }
  }
  if (isset($_GET['sem']) && $_GET['sem'] == $previous) {
    if (empty($previous_semester)) return;
    $renderedSemester = $previous_semester;
  }
  elseif (isset($_GET['sem']) && $_GET['sem'] == $next) {
    if (empty($next_semester)) return;
    $renderedSemester = $next_semester;
  }
  else {
    if (empty($current_semester)) return;
    $renderedSemester = $current_semester;
  }
  return render($renderedSemester);
}

function uib_study__get_schedule_link($study_code, $semester, $classes) {
  global $language;
  $lang = ($language->language == 'nb' ? '' : 'en');
  $schedule = array(
    '#theme' => 'link',
    '#text' => t('Schedule'),
    '#path' => 'http://rom.app.uib.no/timeplanliste.php?emne='. $study_code . '&periode=' . $semester . '&lang=' . $lang . '&simple=1',
    '#options' => array(
      'attributes' => array('class' => $classes),
      'html' => TRUE,
    ),
  );
  return $schedule;
}

function uib_study__get_reading_list_link($path, $classes) {
  $reading_list = array(
    '#theme' => 'link',
    '#text' => t('Reading list'),
    '#path' => $path,
    '#options' => array(
      'attributes' => array('class' => $classes),
      'html' => TRUE,
    ),
  );
  return $reading_list;
}

function uib_study__get_description_link($study_code) {
  global $language;
  $course = $language->language == 'nb' ? 'emne' : 'course';
  return array(
    '#theme' => 'link',
    '#text' => t('Course description'),
    '#path' => $course . '/' . $study_code . '/description',
    '#options' => array(
      'attributes' => array(),
      'html' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function uib_study_form_alter(&$form, &$form_state, $form_id) {
  global $language;
  if ($form_id == "uib_study_node_form") {
    // Show code and title at the top of the form
    $study = entity_metadata_wrapper('node', $form['#node']);
    $form['study_title'] = array(
      '#type' => 'html_tag',
      '#tag' => 'h1',
      '#value' => $study->field_uib_study_code->value() . ' ' . $study->language($language->language)->field_uib_study_title->value(),
      '#weight' => -3,
    );

    if ($GLOBALS['user']->uid != 1) {
      // hide all fields that are fs-pres synchronised
      hide($form['title']);
      hide($form['field_uib_ou']);
      hide($form['field_uib_study_title']);
      $form['field_uib_study_category']['#access'] = FALSE;
      hide($form['field_uib_study_type']);
      hide($form['field_uib_study_code']);
      $form['field_uib_study_part_of']['#access'] = FALSE;
      $form['field_uib_study_points_rank']['#access'] = FALSE;
      $form['field_uib_nus']['#access'] = FALSE;
      $form['field_uib_study_country']['#access'] = FALSE;
      $form['field_uib_study_label']['#access'] = FALSE;
      // hide language selector
      hide($form['language']);
      // hide additional settings
      hide($form['path']);
      hide($form['author']);
    }
  }
  elseif ($form_id == 'taxonomy_form_term' && $form['#vocabulary']->name == 'uib_nus') {
    // hide fields that are synchronised (except for user 1)
    if ($GLOBALS['user']->uid != 1) {
      hide($form['name']);
      hide($form['description']);
      $form['relations']['#access'] = FALSE;
      hide($form['field_uib_nus_id']);
      hide($form['field_uib_term_title']);
      $form['path']['#access'] = FALSE;
    }
  }
}

function uib_study__extract_study_info(&$data, $info_type = NULL) {
  if (empty($data) || empty($info_type)) {
    return NULL;
  }
  $text = NULL;
  foreach ($data as $inx => $group) {
    if ($group['#items']) {
      foreach ($group['#items'] as $key => $info) {
        if ($info['#type'] == $info_type) {
          $text = $info;
          if (stripos($group['#group'], '_kontakt') && count($group['#items']) < 2) {
            unset($data[$inx]);
          }
          else {
            unset($data[$inx]['#items'][$key]);
          }
        }
      }
    }
  }
  return $text;
}

/**
 * Add div with semester classes to all semester variants of a study text item
 */
function uib_study__text_markup($item, $is_course, $plain = FALSE) {
  if (empty($item)) {
    return;
  }
  $tmp_markup = '';
  if ($is_course) {
    $tmp_markup .= '<div>';
  }
  if ($plain) {
    // no html tags
    $tmp_markup .= check_plain(strip_tags($item['#text']));
  }
  else {
    // keep html tags
    $tmp_markup .= uib_study__title_and_text($item['#title'], $item['#text']);
  }
  if ($is_course) {
    $tmp_markup .= '</div>';
  }
  return $tmp_markup;
}

/**
 * Get previous, current, and next semester indication strings
 * Returns an array with the three adjacent semesters with current as index 1
 */
function uib_study__get_adjacent_semesters() {
  $current_semester = uib_study__get_current_semester();
  $spring = 'v';
  $fall = 'h';
  $year = substr($current_semester, 0, 4);
  $s_index = substr($current_semester, 4, 1);
  if (strtolower($s_index) == $spring) {
    $previous_semester = ($year - 1) . $fall;
    $next_semester = $year . $fall;
  }
  else {
    $previous_semester = $year . $spring;
    $next_semester = ($year + 1) . $spring;
  }
  return array($previous_semester, $current_semester, $next_semester);
}

/**
 * Expand semester code to a text
 */
function uib_study__semester_name($code = NULL) {
  if (!empty($code)) {
    if (substr($code, 4, 1) == 'v') {
      $name = t('Spring');
    }
    else {
      $name = t('Autumn');
    }
    $name .= ' ' . substr($code, 0, 4);
    return $name;
  }
}

/**
 * Implements hook_contextual_links_view_alter()
 */
function uib_study_contextual_links_view_alter(&$element, $items) {
  if (isset($element['#element']['#block'])) {
    if ($element['#element']['#block']->module == 'uib_study' && $element['#element']['#block']->delta == 'study_content') {
      unset($element['#links']);
    }
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function uib_study_taxonomy_term_insert($term) {
  if ($term->vocabulary_machine_name == 'uib_nus') {
    uib_study__add_taxonomy_aliases($term);
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function uib_study_taxonomy_term_update($term) {
  if ($term->vocabulary_machine_name == 'uib_nus' && $term->field_uib_term_title != $term->original->field_uib_term_title) {
    uib_study__add_taxonomy_aliases($term);
  }
}

/**
 * Add or update NUS code aliases for a taxonomy term
 */
function uib_study__add_taxonomy_aliases($term) {
  $taxonomy_term = entity_metadata_wrapper('taxonomy_term', $term);
  $source_path = 'taxonomy/term/' . $taxonomy_term->getIdentifier();

  // Obtain the names of the education area in 'nb' and 'en' languages
  $study_area_nid = variable_get('uib_study_area_nid');
  $utdanning = uibx_path_load("node/$study_area_nid");
  $languages['nb'] = $utdanning[0]->alias;
  $query = new EntityFieldQuery();
  $edu = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('tnid', $study_area_nid)
    ->propertyCondition('language', 'en')
    ->execute();
  $edu_nids = array_keys($edu['node']);
  $education = uibx_path_load('node/' . $edu_nids[0]);
  $languages['en'] = $education[0]->alias;

  foreach ($languages as $lang_abbrev => $area_name) {
    if ($taxonomy_term->language($lang_abbrev)->field_uib_term_title->value()) {
      $path = $area_name . '/';
      $path .= uib_study__get_parents_path($term, $lang_abbrev);
      $path .= uib_study__prepare_path($taxonomy_term->language($lang_abbrev)->field_uib_term_title->value());
      if ($existing_alias = uibx_path_load($source_path, $lang_abbrev)) {
        if ($existing_alias[0]->alias != $path) {
          $existing_alias = (array) $existing_alias[0];
          $existing_alias['alias'] = $path;
          path_save($existing_alias);
          // Update the aliases of child terms
          uib_study__taxonomy_children($term->tid, $term->vid, $area_name, $lang_abbrev);
        }
      }
      else {
        $new_alias = array('source' => $source_path, 'alias' => $path, 'language' => $lang_abbrev);
        path_save($new_alias);
      }
    }
  }
}

/**
 * When a nus term alias has changed, existing child aliases need to be updated too
 */
function uib_study__taxonomy_children($parent_tid, $vocab_id, $area_name, $lang_abbrev) {
  $children = taxonomy_get_children($parent_tid, $vocab_id);
  foreach ($children as $term) {
    $term_child = entity_metadata_wrapper('taxonomy_term', $term);
    // update the aliases
    $source_path = 'taxonomy/term/' . $term_child->getIdentifier();
    if ($existing_alias = uibx_path_load($source_path, $lang_abbrev)) {
      $existing_alias = (array) $existing_alias[0];
      $new_path = $area_name . '/' . uib_study__get_parents_path($term, $lang_abbrev);
      $new_path .= uib_study__prepare_path($term_child->language($lang_abbrev)->field_uib_term_title->value());
      if ($existing_alias['alias'] != $new_path) {
        $existing_alias['alias'] = $new_path;
        path_save($existing_alias);
        uib_study__taxonomy_children($term->tid, $vocab_id, $area_name, $lang_abbrev);
      }
    }
  }
}

/**
 * Get translated title of parent(s) for use in alias path
 */
function uib_study__get_parents_path($term, $lang) {
  if ($parents = taxonomy_get_parents($term->tid)) {
    $parent_term = entity_metadata_wrapper('taxonomy_term', current($parents));
    if ($parent_term->language($lang)->field_uib_term_title->value()) {
      $path = uib_study__prepare_path($parent_term->language($lang)->field_uib_term_title->value()) . '/';
      return uib_study__get_parents_path(current($parents), $lang) . $path;
    }
  }
  return '';
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function uib_study_taxonomy_term_delete($term) {
   if ($term->vocabulary_machine_name == 'uib_nus') {
    // delete term aliases
    $term_url = 'taxonomy/term/' . $term->tid;
    while ($existing = path_load($term_url)) {
      path_delete($existing['pid']);
    }
  }
}

/**
 * Prepares a text string for use in an alias path
 *
 * @param  string $in_path  the input text string
 * @return string           cleaned text string with hyphens instead of spaces
 */
function uib_study__prepare_path($in_path) {
  $in_path = trim($in_path);
  if (empty($in_path)) {
    return $in_path;
  }
  $path = drupal_strtolower($in_path);
  $path = mb_ereg_replace('\W+', '-', $path);
  $path = preg_replace('/(_)_+|(-)-+/', '\\1\\2', $path);
  return $path;
}

/**
 * Implements hook_entity_info_alter().
 */
function uib_study_entity_info_alter(&$entity_info) {
  $entity_info['taxonomy_term']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_views_pre_render().
 */
function uib_study_views_pre_render(&$view) {
  global $language;
  if (in_array($view->name, array(
      'courses',
      'special_study_listings',
      'study_blocks',
    ))) {
    $current_displays = array(
      'b1',
      'quota',
      'self_financing',
    );
    if (in_array($view->current_display, $current_displays)) {
      $vocab = taxonomy_vocabulary_machine_name_load('uib_organisation');
      uib_study__translate_exposed_filter($view, $vocab->vid, 3, NULL);
    }
    if ($view->current_display == 'b1') {
      $vocab = taxonomy_vocabulary_machine_name_load('uib_study_labels');
      uib_study__translate_exposed_filter($view, $vocab->vid, 1, NULL);
    }
    if ($view->current_display == 'courses_all_b1') {
      uib_study__translate_exposed_filter($view, 1, 2, 4);
    }
    if ($view->current_display == 'studypr_all_b1'
      ) {
      uib_study__translate_exposed_filter($view, 1, 1, 2);
    }
  }

  if ($view->name == 'uib_taxonomy_term') {
    $term_id = $view->args[0];
    $term = taxonomy_term_load($term_id);

    // NUS code pages
    if ($term->vocabulary_machine_name == 'uib_nus') {
      if (arg(0) == 'taxonomy' && arg(1) == 'term') {
        // Set the term page to belong to education
        uib_area__get_current(variable_get('uib_study_area_nid'));
      }

      // Add the taxonomy term itself as an attachment (before)
      $term_data = taxonomy_term_view($term, $view_mode = 'full');
      $view->attachment_before = render($term_data);

      // Add a list underlying taxonomy terms as another attachment (after)
      $children = taxonomy_get_children($term_id);
      if (!empty($children)) {
        foreach ($children as $tid => $child) {
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'uib_study')
            ->propertyCondition('status', 1)
            ->fieldCondition('field_uib_study_type', 'value', 'program', '=')
            ->fieldCondition('field_uib_nus', 'target_id', $tid, '=');
          // Show term only if there are study programmes attached
          if ($attached_programmes = $query->execute()) {
            $term = taxonomy_term_view($child, $view_mode = 'teaser');
            $view->attachment_after .= render($term);
          }
        }
      }
    }
  }
  if (($view->name == 'courses' && ($view->current_display == 'study_programmes' || $view->current_display == 'study_programmes_all_page')) ||($view->name == 'study_blocks' && $view->current_display == 'studypr_all_b1') || $view->name == 'uib_taxonomy_term') {
    // Re-sorting views results when grouping on study category
    // It will probably not work as expected if a pager is used with the view
    $category_weight = array(
      'undergraduate' => 1,
      'bachelorprogram' => 3,
      'masterprogram' => 5,
      'integrertemasterpr-profesjonsst' => 7,
      'arsstudium' => 9,
      'phdprogram' => 11,
      'postgraduate' => 13,
    );
    $sort_array = array();
    $i = 0;
    $prev=null;
    foreach ($view->result as $row) {
      if($row->nid == '94865'){
        $row->field_field_uib_study_category =
          $prev->field_field_uib_study_category;
        $row->field_field_uib_study_title[0]['raw']['safe_value']=
          $row->field_data_field_uib_study_title_field_uib_study_title_value;
        $row->field_field_uib_study_title[0]['raw']['value']=
          $row->field_data_field_uib_study_title_field_uib_study_title_value;
        $row->field_field_uib_study_title[0]['rendered']['#markup']=
          $row->field_data_field_uib_study_title_field_uib_study_title_value;
        $row->field_field_uib_study_title[0]['rendered']['#access']=true;
        $row->_field_data['nid'] =array('entity' => node_load($row->nid),
          'entity_type' => 'node') ;
      }
      @$weight = $category_weight[$row->field_field_uib_study_category[0]['raw']['value']];
      $weight = empty($weight) ? "99" : sprintf("%02d", $weight);
      $suffix = sprintf("%06d", $i);
      $sort_array[$weight . $row->field_field_uib_study_category[0]['rendered']['#markup'] . $suffix] = $row;
      $i++;
      $prev = $row;
    }
    ksort($sort_array);
    $view->result = $sort_array;
  }

  if ($view->name == 'exchange_agreements') {
    // Extra filter in order to use "without depth" for a particular
    // exchange agreement owner: uib
    $uib_tid = 2271;
    if (isset($view->exposed_input['term_node_tid_depth_1']) && $view->exposed_input['term_node_tid_depth_1'][0] == $uib_tid) {
      foreach ($view->result as $delta => $hit) {
        if ($hit->_field_data['nid']['entity']->field_uib_study_organisation['und'][0]['target_id'] != $uib_tid) {
          unset($view->result[$delta]);
        }
      }
    }

    $vocab_name = 'uib_organisation';
    $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);
    uib_study__translate_exposed_filter($view, $vocab->vid, 3, NULL);
    $msg = array();
    $msg[] = t('Displaying') . ' ' . count($view->result) . ' ' . t('exchange agreements');
    $glue = t('for');

    if (!empty($view->filter['field_uib_study_code_value']->value)) {
      $msg[] = ' ' . $glue . ' "' . $view->filter['field_uib_study_code_value']->value . '" ' . t('study programme');
      $glue = '';
    }
    if (!empty($view->filter['field_uib_ou_title_value']->value)) {
      $msg[] = ' ' . $glue . ' "' . $view->filter['field_uib_ou_title_value']->value . '" ' . t('faculty/department');
      $glue = '';
    }
    if (!empty($view->filter['field_uib_geographic_name_value']->value)) {
      $msg[] = t('with') . ' "' . $view->filter['field_uib_geographic_name_value']->value . '"';
    }
    $view->attachment_before = implode(' ', $msg);

    // add numbers to group names
    $groups = array();
    $tax_item = 'taxonomy_term_data_field_data_field_uib_study_organisation_t';
    foreach ($view->result as $row) {
      if (!isset($groups[$row->{$tax_item}])) {
        $groups[$row->{$tax_item}] = 1;
      }
      else {
        $groups[$row->{$tax_item}]++;
      }
    }
    $agreements_with_reports = array_keys(uib_study__student_reports_list());
    foreach ($view->result as $delta => $row) {
      $view->result[$delta]->field_field_uib_org_name[0]['rendered']['#markup'] .= ' (' . $groups[$view->result[$delta]->{$tax_item}] . ')';
      if ($language->language == 'nb' &&
        in_array($view->result[$delta]->field_field_uib_study_code[0]['raw']['value'], $agreements_with_reports)) {
        continue;
      }
      else {
        $view->result[$delta]->field_field_uib_study_code[0]['rendered']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Determine if current node's study_type is course
 * @return [bool]
 */
function uib_study__is_course($category=FALSE) {
  $is_course = FALSE;
  $node = menu_get_object();
  if ($node) {
    if (isset($node->field_uib_study_type)) {
      $is_course = $node->field_uib_study_type['und'][0]['value'] == 'course';
      if ($is_course && $category) {
        $is_course = ($node->field_uib_study_category['und'][0]['value'] == $category);
      }
    }
  }
  return $is_course;
}

/**
 * Determine if current node's study_type is exchange agreement
 * @return [bool]
 */
function uib_study__is_exchange($node = FALSE) {
  $is_exchange = FALSE;
  if (!$node) {
    $node = menu_get_object();
  }
  if ($node) {
    if (isset($node->field_uib_study_type)) {
      if ($node->field_uib_study_type['und'][0]['value'] == 'exchange') {
        $is_exchange = TRUE;
      }
    }
  }
  return $is_exchange;
}

/**
 * Determine if exchange agreement is a network
 */
function uib_study__exchange_is_network(&$info) {
  $is_network = FALSE;
  if ($info['utvprogramkode'] == 'NORDPLUS' || count($info['sted']) > 2) {
    $is_network = TRUE;
  }
  return $is_network;
}

function uib_study__has_study_plan(&$data) {
  foreach ($data as $key => $group) {
    if(substr($group['#group'], -11) == '_studieplan') return TRUE;
  }
  return FALSE;
}

function uib_study__insert_t_row($depth) {
  $row = array(
    'data' => '',
    'colspan' => $depth - 1,
    'class' => 'uib-cell-indent-' . ($depth - 1),
  );
  return $row;
}

function uib_study__title_and_text($title, $text) {
  $output = '';
  if (empty($text)) {
    return $output;
  }
  $output .= '<h3>' . $title . '</h3>';
  if (substr($text, 0, 1) != '<') {
    $output .= '<p>' . uib_study__filter_text($text) . '</p>';
  }
  else {
    $output .= uib_study__filter_text($text);
  }
  return $output;
}

/**
 *  Function to translate exposed filter in study views
 *
 *  @param object   $view   the view
 *  @param int      $taxonomy_vocabulary_id
 *  @param int      $max_depth  number of levels of the taxonomy
 *  @param int      $number_of_chars_to_remove  the number of chars that makes the nuscode
 */
function uib_study__translate_exposed_filter(&$view, $taxonomy_vocabulary_id, $max_depth, $number_of_chars_to_remove) {
  $vocab = taxonomy_vocabulary_load($taxonomy_vocabulary_id);
  $taxonomy_tree = taxonomy_get_tree($taxonomy_vocabulary_id, 0, $max_depth);
  global $language;
  foreach ($taxonomy_tree as $key => $t) {
    if ($vocab->name == 'uib_organisation') {
      $search = $t->name;
      if (strpos($view->exposed_widgets, $search)) {
        $entity = taxonomy_term_load($t->tid);
        $term = entity_metadata_wrapper('taxonomy_term', $entity);
        if ($term->language($language->language)->field_uib_org_name->value()) {
          $replace = $term->language($language->language)->field_uib_org_name->value();
          $view->exposed_widgets = str_replace($search, $replace, $view->exposed_widgets);
        }
      }
    }
    elseif ($vocab->name == 'uib_study_labels') {
      $search = $t->name;
      if ($language->language == 'nb' && strpos($view->exposed_widgets, $search)) {
        $replace = t(check_plain($search));
        $view->exposed_widgets = str_replace($search, $replace, $view->exposed_widgets);
      }
    }
    else {
      if (strpos($view->exposed_widgets, $t->name)) {
        list($nb, $en) = explode('/', substr($t->name, $number_of_chars_to_remove));
        $term = $language->language == 'nb' ? $nb : $en;
        $view->exposed_widgets = str_replace($t->name, $term, $view->exposed_widgets);
      }
    }
  }
  // field_uib_study_category filter
  if ($language->language != 'en') {
    if (strpos($view->exposed_widgets, 'edit-field-uib-study-category-value-wrapper') ||
        strpos($view->exposed_widgets, 'edit-category-wrapper')) {
      $field_info = field_info_field('field_uib_study_category');
      foreach ($field_info['settings']['allowed_values'] as $akey => $atext) {
        $replace = i18n_string_translate(
          "field:field_uib_study_category:#allowed_values:$akey",
          $atext,
          array('langcode' => $language->language)
        );
        $view->exposed_widgets = str_replace($atext, $replace, $view->exposed_widgets);
      }
    }
  }
}

/**
 * Returns defined study categories
 */
function uib_study__get_categories() {
  $field_info = field_info_field('field_uib_study_category');
  return $field_info['settings']['allowed_values'];
}

/**
 * Returns markup for a study facts item
 */
function uib_study__get_study_facts_markup($label, $value) {
  $item = '<span class="study-facts__label">' . $label . '</span>';
  $item .= '<span class="study-facts__value">' . $value . '</span>';
  return $item;
}
