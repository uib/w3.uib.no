<?php
/**
 * @file
 * Code for the UiB Feature Article feature.
 */

include_once 'uib_article.features.inc';


/**
 * Implements hook_menu().
 */
function uib_article_menu() {
  $items['node/%node/menu'] = array(
    'title' => 'Menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uib_article_menu_form', 1),
    'access callback' => 'uib_article__access_check',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $items['node/%/share'] = array(
      'title' => 'Share',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('uib_article__share'),
      'access callback' => 'uib_article__share_access',
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    );
  $items['node/%/tabdelete'] = array(
    'title' => 'Delete',
    'access callback' => 'uib_article__delete_access',
    'access arguments' => array(1),
    'page callback' => 'uib_article__delete_tab',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  return $items;
}

/**
 * Function that sends node to delete confirmation
 */
function uib_article__delete_tab($node) {
  drupal_goto('node/' . $node . '/delete');
}

function uib_article__share($form, &$form_state) {
  $article = node_load(arg(1));
  global $user;

  $form['header'] = array(
    '#type' => 'html_tag',
    '#tag' => 'h1',
    '#value' => $article->title,
  );

  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'area')
    ->propertyCondition('language', $article->language)
    ->fieldCondition('field_uib_content_manager', 'target_id', $user->uid)
    ->propertyOrderBy('title')
    ->execute();

  if ($result) {
    $form['check'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Share this article on the following areas'),
      '#description' => t('Articles can be shared to all the areas you are content manger for.  Please select the areas you want to share this article on.'),
      '#options' => array(),
      '#default_value' => array(),
    );

    $areas = node_load_multiple(array_keys($result['node']));
    $owner = $article->field_uib_area['und'][0]['target_id'];
    foreach ($areas as $area) {
      if ($area->nid != $owner)
        $form['check']['#options'][$area->nid] = $area->title;
    }

    foreach (array_slice($article->field_uib_area['und'], 1) as $value) {
      $form['check']['#default_value'][] = $value['target_id'];
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Update',
    );
  }
  return $form;
}

function uib_article__share_submit($form, &$form_state) {
  $article = node_load(arg(1));
  if ($article) {
    $old = $article->field_uib_area['und'];
    $new = array();
    $checks = $form_state['values']['check'];

    // remove those not present any more
    $seen = array();
    foreach ($old as $i => $v) {
      $nid = $v['target_id'];
      if ($i == 0 || !array_key_exists($nid, $checks) || $checks[$nid]) {
        $new[] = $v;
        $seen[$nid]++;
      }
      else {
        drupal_set_message(t('Article not shared with area "@area" any more', array('@area' => node_load($nid)->title)));
      }
    }

    // add the new ones
    foreach ($checks as $nid => $checked) {
      if ($checked && !$seen[$nid]) {
        $new[] = array( 'target_id' => $nid );
        drupal_set_message(t('Article now shared with area "@area"', array('@area' => node_load($nid)->title)));
      }
    }


    if ($new != $old) {
      $article->field_uib_area['und'] = $new;
      node_save($article);
    }
    else {
      drupal_set_message(t('Article still shared to the same areas'));
    }
  }
  $form_state['redirect'] = 'node/' . arg(1);
}

function uib_article__share_access() {
  if (!user_access('edit any uib_article content'))
    return FALSE;
  $node = node_load(arg(1));
  if ($node && $node->type == 'uib_article') {
    $atype = $node->field_uib_article_type['und'][0]['value'];
    if ($atype == 'news' || $atype == 'event') {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Implements hook_form_alter().
 */
function uib_article_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "uib_article_node_form") {
    // Disable possibility for changing main area if node has connection to menu
    if (isset($form_state['node']->field_uib_area['und'])) {
      $area_id = $form_state['node']->field_uib_area['und'][0]['target_id'];
      $menu_name = 'menu-area-' . $area_id;
      if (!empty($form_state['node']->nid)) {
        $curr_nid = $form_state['node']->nid;
      }
      elseif (!empty($form_state['node']->translation_source->nid)) {
        $curr_nid = $form_state['node']->translation_source->nid;
      }
      if (menu_link_get_preferred('node/' . $curr_nid, $menu_name)) {
        $form['field_uib_area']['und'][0]['target_id']['#disabled'] = TRUE;
      }
    }

    global $user;
    if (!(in_array('superbruker', $user->roles) or $user->uid == 1)) {
      unset($form['field_uib_article_type']['und']['#options']['no_sidebar']);
      // hidden for innholdsprodusent and 3:
      $hideme = array(
        'field_uib_search_manual_boost',
        'field_uib_search_keywords',
        'field_uib_kmd_data',
      );
      foreach ($hideme as $key) {
        hide($form[$key]);
      }
    }
    // Extra save button
    $form['extra_save'] = $form['actions']['submit'];
    $form['extra_save']['#weight'] = -1;

    // Show published timestamp when status = 1, or it already has a value.
    if (
      $form_state['node']->status == 1
      && !count($form_state['node']->field_uib_published_timestamp)
    ) {
      $form['field_uib_published_timestamp']['und'][0]['#default_value']['value'] =
        $form_state['node']->created;
    }
    if (
      $form_state['node']->status == 1
      || (isset($form_state['node']->field_uib_published_timestamp) && count($form_state['node']->field_uib_published_timestamp))
    ) {
      $form['options']['field_uib_published_timestamp'] = $form['field_uib_published_timestamp'];
      $form['options']['field_uib_published_timestamp']['#weight'] = 1000;
      $form['options']['field_uib_published_timestamp']['#group'] = 'additional_settings';
    }

    // Always hide field_uib_published_timestamp in the default position
    hide($form['field_uib_published_timestamp']);

    hide($form['field_twitter_card_image']);

    // Hiding $form['language']
    hide($form['language']);
    if (strstr($form['#action'], 'uib-article?translation')) {
      hide($form['field_uib_area']);

      // Remove field_uib_relation instances
      // Get total textboxes and the key for the higher
      $last_numeric = 0;
      foreach ($form['field_uib_relation']['und'] as $key => $value) {
        if(is_numeric($key)) {
          if ($last_numeric < intval($key)){
            $last_numeric = intval($key);
          }
        }
      }
      // Put the last one (empty one) in the first position and delet the rest
      if ($last_numeric > 0) {
        $form['field_uib_relation']['und'][0] = $form['field_uib_relation']['und'][$last_numeric];
        for ($key = 1; $key <= $last_numeric; $key++){
          unset($form['field_uib_relation']['und'][$key]);
        }
      }

      //Add a message that lets the user know that they are working on a translation
      $params = drupal_get_query_parameters();
      if(isset($params['translation']) && isset($params['target'])) {
        global $language;
        global $base_url;
        $langs = language_list();
        $target = $params['target'];
        $translation = $params['translation'];

        //Redirecting user to the language of the translation
        if($language->language != $target) {
          $get = $_GET;
          //Drupal adds a q parameter that is removed before creating the new GET string
          if(isset($get['q'])) unset($get['q']);
          $get = http_build_query($get);
          header("Location: $base_url/$target/node/add/uib-article?$get");
          exit();
        }

        $target_language = ($language->language == $target ? $langs[$target]->native : $langs[$target]->name);
        if($language->language == 'nb' && $target == 'en') $target_language = 'Engelsk';

        $original = node_load($translation);
        if ($original){
          $msg = t('Currently creating the @language translation of: ', array('@language' => $target_language));
          $msg .= l($original->title, 'node/'. $original->nid);
          if (isset($area_id)) {
            // Get the area that will be assigned to the new article
            $area = node_load($area_id);
            $area_trans = translation_node_get_translations($area->tnid);
            if(isset($area_trans[$target]))
              $area = $area_trans[$target];
            $msg .= '<br />';
            $msg .= t('This translation will be added to the area: ');
            $msg .= l($area->title, 'node/' . $area->nid);
          }
          drupal_set_message($msg, 'warning');
        }
      }
    }

    //Fields to be hidden/required if event is not chosen
    $form['field_uib_event_type']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
      'required' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
    );

    $form['field_uib_date']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array(
          array('value' => 'event'),
          array('value' => 'phd_press_release'),
        ),
      ),
      'required' => array(
        ':input[name="field_uib_article_type[und]"]' => array(
          array('value' => 'event'),
          array('value' => 'phd_press_release'),
        ),
      ),
    );

    $form['field_uib_contacts']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array(
          array('value' => 'event'),
          array('value' => 'phd_press_release'),
          array('value' => 'press_release'),
        ),
      ),
    );

    $form['field_uib_location']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array(
          array('value' => 'event'),
          array('value' => 'phd_press_release'),
        ),
      ),
    );

    $form['field_uib_deadline']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array(
          array('value' => 'event'),
        ),
      ),
    );

    $form['field_uib_registration_link']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array(
          array('value' => 'event'),
        ),
      ),
    );

    $form['field_uib_show_global_calendar']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array(
          array('value' => 'event'),
        ),
      ),
    );

    $hide_in_no_sidebar = array(
      'field_uib_kicker',
      'field_uib_main_media',
      'field_uib_fact_box',
      'field_uib_media',
      'field_uib_files',
      'field_uib_links',
    );
    foreach($hide_in_no_sidebar as $hidden) {
      $form[$hidden]['#states'] = array(
        'invisible' => array(
          ':input[name="field_uib_article_type[und]"]' => array(
            array('value' => 'no_sidebar'),
          ),
        ),
      );
    }

    $form['field_uib_byline']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_article_type[und]"]' => array(
          array('value' => 'event'),
          array('value' => 'infopage'),
          array('value' => 'no_sidebar'),
        ),
      ),
    );

    $form['field_uib_external_author']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_article_type[und]"]' => array(
          array('value' => 'event'),
          array('value' => 'infopage'),
          array('value' => 'no_sidebar'),
        ),
      ),
    );

    $form['field_uib_article_twitter']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_article_type[und]"]' => array(
          array('value' => 'event'),
          array('value' => 'news'),
          array('value' => 'no_sidebar'),
          array('value' => 'evu_study_offer'),
          array('value' => 'press_release'),
          array('value' => 'phd_press_release'),
        ),
      ),
    );


    // Hide som fields
    foreach ($form as $field_key => $field_value) {
      if ($field_key ==  'field_uib_nav_weight') {
        hide($form[$field_key]);
      }
    }
    if ($form['#node_edit_form']) {
      if (!empty($form['menu']['#weight']) AND !empty($form['scheduler_settings']['#weight'])) {
        // Reordering tabs by switching their weights. cf. RTS-1016
        $tmp_weight = $form['menu']['#weight'];
        $form['menu']['#weight'] = $form['scheduler_settings']['#weight'];
        $form['scheduler_settings']['#weight'] = $tmp_weight;
      }
    }

    if (empty($form['nid']['#value'])) {
      // For new articles (but not infopages), add anti-bubbling checkbox
      $form['anti_bubbling'] = array(
        '#title' => t('Do not show on parent areas.'),
        '#type' => 'checkbox',
        '#description' => t('Check this if you do not want this article to automatically show on other areas. You will still be able to add other areas later.'),
        '#weight' => 6,
        // Do not show when infopage article type is selected
        '#states' => array(
          'invisible' => array(
            ':input[name="field_uib_article_type[und]"]' => array(
              array('value' => 'infopage'),
              array('value' => 'press_release'),
            ),
          ),
        ),
      );
      $form['#group_children']['anti_bubbling'] = 'group_information';
    }

    $hide_in_feature_article = array(
      'field_uib_text',
      'field_uib_fact_box',
      'field_uib_media',
      'field_uib_imagecaptions',
      'field_uib_imagecaptions2',
      'field_uib_text_image_captions',
    );
    foreach ($hide_in_feature_article as $hide) {
      $form[$hide]['#states'] = array(
        'invisible' => array(
          ':input[name="field_uib_article_type[und]"]' => array(
            array('value' => 'news'),
          ),
          ':input[name="field_uib_feature_article[und]"]' => array(
            array('checked' => TRUE,),
          ),
        ),
      );
    }

    $form['field_uib_feature_article']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array(
          array('value' => 'news',),
        ),
        ':input[name="field_uib_area[und][0][target_id]"]' => uib_article__get_feature_areas(TRUE),
      ),
    );

    unset($form['field_uib_feature_heading_style']['und']['#options']['wtb']);
    unset($form['field_uib_feature_heading_style']['und']['#options']['h']);

    $only_in_feature_article = array(
      'field_uib_feature_heading_style',
      'field_uib_feature_text',
      'field_uib_feature_mobile_media',
      'field_uib_main_media_teaser',
    );
    foreach ($only_in_feature_article as $only) {
     $form[$only]['#states'] = array(
       'visible' => array(
         ':input[name="field_uib_article_type[und]"]' => array(
           array('value' => 'news',),
         ),
         ':input[name="field_uib_feature_article[und]"]' => array(
           array('checked' => TRUE,),
         ),
       ),
     );
    }
  }
}

/*
 * Implements hook_preprocess_page
 * - Changes the title of the form when it is creating a trasnlation
 */
function uib_article_preprocess_page(&$variables) {
if (!empty($variables['page']['content']['system_main']['#form_id'])
      && $variables['page']['content']['system_main']['#form_id'] == 'uib_article_node_form'
      && !empty($variables['page']['content']['system_main']['#action'])
      && strstr($variables['page']['content']['system_main']['#action'], 'uib-article?translation')) {
  drupal_set_title(t('Create article translation'));
  }
}

/**
 * Implements hook_preprocess_node
 */
function uib_article_preprocess_node(&$variables) {
  if ($variables['page'] && $variables['type'] == 'uib_article') {
    if ($variables['field_uib_article_type']['und'][0]['value'] == 'event') {
      $link = l(t('Add to calendar'), current_path() . '/event.ics');
      $iCal_link = array(
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => array('class' => 'uib-article-ical-link'),
        '#value' => $link,
        '#weight' => 50,
      );
      $variables['content']['ical_link'] = $iCal_link;
      $variables['elements']['#group_children']['ical_link'] = 'group_event_info';
    }
    if (!empty($variables['field_uib_text_image_captions'])) {
      $node = menu_get_object();
      $variables['content']['field_uib_text'][0]['#markup'] = uib_media__insert_captions($variables['content']['field_uib_text'][0]['#markup'], $node);
    }
  }
  //adding gmap, changing the content of the rendered item
  if ($variables['page'] && !empty($variables['field_uib_gmap_link'])) {
    $article_gmap = __uib_w3__article_gmap($variables['field_uib_gmap_link'][0]['url']);
    $variables['content']['field_uib_gmap_link'] = $article_gmap;
  }
}

function uib_article_page_alter(&$page) {
  if (isset($page['content']['system_main']['translation_node_overview'])){
    $translation_links = &$page['content']['system_main']['translation_node_overview']['#rows'];
    foreach ($translation_links as &$obj) {
      if (strstr($obj[0],'Engelsk') || strstr($obj[0],'English')) {
        foreach ($obj as &$item) {
          $item = str_replace('/nb/node', '/en/node', $item);
        }
      } else if (strstr($obj[0],'Norwegian') || strstr($obj[0],'Norsk')) {
        foreach ($obj as &$item) {
          $item = str_replace('/en/node', '/nb/node', $item);
        }
      }
    }
  }
}

/**
 * Implements hook_node_submit().
 *
 * todo: Dont set language if field_uib_area has not changed.
 */
function uib_article_node_submit($node, $form, &$form_state) {
  if ($form["#form_id"] == "uib_article_node_form") {
    if(isset($_GET['destination'])) {
          unset($_GET['destination']);
    }

    $areanid = $node->field_uib_area['und'][0]['target_id'];
    if (isset($areanid)) {
      $area = node_load($areanid);

      if (strstr($form['#action'], 'uib-article?translation')) {
        $other_lang = array('en' => 'nb', 'nb' => 'en');
        $translations = translation_node_get_translations($area->tnid);
        $node->language = $other_lang[$area->language];
        $new_area = $translations[$node->language]->nid;
        $node->field_uib_area['und'][0]['target_id'] = $new_area;

        for ($i = 1; $i < sizeof($node->field_uib_area['und']); $i++){
          $area = node_load($node->field_uib_area['und'][$i]['target_id']);
          $translations = translation_node_get_translations($area->tnid);
          $new_area = $translations[$other_lang[$area->language]]->nid;
          $node->field_uib_area['und'][$i]['target_id'] = $new_area;
        }
      }
      else {
        if (isset($area->language))
          $node->language = $area->language;
      }
    }
  }
}

/**
 * Implements hook_node_validate().
 *
 */
function uib_article_node_validate($node, $form, &$form_state) {
  if ($form["#form_id"] == "uib_article_node_form") {
    if ($form['field_uib_article_type']['und']['#value'] == 'event') {
      if ($form['field_uib_event_type']['und']['#value'] == '_none') {
        form_set_error('field_uib_event_type[und]', t('Event type is required'));
      }
      if ($node->field_uib_date['und'][0]['value'] === NULL or $node->field_uib_date['und'][0]['value2'] === NULL) {
        form_set_error('field_uib_date', t('A start and an end date is required'));
      }
    }
    global $user;
    if (!in_array('superbruker', $user->roles, TRUE) && $user->uid != 1) {
      $area_id = $form_state['values']['field_uib_area']['und'][0]['target_id'];
      if ($area_id != "") {
        $area_node = node_load($area_id);
        if (!uib_area__is_content_manager($area_node, $user)) {
          $number_of_areas = 0;
          foreach ($form_state['values']['field_uib_area']['und'] as $key => $target) {
            if (is_numeric($key) && !empty($target['target_id'])) {
              $number_of_areas++;
            }
          }
          $message = t('You must be content manager of ');
          if ($number_of_areas > 1) {
            $message .= t('the first area');
          }
          else {
            $message .= t('the area');
          }
          form_set_error('field_uib_area][und][0', $message . ': ' . $area_node->title);
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 */
function uib_article_node_presave($node) {
  if ($node->type != 'uib_article')
    return;
  if (!empty($node->field_uib_main_media['und'])) {
    $file = file_load($node->field_uib_main_media['und'][0]['fid']);
    if ($file->type == 'image') {
      $node->field_twitter_card_image['und'][0] = $node->field_uib_main_media['und'][0];
    }
    elseif ($file->type == 'video') {
      $node->field_twitter_card_image['und'] = array();
    }
  }
  if ($node->is_new) {
    if ($node->field_uib_article_type['und'][0]['value'] != 'infopage') {
      if (isset($node->anti_bubbling)) {
        if (!$node->anti_bubbling) {
          // Upon creation of an article,
          // add all area parents to field_uib_area. RTS-914
          $parent_trail = array();
          uib_area__get_parentage($node->field_uib_area['und'][0]['target_id'], $parent_trail);
          $node_areas = array();
          foreach ($node->field_uib_area['und'] as $area) {
            $node_areas[] = $area['target_id'];
          }
          foreach($parent_trail as $pt) {
            if (!in_array($pt, $node_areas)) {
              $node->field_uib_area['und'][]['target_id'] = $pt;
              $node_areas[] = $pt;
            }
          }
        }
      }
    }
    if (
      $node->status == 1
      && !count(@$node->field_uib_published_timestamp['und'])
    ) {
        $node->field_uib_published_timestamp['und'][0]['value'] = time();
    }
  }
  elseif (
    $node->status == 1
    && !count(@$node->field_uib_published_timestamp['und'])
  ) {
      $node->field_uib_published_timestamp['und'][0]['value'] = $node->created;
  }
}

/**
 * Implements hook_node_load().
 */
function uib_article_node_load($nodes, $types){
  $kicker = (preg_match("/^\/en/", request_uri()) ? 'News' : 'Nyhet');
  foreach ($nodes as $key => $node) {
    if ($node->type && $node->type == 'uib_article' && $node->field_uib_article_type[LANGUAGE_NONE][0]['value'] == 'news') {
      if (empty($node->field_uib_kicker)) {
        $node->field_uib_kicker[LANGUAGE_NONE][0]['value'] = $kicker;
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function uib_article_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['short_teaser'] = array(
    'label' => t('Short teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function uib_article_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['field_multiple_value_form'])) {
    $theme_registry['field_multiple_value_form']['type'] = 'module';
    $theme_registry['field_multiple_value_form']['theme path'] = drupal_get_path('module', 'uib_article');
    $theme_registry['field_multiple_value_form']['function'] = 'uib_article_theme_field_multiple_value_form';
  }
}

/**
 * Implements theme_field_multiple_value_form().
 */
function uib_article_theme_field_multiple_value_form($variables) {
  $element = $variables['element'];
  $output = '';

  // Disable table drag for image caption fields
  $draggable = !in_array($element['#field_name'], array('field_uib_imagecaptions', 'field_uib_imagecaptions2'));

  if ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    $table_id = drupal_html_id($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';

    $header = array(
      array(
        'data' => '<label>' . t('!title !required', array('!title' => $element['#title'], '!required' => $required)) . "</label>",
        'colspan' => 2,
        'class' => array('field-label'),
      ),
    );
    if ($draggable) {
      $header[] = t('Order');
    }
    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation)
    $items = array();
    foreach (element_children($element) as $key) {
      if ($key === 'add_more') {
        $add_more_button = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_sort_items_value_helper');

    // Add the items as table rows.
    foreach ($items as $key => $item) {
      $item['_weight']['#attributes']['class'] = array($order_class);
      if (!$draggable) {
        $item['_weight']['#attributes']['style'][] = 'display:none;';
      }
      $delta_element = drupal_render($item['_weight']);
      if ($draggable) {
        $cells = array(
          array(
            'data' => '',
            'class' => array('field-multiple-drag'),
          ),
          drupal_render($item),
          array(
            'data' => $delta_element,
            'class' => array('delta-order'),
          ),
        );
        $rows[] = array(
          'data' => $cells,
          'class' => array('draggable'),
        );
        if (!empty($item['target_id'])) {
          if ($item['target_id']['#field_name'] == 'field_uib_area') {
            $rows[0]['class'][0] = 'nodrag';
            $rows[0]['class'][1] = 'area';
          }
        }
      } else {
        $cells = array(
          drupal_render($item) . $delta_element,
        );
        $rows[] = array(
          'data' => $cells,
        );
      }
    }

    $output = '<div class="form-item">';
    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-multiple-table'))));
    $output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
    $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
    $output .= '</div>';

    if ($draggable) {
      drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
    }
  } else {
    foreach (element_children($element) as $key) {
      $output .= drupal_render($element[$key]);
    }
  }
  return $output;
}

function uib_article__access_check($node) {
  if (!empty($node)) {
    if ($node->type == 'uib_article' && node_access('update', $node)) {
      if (!empty($node->field_uib_area['und'][0]['target_id'])) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

function uib_article__delete_access($node) {
  if (!empty($node)) {
    $node = node_load($node);
    if (in_array($node->type, array('area', 'uib_study'))) return FALSE;
    $area = uib_area__get_current();
    global $user;
    if ((uib_area__is_content_manager($area, $user) && in_array('innholdsprodusent', $user->roles)) || in_array('superbruker', $user->roles) || $user->uid == 1) return TRUE;
  }
  return FALSE;
}

function uib_article_menu_form($form, &$form_state, $node) {
  return uib_article_menu_local_task($form, $form_state, $node, 'uib_article');
}

function uib_article_menu_local_task($form, &$form_state, $node, $uib_content_type) {
  if (!isset($form_state[$uib_content_type]['confirm'])) {
    // Obtain menu and menu link data. If we are returning from
    // an ajax call, these must be fetched from form_state.
    if (empty($form_state[$uib_content_type]['node'])) {
      // Save node for later use at form submit
      $form_state[$uib_content_type]['node'] = $node;
    }
    if (!empty($form_state[$uib_content_type]['menu_name'])) {
      $menu_name = $form_state[$uib_content_type]['menu_name'];
    }
    else {
      $menu_name = uib_area__get_current_menu();
      $form_state[$uib_content_type]['menu_name'] = $menu_name;
    }
    $menu = menu_load($menu_name);
    if (!empty($form_state[$uib_content_type]['menu_link'])) {
      $menu_link = $form_state[$uib_content_type]['menu_link'];
    }
    else {
      $menu_link = menu_link_get_preferred('node/' . $node->nid, $menu_name);
      if (!empty($menu_link)) {
        $form_state[$uib_content_type]['menu_link'] = $menu_link;
      }
    }
    $form['uib_area_menu_formtext'] = array(
      '#type' => 'item',
      '#title' => $menu['description'] . ' ' . t('options'),
    );

    $menu_edit_link = l(t('Edit area menu here'), "admin/structure/menu/manage/" . $menu_name);

    if (!empty($menu_link)) {
      $form['uib_area_menu_formtext']['#description'] = t('This article is currently in the menu. ' . $menu_edit_link);
    }
    else {
      $form['uib_area_menu_formtext']['#description'] = t('This article is not in the menu');
    }


    $form['uib_area_menu_settings'] = array(
      '#type' => 'container',
    );

    if (!empty($node->field_uib_area['und'][0]['target_id'])) {
      $form['uib_area_menu_settings']['area_menu_item_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Menu item title'),
        '#required' => 'true',
      );

      if (!empty($menu_link['link_title'])) {
        $form['uib_area_menu_settings']['area_menu_item_title']['#value'] = $menu_link['link_title'];
      }

      $form['uib_area_menu_settings']['area_menu_select'] = array(
        '#type' => 'select',
        '#title' => t('Select main menu item'),
        '#options' => uib_area__get_menu($menu_name, FALSE, 1),
      );

      $default_value = '0';
      if (!empty($menu_link['mlid'])) {
        $form['uib_area_menu_settings']['area_menu_select']['#value'] = $menu_link['plid'];
        $default_value = '2';
      }

      $form['uib_area_menu_settings']['relations'] = array(
        '#type' => 'hidden',
        '#value' => '2',
      );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#name' => 'save_button',
      );

      $form['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#name' => 'delete_button',
        '#disabled' => FALSE,
      );
      if (empty($menu_link['mlid'])) {
        $form['delete']['#disabled'] = TRUE;
      }
    }
    else {
      $form['uib_area_menu_formtext']['#description'] = t('This article does not belong to an area.');
    }
    return $form;
  }
  else {
    $path = current_path();
    return confirm_form(
      $form,
      t('Delete menu link for this article?'),
      $path,
      t('Removing menu link can not be undone.'),
      t('Confirm'),
      t('Cancel')
    );
  }
}

/**
 * Ajax callback from uib_article_menu_form
 */
function uib_article__menu_form_setrels($form, $form_state) {
  return $form['uib_area_menu_settings']['radios'];
}

function uib_article_menu_form_submit($form, &$form_state) {
  uib_article_menu_local_task_submit($form, $form_state, 'uib_article');
}

function uib_article_menu_local_task_submit($form, &$form_state, $uib_content_type) {
  if ($form_state['clicked_button']['#name'] == 'delete_button' && !isset($form_state[$uib_content_type]['confirm'])) {
    $form_state[$uib_content_type]['confirm'] = TRUE;
    $form_state['rebuild'] = TRUE;
  }
  else {
    if ($form_state['clicked_button']['#name'] == 'save_button') {
      // Save action
      if (!empty($form_state[$uib_content_type]['menu_link']) && ($form_state['input']['area_menu_item_title'] == $form_state['values']['area_menu_item_title']) && ($form_state['input']['area_menu_select'] == $form_state['values']['area_menu_select'])) {
        drupal_set_message(t('Menu link unchanged.'), 'status', FALSE);
      }
      else {
        if ($form_state['input']['relations'] == 2) {
          // Child to selected
          $parent = $form_state['input']['area_menu_select'];
          $expanded = 0;
          $menu_tree = menu_tree_all_data($form_state[$uib_content_type]['menu_name'], NULL);
          $existing_weights = _get_weights(_get_subtree($menu_tree, $parent));
          // Determine weight to use (put item last)
          $weight = NULL;
          foreach ($existing_weights as $wht) {
            if ($weight === NULL) {
              $weight = $wht;
            }
            elseif ($wht > $weight) {
              $weight = $wht;
            }
          }
          $weight++;
        }
        else {
          // Sibling to selected
          $sibling = menu_link_load($form_state['input']['area_menu_select']);
          $parent = $sibling['plid'];
          if ($sibling['depth'] > 0) {
            $expanded = 0;
          }
          else {
            $expanded = 1;
          }
          $menu_tree = menu_tree_all_data($form_state[$uib_content_type]['menu_name'], NULL);
          $existing_weights = _get_weights(_get_subtree($menu_tree, $parent));
          // Determine weight to use (halfway in between items)
          unset($prev);
          unset($next);
          unset($sibl);
          foreach($existing_weights as $key => $wht) {
            if ($key == $sibling['mlid']) {
              $sibl = $sibling['mlid'];
              continue;
            }
            if (!isset($sibl)) {
              $prev = $wht;
            }
            if (!isset($next) && isset($sibl)) {
              $next = $wht;
              break;
            }
          }
          if (!isset($prev)) {
            $prev = $sibling['weight'];
          }
          if (!isset($next)) {
            $next = $sibling['weight'];
          }
          if ($form_state['input']['relations'] == 0) {
            // Put after sibling
            $weight = round(($sibling['weight'] + $next) / 2);
          }
          else {
            // Put before sibling
            $weight = round(($sibling['weight'] + $prev) / 2);
          }
        }
        if (empty($form_state[$uib_content_type]['menu_link'])) {
          $mlid = NULL;
        }
        else {
          $mlid = $form_state[$uib_content_type]['menu_link']['mlid'];
        }

        // Save menu link
        $new_menu_link = array(
          'link_path' => 'node/' . $form_state[$uib_content_type]['node']->nid,
          'link_title' => $form_state['input']['area_menu_item_title'],
          'menu_name' => $form_state[$uib_content_type]['menu_name'],
          'expanded' => $expanded,
          'mlid' => $mlid,
          'plid' => $parent,
          'weight' => $weight,
        );
        menu_link_save($new_menu_link);
        drupal_set_message(t('Menu link saved.'), 'status', FALSE);

      }
    }
    else {
      // Delete action
      menu_link_delete($form_state[$uib_content_type]['menu_link']['mlid']);
      drupal_set_message(t('Menu link deleted.'), 'status', FALSE);
    }
  }
}

function _get_subtree($tree, $mlid) {
  foreach ($tree as $tree_link) {
    if ($tree_link['link']['mlid'] == $mlid) {
      return $tree_link['below'];
    }
    elseif (!empty($tree_link['below'])) {
      _get_subtree($tree_link['below'], $mlid);
    }
  }
}

function _get_weights($tree) {
  $weightset = array();
  foreach ($tree as $tree_link) {
    $weightset[$tree_link['link']['mlid']] = $tree_link['link']['weight'];
  }
  return $weightset;
}

/**
 * Implements hook_node_insert()
 */
function uib_article_node_insert($node) {
  _uib_article__clear_field_cache($node);
}

/**
 * Implements hook_node_update()
 */
function uib_article_node_update($node) {
  _uib_article__clear_field_cache($node);
}

/**
 * Function to clear dependent field caches when the given node is updated
 *
 * @param   $node           the node object that was inserted or updated
 */
function _uib_article__clear_field_cache($node) {
  if ($node->type == 'uib_article') {
    $article_type = $node->field_uib_article_type['und'][0]['value'];
    $cache_invalidate = variable_get('uib_field_cache_invalidate_by_article_type');
    if (!empty($cache_invalidate[$article_type])) {
      $gone = array();
      foreach ($cache_invalidate[$article_type] as $nid) {
        uibx_log("Invalidating cache for /node/$nid", 'notice');
        cache_clear_all('field:node:' . $nid, 'cache_field');
        if (!_uib_article__node_exists($nid)) {
          $gone[] = $nid;
        }
      }
      if ($gone) {
        // remove those nids from future invalidations
        $cache_invalidate[$article_type] = array_diff($cache_invalidate[$article_type], $gone);
        variable_set('uib_field_cache_invalidate_by_article_type', $cache_invalidate);
      }
    }
  }
}

/**
 *  Returns true if the node object with the given $nid exists
 */
function _uib_article__node_exists($nid) {
  $q = db_query("SELECT COUNT(nid) AS count FROM {node} WHERE nid = :nid", array(':nid' => $nid));
  $c = $q->fetchField();
  return $c;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function uib_article_form_node_delete_confirm_alter(&$form, $form_state) {
  if (empty($form['nid']['#value'])) {
    return;
  }

  $nid = $form['nid']['#value'];
  $q = db_query("select s.entity_id from {field_data_field_uib_step} as s inner join {field_data_field_uib_step_content} as sc on s.field_uib_step_value = sc.entity_id where sc.field_uib_step_content_target_id = :nid", array(':nid' => $nid));
  $c = $q->fetchField();
  if ($c) {
    $content_list = node_load($c);
    $message = t('This node is a part of the content list "!title" and must be removed from the content list before it can be deleted.', array('!title' => l($content_list->title, 'node/' . $c)));
    drupal_set_message($message, 'error');
    unset($form['description']);
    unset($form['actions']['submit']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function uib_article_form_node_form_alter($form, $form_state, $form_id) {
  $unpublished = &drupal_static('uib_admin_unpublished');
  $unpublished = !$form['options']['status']['#default_value']
    && intval($form['nid']['#value']) > 0;
  if ($unpublished) {
    drupal_set_message(t('This content item is unpublished'), 'warning');
  }
}

/*
 * Implements hook_ctools_plugin_directory
 */
function uib_article_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return 'plugins/' . $plugin;
  }
}

/**
* Implements hook_query_TAG_alter
*/
function uib_article_query_autocompleteuser_alter(&$query) {
  $join = 'users.uid';
  $query->leftJoin('field_data_field_uib_first_name', 'fn', 'users.uid = fn.entity_id');
  $query->leftJoin('field_data_field_uib_last_name', 'ln', 'users.uid = ln.entity_id');
  $match = explode(' ', $query->getMetaData('match'));
  if (count($match) == 1) {
    $m0 = '%' . end($match) . '%';
    $or = db_or();
    $or->condition('fn.field_uib_first_name_value', $m0, 'LIKE');
    $or->condition('ln.field_uib_last_name_value', $m0, 'LIKE');
    $or->condition('users.name', $m0, 'LIKE');
    $query->condition($or);
  }
  else if (count($match) > 1) {
    $m0 = '%' . implode('%', array_slice($match, 0, -1)) . '%';
    $m1 = '%' . end($match) . '%';
    $m2 = '%' . implode('%', $match) . '%';
    $and = db_and()->
      condition('fn.field_uib_first_name_value', $m0, 'LIKE') ->
      condition('ln.field_uib_last_name_value', $m1, 'LIKE');
    $or = db_or()->condition($and);
    $and = db_and()->
      condition('fn.field_uib_first_name_value', $m1, 'LIKE') ->
      condition('ln.field_uib_last_name_value', $m0, 'LIKE');
    $or->condition($and);
    $or->condition('fn.field_uib_first_name_value', $m2, 'LIKE');
    $or->condition('ln.field_uib_last_name_value', $m2, 'LIKE');
    $query->condition($or);
  }
  $query->orderBy('fn.field_uib_first_name_value');
  $query->orderBy('ln.field_uib_last_name_value');
}

/**
 * Function returning an array of areas allowed to use the feature article option
 */
function uib_article__get_feature_areas($news = FALSE) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'area')
    ->fieldCondition('field_uib_area_type', 'value', 'feature area', '=');
  $result = $query->execute();
  if(isset($result['node'])) {
    $allowed_areas_nids = $news ? array_merge(array_keys($result['node']), array(36363, 36364)) : array_keys($result['node']);
    $allowed_areas = entity_load('node', $allowed_areas_nids);
    $output = array();
    foreach($allowed_areas as $key => $allowed_area) {
      $output[] = array('value' => $allowed_area->title . ' (' . $key . ')');
    }
    return $output;
  }
  return;
}

/**
 * Function returning a static gmap
 */
function __uib_w3__article_gmap(&$map_link) {
  if (empty($map_link)) return;
  $url = $map_link;//['und'][0]['url'];
  $ex = explode("@",$url);
  $excoords = explode(",",$ex[1]);
  $coordloc = $excoords[0].",".$excoords[1];
  $imgurl = 'https://maps.googleapis.com/maps/api/staticmap?size=371x247&scale=1&zoom=11&center='.$coordloc.'&markers='.$coordloc.'&key=AIzaSyCrQev7O7YOcc2IiEbS0PbDSbzAbZcnkrU';
  $element = array(
    '#type' => 'markup',
    '#markup' => '<div class="article-gmap">',
    '#weight' => '0',
  );
  $element['#markup'] .= '<a href="'.$url.'"><img src="'.$imgurl.'"></a>';
  $element['#markup'] .= '</div>';
  return $element;
}

/**
 * Implements hook_block_info()
 */
function uib_article_block_info() {
  $blocks['twitter']['info'] = t('Twitter feed');
  $blocks['twitter']['status'] = TRUE;
  return $blocks;
}


/**
 * Implements HOOK_block_view()
 */
function uib_article_block_view($delta = '') {
  global $language;
  $block = array();
  switch ($delta) {
  case 'twitter':
    $nid = ((arg(0) == 'node' && is_numeric(arg(1))) ? arg(1) : FALSE);
    $node = node_load($nid);
    if ($nid) {
      if (!empty($node->field_uib_article_twitter['und'][0]['safe_value'])) {
        $twitter_handle = $node->field_uib_article_twitter['und'][0]['safe_value'];
        $twitter_script ='<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?"http":"https";if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>';

        $elements .= '<a class="twitter-timeline" href="https://twitter.com/' . $twitter_handle .
          '" ' . 'data-widget-id="504179221749456896" data-screen-name="' . $twitter_handle .
          '" height="350" data-chrome="noheader nofooter">' .
          t('Tweets by @@twitter_handler', array('@twitter_handler' =>  $twitter_handle)) . '</a>';

        $block['subject'] = '<h3>Twitter</h3>';
        $block['content'] = $elements . $twitter_script;
      }
    }
    break;
  }
  return $block;
}

/**
 * Get the real value of last updated
 */
function uib_article__get_real_last_updated($nid) {
  $result = db_query('SELECT MAX(timestamp) FROM node_revision WHERE nid = :nid AND uid > 1', array(':nid' => $nid));
    foreach($result as $row) {
      if ($row->max !== NULL) return(date('d.m.Y' , $row->max));
    }
  return FALSE;
}