<?php

/**
 * Implements hook_menu().
 */
function uib_api_menu() {
  $items["api"] = array(
    'page callback' => 'uib_api__home',
    'access callback' => TRUE,
  );
  $items["api/areas.json"] = array(
    'page callback' => 'uib_api__areas_json',
    'access callback' => TRUE,
  );
  $items["api/calendar.json"] = array(
    'page callback' => 'uib_api__calendar_json',
    'access callback' => TRUE,
  );
  $items["api/info"] = array(
    'page callback' => 'uib_api__info_json',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Returns the homepage for the API section.
 */
function uib_api__home() {
  return "<h2>Reservert</h2>";
}

/**
 * Return list of all areas
 */
function uib_api__areas_json() {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'area')
    ;
  $result = $query->execute();
  $nids = array_keys($result['node']);
  $nodes = node_load_multiple($nids);

  $data = array();

  foreach ($nodes as $node) {
    if ($node->nid === $node->tnid) {
      $data[$node->tnid]['id'] = (int)$node->nid;
      if ($node->field_uib_sebra_id) {
        $data[$node->tnid]['sebra_id'] = (int)$node->field_uib_sebra_id['und'][0]['value'];
      }
      if ($node->field_uib_ou) {
        $ou = node_load($node->field_uib_ou['und'][0]['target_id']);
        $data[$node->tnid]['ou'] = (int)$ou->field_uib_ou_id['und'][0]['value'];
      }
      $data[$node->tnid]['type'] = $node->field_uib_area_type['und'][0]['value'];
      if (!$node->status) {
        $data[$node->tnid]['unpublished'] = true;
      }
      $parents = array();
      if ($node->field_uib_area_parents) {
        foreach ($node->field_uib_area_parents['und'] as $v) {
          $parents[] = (int)$v['target_id'];
        }
      }
      if ($parents) {
        $data[$node->tnid]['parents'] = $parents;
      }
    }
    $data[$node->tnid]['name'][$node->language] = $node->title;
  }

  $data = array_filter($data, function ($v) {
    return array_key_exists('id', $v);
  });
  ksort($data);
  $data = array(
    "areas" => array_values($data),
  );
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
  return drupal_json_output($data);
}


/**
 * Return selected calendar events as json
 */
function uib_api__calendar_json() {
  $offset = 0;
  $limit = 200;
  $from_date = date('c');

  $query = new EntityFieldQuery();
  $query
    -> entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'uib_article')
    ->fieldCondition('field_uib_article_type','value', 'event')
    ->fieldCondition('field_uib_date', 'value2', $from_date, '>=')
    ->propertyCondition('status', 1)
    ->fieldOrderBy('field_uib_date', 'value')
    ->range($offset, $limit)
    ;
  $result = $query->execute();
  $nids = array_keys($result['node']);
  $nodes = node_load_multiple($nids);

  $data = array(
    'from_date' => $from_date,
    'events'=>array(),
  );
  foreach ($nodes as $nid => $node) {
    $row = array(
      'id'        => $nid,
      'type'      => $node->field_uib_event_type['und'][0]['value'],
      'title'     => $node->title,
      'date_from' => $node->field_uib_date['und'][0]['value']."Z",
      'date_to'   => $node->field_uib_date['und'][0]['value2']."Z",
      'path'      => drupal_get_path_alias('node/' . $nid, $node->language),
      'language'  => $node->language,
    );
    if ($node->tnid && $nid != $node->tnid) {
      $row['translation_of'] = (int)$node->tnid;
    }

    if (isset($node->field_uib_lead['und'])) {
      $row['lead'] = $node->field_uib_lead['und'][0]['value'];
    }
    if (isset($node->field_uib_location['und'])) {
      $row['location'] = $node->field_uib_location['und'][0]['value'];
    }

    $data['events'][] = $row;
  }

  drupal_add_http_header('Access-Control-Allow-Origin', '*');
  return drupal_json_output($data);
}

/**
 * Return info about the current version of this application
 */
function uib_api__info_json() {
  $data = array(
    'w3_version' => uibx_current_version(),
    'drupal_version' => VERSION,
    'php_version' => phpversion(),
    'db_version' => db_query('SELECT version()')->fetchColumn(0),
  );
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
  return drupal_json_output($data);
}
