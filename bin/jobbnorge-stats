#!/usr/bin/perl -w

# This script reads through the list of log files and reports stats on how
# the requests to jobbnorge performs.
#
# On attila.uib.no it can be run invoked with:
#
#    jobbnorge-stats /var/log/drupal.log*
#

use strict;
use Getopt::Long qw(GetOptions);

GetOptions(\my %opt,
    'csv'
) || die;

my %stats;

for my $file (@ARGV) {
    if ($file =~ /\.gz$/) {
	$file = "gunzip -c $file |";
    }
    #print "$file\n";
    open(my $fh, $file) || die;
    while (<$fh>) {
	next unless /FEED GET https?:\/\/www\.jobbnorge\.no/;
	my $day = substr($_, 0, 6);
	if (/=> 200 OK \((\d+)ms\)/) {
	    my $ms = $1;
	    #print "OK $ms\n";
	    $stats{$day}{ok}{n}++;
	    $stats{$day}{ok}{sum} += $ms;
	    min_max(\$stats{$day}{ok}, $ms);
	}
	elsif (/request timed out errno=1 \((\d+)ms\)/) {
	    my $ms = $1;
	    $stats{$day}{timeout}{n}++;
	    $stats{$day}{timeout}{sum} += $ms;
	    min_max(\$stats{$day}{timeout}, $ms);
	}
	else {
	    $stats{$day}{err}++;
	}
    }
    close($fh);
}

#use Data::Dump; dd \%stats;

if ($opt{csv}) {
    print join("\t", qw(day req fail min avg max min avg max err)), "\n";
}
else {
    print "day     #req fail     min     avg     max     min     avg      max  err\n";
    print "------ ----- ----  ------  ------  ------  ------  ------   ------  ---\n";
}
for my $day (sort keys %stats) {
    my $requests = $stats{$day}{ok}{n} + $stats{$day}{timeout}{n};
    my @row = (
        $day,
	$requests,
	sprintf("%.3f", $stats{$day}{timeout}{n} / $requests),
	$stats{$day}{ok}{min},
	sprintf("%.0f", $stats{$day}{ok}{sum} / $stats{$day}{ok}{n}),
	$stats{$day}{ok}{max},
	$stats{$day}{timeout}{min},
	sprintf("%.0f", $stats{$day}{timeout}{sum} / $stats{$day}{timeout}{n}),
	$stats{$day}{timeout}{max},
	$stats{$day}{err} || 0,
    );
    if ($opt{csv}) {
	print join("\t", @row), "\n";
    }
    else {
	$row[2] *= 100; # percent
	printf "%s %5d %3.0f%% %5.0fms %5.0fms %5.0fms %5.0fms %5.0fms %6.0fms %4d\n", @row;
    }
}

sub min_max {
    my($hash, $num) = @_;
    if (!exists $$hash->{min} || $$hash->{min} > $num) {
	$$hash->{min} = $num;
    }
    if (!exists $$hash->{max} || $$hash->{max} < $num) {
	$$hash->{max} = $num;
    }
}
